// Reserved word lists for various dialects of the language
var reservedWords = {
  3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
  5: "class enum extends super const export import",
  6: "enum",
  strict: "implements interface let package private protected public static yield",
  strictBind: "eval arguments" };
// And the keywords

var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
var keywords = {
  5: ecma5AndLessKeywords,
  "5module": ecma5AndLessKeywords + " export import",
  6: ecma5AndLessKeywords + " const class extends export import super" };

var keywordRelationalOperator = /^in(stanceof)?$/; // ## Character categories
// Big ugly regular expressions that match characters in the
// whitespace, identifier, and identifier-start categories. These
// are only applied when a character is found to actually have a
// code point above 128.
// Generated by `bin/generate-identifier-regex.js`.

var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u08a0-\u08b4\u08b6-\u08c7\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\u9ffc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7bf\ua7c2-\ua7ca\ua7f5-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
var nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d3-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf\u1ac0\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1df9\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
nonASCIIidentifierStartChars = nonASCIIidentifierChars = null; // These are a run-length and offset encoded representation of the
// >0xffff code points that are a valid part of identifiers. The
// offset starts at 0x10000, and each pair of numbers represents an
// offset to the next range, and then a size of the range. They were
// generated by bin/generate-identifier-regex.js
// eslint-disable-next-line comma-spacing

var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938]; // eslint-disable-next-line comma-spacing

var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239]; // This has a complexity linear to the value of the code. The
// assumption is that looking up astral identifier characters is
// rare.

function isInAstralSet(code, set) {
  var pos = 0x10000;

  for (var i = 0; i < set.length; i += 2) {
    pos += set[i];

    if (pos > code) {
      return false;
    }

    pos += set[i + 1];

    if (pos >= code) {
      return true;
    }
  }
} // Test whether a given character code starts an identifier.


function isIdentifierStart(code, astral) {
  if (code < 65) {
    return code === 36;
  }

  if (code < 91) {
    return true;
  }

  if (code < 97) {
    return code === 95;
  }

  if (code < 123) {
    return true;
  }

  if (code <= 0xffff) {
    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
  }

  if (astral === false) {
    return false;
  }

  return isInAstralSet(code, astralIdentifierStartCodes);
} // Test whether a given character is part of an identifier.


function isIdentifierChar(code, astral) {
  if (code < 48) {
    return code === 36;
  }

  if (code < 58) {
    return true;
  }

  if (code < 65) {
    return false;
  }

  if (code < 91) {
    return true;
  }

  if (code < 97) {
    return code === 95;
  }

  if (code < 123) {
    return true;
  }

  if (code <= 0xffff) {
    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
  }

  if (astral === false) {
    return false;
  }

  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
} // ## Token types
// The assignment of fine-grained, information-carrying type objects
// allows the tokenizer to store the information it has about a
// token in a way that is very cheap for the parser to look up.
// All token type variables start with an underscore, to make them
// easy to recognize.
// The `beforeExpr` property is used to disambiguate between regular
// expressions and divisions. It is set on all token types that can
// be followed by an expression (thus, a slash after them would be a
// regular expression).
//
// The `startsExpr` property is used to check if the token ends a
// `yield` expression. It is set on all token types that either can
// directly start an expression (like a quotation mark) or can
// continue an expression (like the body of a string).
//
// `isLoop` marks a keyword as starting a loop, which is important
// to know when parsing a label, in order to allow or disallow
// continue jumps to that label.


var TokenType = function TokenType(label, conf) {
  if (conf === void 0) conf = {};
  this.label = label;
  this.keyword = conf.keyword;
  this.beforeExpr = !!conf.beforeExpr;
  this.startsExpr = !!conf.startsExpr;
  this.isLoop = !!conf.isLoop;
  this.isAssign = !!conf.isAssign;
  this.prefix = !!conf.prefix;
  this.postfix = !!conf.postfix;
  this.binop = conf.binop || null;
  this.updateContext = null;
};

function binop(name, prec) {
  return new TokenType(name, {
    beforeExpr: true,
    binop: prec });

}

var beforeExpr = {
  beforeExpr: true },

startsExpr = {
  startsExpr: true };
// Map keyword names to token types.

var keywords$1 = {}; // Succinct definitions of keyword token types

function kw(name, options) {
  if (options === void 0) options = {};
  options.keyword = name;
  return keywords$1[name] = new TokenType(name, options);
}

var types = {
  num: new TokenType("num", startsExpr),
  regexp: new TokenType("regexp", startsExpr),
  string: new TokenType("string", startsExpr),
  name: new TokenType("name", startsExpr),
  eof: new TokenType("eof"),
  // Punctuation token types.
  bracketL: new TokenType("[", {
    beforeExpr: true,
    startsExpr: true }),

  bracketR: new TokenType("]"),
  braceL: new TokenType("{", {
    beforeExpr: true,
    startsExpr: true }),

  braceR: new TokenType("}"),
  parenL: new TokenType("(", {
    beforeExpr: true,
    startsExpr: true }),

  parenR: new TokenType(")"),
  comma: new TokenType(",", beforeExpr),
  semi: new TokenType(";", beforeExpr),
  colon: new TokenType(":", beforeExpr),
  dot: new TokenType("."),
  question: new TokenType("?", beforeExpr),
  questionDot: new TokenType("?."),
  arrow: new TokenType("=>", beforeExpr),
  template: new TokenType("template"),
  invalidTemplate: new TokenType("invalidTemplate"),
  ellipsis: new TokenType("...", beforeExpr),
  backQuote: new TokenType("`", startsExpr),
  dollarBraceL: new TokenType("${", {
    beforeExpr: true,
    startsExpr: true }),

  // Operators. These carry several kinds of properties to help the
  // parser use them properly (the presence of these properties is
  // what categorizes them as operators).
  //
  // `binop`, when present, specifies that this operator is a binary
  // operator, and will refer to its precedence.
  //
  // `prefix` and `postfix` mark the operator as a prefix or postfix
  // unary operator.
  //
  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
  // binary operators with a very low precedence, that should result
  // in AssignmentExpression nodes.
  eq: new TokenType("=", {
    beforeExpr: true,
    isAssign: true }),

  assign: new TokenType("_=", {
    beforeExpr: true,
    isAssign: true }),

  incDec: new TokenType("++/--", {
    prefix: true,
    postfix: true,
    startsExpr: true }),

  prefix: new TokenType("!/~", {
    beforeExpr: true,
    prefix: true,
    startsExpr: true }),

  logicalOR: binop("||", 1),
  logicalAND: binop("&&", 2),
  bitwiseOR: binop("|", 3),
  bitwiseXOR: binop("^", 4),
  bitwiseAND: binop("&", 5),
  equality: binop("==/!=/===/!==", 6),
  relational: binop("</>/<=/>=", 7),
  bitShift: binop("<</>>/>>>", 8),
  plusMin: new TokenType("+/-", {
    beforeExpr: true,
    binop: 9,
    prefix: true,
    startsExpr: true }),

  modulo: binop("%", 10),
  star: binop("*", 10),
  slash: binop("/", 10),
  starstar: new TokenType("**", {
    beforeExpr: true }),

  coalesce: binop("??", 1),
  // Keyword token types.
  _break: kw("break"),
  _case: kw("case", beforeExpr),
  _catch: kw("catch"),
  _continue: kw("continue"),
  _debugger: kw("debugger"),
  _default: kw("default", beforeExpr),
  _do: kw("do", {
    isLoop: true,
    beforeExpr: true }),

  _else: kw("else", beforeExpr),
  _finally: kw("finally"),
  _for: kw("for", {
    isLoop: true }),

  _function: kw("function", startsExpr),
  _if: kw("if"),
  _return: kw("return", beforeExpr),
  _switch: kw("switch"),
  _throw: kw("throw", beforeExpr),
  _try: kw("try"),
  _var: kw("var"),
  _const: kw("const"),
  _while: kw("while", {
    isLoop: true }),

  _with: kw("with"),
  _new: kw("new", {
    beforeExpr: true,
    startsExpr: true }),

  _this: kw("this", startsExpr),
  _super: kw("super", startsExpr),
  _class: kw("class", startsExpr),
  _extends: kw("extends", beforeExpr),
  _export: kw("export"),
  _import: kw("import", startsExpr),
  _null: kw("null", startsExpr),
  _true: kw("true", startsExpr),
  _false: kw("false", startsExpr),
  _in: kw("in", {
    beforeExpr: true,
    binop: 7 }),

  _instanceof: kw("instanceof", {
    beforeExpr: true,
    binop: 7 }),

  _typeof: kw("typeof", {
    beforeExpr: true,
    prefix: true,
    startsExpr: true }),

  _void: kw("void", {
    beforeExpr: true,
    prefix: true,
    startsExpr: true }),

  _delete: kw("delete", {
    beforeExpr: true,
    prefix: true,
    startsExpr: true }) };

// Matches a whole line break (where CRLF is considered a single
// line break). Used to count lines.

var lineBreak = /\r\n?|\n|\u2028|\u2029/;
var lineBreakG = new RegExp(lineBreak.source, "g");

function isNewLine(code, ecma2019String) {
  return code === 10 || code === 13 || !ecma2019String && (code === 0x2028 || code === 0x2029);
}

var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
var ref = Object.prototype;
var hasOwnProperty = ref.hasOwnProperty;
var toString = ref.toString; // Checks if an object has a property.

function has(obj, propName) {
  return hasOwnProperty.call(obj, propName);
}

var isArray = Array.isArray || function (obj) {
  return toString.call(obj) === "[object Array]";
};

function wordsRegexp(words) {
  return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$");
} // These are used when `options.locations` is on, for the
// `startLoc` and `endLoc` properties.


var Position = function Position(line, col) {
  this.line = line;
  this.column = col;
};

Position.prototype.offset = function offset(n) {
  return new Position(this.line, this.column + n);
};

var SourceLocation = function SourceLocation(p, start, end) {
  this.start = start;
  this.end = end;

  if (p.sourceFile !== null) {
    this.source = p.sourceFile;
  }
}; // The `getLineInfo` function is mostly useful when the
// `locations` option is off (for performance reasons) and you
// want to find the line/column position for a given character
// offset. `input` should be the code string that the offset refers
// into.


function getLineInfo(input, offset) {
  for (var line = 1, cur = 0;;) {
    lineBreakG.lastIndex = cur;
    var match = lineBreakG.exec(input);

    if (match && match.index < offset) {
      ++line;
      cur = match.index + match[0].length;
    } else {
      return new Position(line, offset - cur);
    }
  }
} // A second optional argument can be given to further configure
// the parser process. These options are recognized:


var defaultOptions = {
  // `ecmaVersion` indicates the ECMAScript version to parse. Must be
  // either 3, 5, 6 (2015), 7 (2016), 8 (2017), 9 (2018), or 10
  // (2019). This influences support for strict mode, the set of
  // reserved words, and support for new syntax features. The default
  // is 10.
  ecmaVersion: 10,
  // `sourceType` indicates the mode the code should be parsed in.
  // Can be either `"script"` or `"module"`. This influences global
  // strict mode and parsing of `import` and `export` declarations.
  sourceType: "script",
  // `onInsertedSemicolon` can be a callback that will be called
  // when a semicolon is automatically inserted. It will be passed
  // the position of the comma as an offset, and if `locations` is
  // enabled, it is given the location as a `{line, column}` object
  // as second argument.
  onInsertedSemicolon: null,
  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
  // trailing commas.
  onTrailingComma: null,
  // By default, reserved words are only enforced if ecmaVersion >= 5.
  // Set `allowReserved` to a boolean value to explicitly turn this on
  // an off. When this option has the value "never", reserved words
  // and keywords can also not be used as property names.
  allowReserved: null,
  // When enabled, a return at the top level is not considered an
  // error.
  allowReturnOutsideFunction: false,
  // When enabled, import/export statements are not constrained to
  // appearing at the top of the program.
  allowImportExportEverywhere: false,
  // When enabled, await identifiers are allowed to appear at the top-level scope,
  // but they are still not allowed in non-async functions.
  allowAwaitOutsideFunction: false,
  // When enabled, hashbang directive in the beginning of file
  // is allowed and treated as a line comment.
  allowHashBang: false,
  // When `locations` is on, `loc` properties holding objects with
  // `start` and `end` properties in `{line, column}` form (with
  // line being 1-based and column 0-based) will be attached to the
  // nodes.
  locations: false,
  // A function can be passed as `onToken` option, which will
  // cause Acorn to call that function with object in the same
  // format as tokens returned from `tokenizer().getToken()`. Note
  // that you are not allowed to call the parser from the
  // callback—that will corrupt its internal state.
  onToken: null,
  // A function can be passed as `onComment` option, which will
  // cause Acorn to call that function with `(block, text, start,
  // end)` parameters whenever a comment is skipped. `block` is a
  // boolean indicating whether this is a block (`/* */`) comment,
  // `text` is the content of the comment, and `start` and `end` are
  // character offsets that denote the start and end of the comment.
  // When the `locations` option is on, two more parameters are
  // passed, the full `{line, column}` locations of the start and
  // end of the comments. Note that you are not allowed to call the
  // parser from the callback—that will corrupt its internal state.
  onComment: null,
  // Nodes have their start and end characters offsets recorded in
  // `start` and `end` properties (directly on the node, rather than
  // the `loc` object, which holds line/column data. To also add a
  // [semi-standardized][range] `range` property holding a `[start,
  // end]` array with the same numbers, set the `ranges` option to
  // `true`.
  //
  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
  ranges: false,
  // It is possible to parse multiple files into a single AST by
  // passing the tree produced by parsing the first file as
  // `program` option in subsequent parses. This will add the
  // toplevel forms of the parsed file to the `Program` (top) node
  // of an existing parse tree.
  program: null,
  // When `locations` is on, you can pass this to record the source
  // file in every node's `loc` object.
  sourceFile: null,
  // This value, if given, is stored in every node, whether
  // `locations` is on or off.
  directSourceFile: null,
  // When enabled, parenthesized expressions are represented by
  // (non-standard) ParenthesizedExpression nodes
  preserveParens: false };
// Interpret and default an options object

function getOptions(opts) {
  var options = {};

  for (var opt in defaultOptions) {
    options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt];
  }

  if (options.ecmaVersion >= 2015) {
    options.ecmaVersion -= 2009;
  }

  if (options.allowReserved == null) {
    options.allowReserved = options.ecmaVersion < 5;
  }

  if (isArray(options.onToken)) {
    var tokens = options.onToken;

    options.onToken = function (token) {
      return tokens.push(token);
    };
  }

  if (isArray(options.onComment)) {
    options.onComment = pushComment(options, options.onComment);
  }

  return options;
}

function pushComment(options, array) {
  return function (block, text, start, end, startLoc, endLoc) {
    var comment = {
      type: block ? "Block" : "Line",
      value: text,
      start: start,
      end: end };


    if (options.locations) {
      comment.loc = new SourceLocation(this, startLoc, endLoc);
    }

    if (options.ranges) {
      comment.range = [start, end];
    }

    array.push(comment);
  };
} // Each scope gets a bitset that may contain these flags


var SCOPE_TOP = 1,
SCOPE_FUNCTION = 2,
SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION,
SCOPE_ASYNC = 4,
SCOPE_GENERATOR = 8,
SCOPE_ARROW = 16,
SCOPE_SIMPLE_CATCH = 32,
SCOPE_SUPER = 64,
SCOPE_DIRECT_SUPER = 128;

function functionFlags(async, generator) {
  return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);
} // Used in checkLVal and declareName to determine the type of a binding


var BIND_NONE = 0,
// Not a binding
BIND_VAR = 1,
// Var-style binding
BIND_LEXICAL = 2,
// Let- or const-style binding
BIND_FUNCTION = 3,
// Function declaration
BIND_SIMPLE_CATCH = 4,
// Simple (identifier pattern) catch binding
BIND_OUTSIDE = 5; // Special case for function names as bound inside the function

var Parser = function Parser(options, input, startPos) {
  this.options = options = getOptions(options);
  this.sourceFile = options.sourceFile;
  this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
  var reserved = "";

  if (options.allowReserved !== true) {
    for (var v = options.ecmaVersion;; v--) {
      if (reserved = reservedWords[v]) {
        break;
      }
    }

    if (options.sourceType === "module") {
      reserved += " await";
    }
  }

  this.reservedWords = wordsRegexp(reserved);
  var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
  this.reservedWordsStrict = wordsRegexp(reservedStrict);
  this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);
  this.input = String(input); // Used to signal to callers of `readWord1` whether the word
  // contained any escape sequences. This is needed because words with
  // escape sequences must not be interpreted as keywords.

  this.containsEsc = false; // Set up token state
  // The current position of the tokenizer in the input.

  if (startPos) {
    this.pos = startPos;
    this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
  } else {
    this.pos = this.lineStart = 0;
    this.curLine = 1;
  } // Properties of the current token:
  // Its type


  this.type = types.eof; // For tokens that include more information than their type, the value

  this.value = null; // Its start and end offset

  this.start = this.end = this.pos; // And, if locations are used, the {line, column} object
  // corresponding to those offsets

  this.startLoc = this.endLoc = this.curPosition(); // Position information for the previous token

  this.lastTokEndLoc = this.lastTokStartLoc = null;
  this.lastTokStart = this.lastTokEnd = this.pos; // The context stack is used to superficially track syntactic
  // context to predict whether a regular expression is allowed in a
  // given position.

  this.context = this.initialContext();
  this.exprAllowed = true; // Figure out if it's a module code.

  this.inModule = options.sourceType === "module";
  this.strict = this.inModule || this.strictDirective(this.pos); // Used to signify the start of a potential arrow function

  this.potentialArrowAt = -1; // Positions to delayed-check that yield/await does not exist in default parameters.

  this.yieldPos = this.awaitPos = this.awaitIdentPos = 0; // Labels in scope.

  this.labels = []; // Thus-far undefined exports.

  this.undefinedExports = {}; // If enabled, skip leading hashbang line.

  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") {
    this.skipLineComment(2);
  } // Scope tracking for duplicate variable names (see scope.js)


  this.scopeStack = [];
  this.enterScope(SCOPE_TOP); // For RegExp validation

  this.regexpState = null;
};

var prototypeAccessors = {
  inFunction: {
    configurable: true },

  inGenerator: {
    configurable: true },

  inAsync: {
    configurable: true },

  allowSuper: {
    configurable: true },

  allowDirectSuper: {
    configurable: true },

  treatFunctionsAsVar: {
    configurable: true } };



Parser.prototype.parse = function parse() {
  var node = this.options.program || this.startNode();
  this.nextToken();
  return this.parseTopLevel(node);
};

prototypeAccessors.inFunction.get = function () {
  return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;
};

prototypeAccessors.inGenerator.get = function () {
  return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0;
};

prototypeAccessors.inAsync.get = function () {
  return (this.currentVarScope().flags & SCOPE_ASYNC) > 0;
};

prototypeAccessors.allowSuper.get = function () {
  return (this.currentThisScope().flags & SCOPE_SUPER) > 0;
};

prototypeAccessors.allowDirectSuper.get = function () {
  return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;
};

prototypeAccessors.treatFunctionsAsVar.get = function () {
  return this.treatFunctionsAsVarInScope(this.currentScope());
}; // Switch to a getter for 7.0.0.


Parser.prototype.inNonArrowFunction = function inNonArrowFunction() {
  return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;
};

Parser.extend = function extend() {
  var plugins = [],
  len = arguments.length;

  while (len--) plugins[len] = arguments[len];

  var cls = this;

  for (var i = 0; i < plugins.length; i++) {
    cls = plugins[i](cls);
  }

  return cls;
};

Parser.parse = function parse(input, options) {
  return new this(options, input).parse();
};

Parser.parseExpressionAt = function parseExpressionAt(input, pos, options) {
  var parser = new this(options, input, pos);
  parser.nextToken();
  return parser.parseExpression();
};

Parser.tokenizer = function tokenizer(input, options) {
  return new this(options, input);
};

Object.defineProperties(Parser.prototype, prototypeAccessors);
var pp = Parser.prototype; // ## Parser utilities

var literal = /^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)")/;

pp.strictDirective = function (start) {
  for (;;) {
    // Try to find string literal.
    skipWhiteSpace.lastIndex = start;
    start += skipWhiteSpace.exec(this.input)[0].length;
    var match = literal.exec(this.input.slice(start));

    if (!match) {
      return false;
    }

    if ((match[1] || match[2]) === "use strict") {
      skipWhiteSpace.lastIndex = start + match[0].length;
      var spaceAfter = skipWhiteSpace.exec(this.input),
      end = spaceAfter.index + spaceAfter[0].length;
      var next = this.input.charAt(end);
      return next === ";" || next === "}" || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || next === "!" && this.input.charAt(end + 1) === "=");
    }

    start += match[0].length; // Skip semicolon, if any.

    skipWhiteSpace.lastIndex = start;
    start += skipWhiteSpace.exec(this.input)[0].length;

    if (this.input[start] === ";") {
      start++;
    }
  }
}; // Predicate that tests whether the next token is of the given
// type, and if yes, consumes it as a side effect.


pp.eat = function (type) {
  if (this.type === type) {
    this.next();
    return true;
  } else {
    return false;
  }
}; // Tests whether parsed token is a contextual keyword.


pp.isContextual = function (name) {
  return this.type === types.name && this.value === name && !this.containsEsc;
}; // Consumes contextual keyword if possible.


pp.eatContextual = function (name) {
  if (!this.isContextual(name)) {
    return false;
  }

  this.next();
  return true;
}; // Asserts that following token is given contextual keyword.


pp.expectContextual = function (name) {
  if (!this.eatContextual(name)) {
    this.unexpected();
  }
}; // Test whether a semicolon can be inserted at the current position.


pp.canInsertSemicolon = function () {
  return this.type === types.eof || this.type === types.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
};

pp.insertSemicolon = function () {
  if (this.canInsertSemicolon()) {
    if (this.options.onInsertedSemicolon) {
      this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
    }

    return true;
  }
}; // Consume a semicolon, or, failing that, see if we are allowed to
// pretend that there is a semicolon at this position.


pp.semicolon = function () {
  if (!this.eat(types.semi) && !this.insertSemicolon()) {
    this.unexpected();
  }
};

pp.afterTrailingComma = function (tokType, notNext) {
  if (this.type === tokType) {
    if (this.options.onTrailingComma) {
      this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
    }

    if (!notNext) {
      this.next();
    }

    return true;
  }
}; // Expect a token of a given type. If found, consume it, otherwise,
// raise an unexpected token error.


pp.expect = function (type) {
  this.eat(type) || this.unexpected();
}; // Raise an unexpected token error.


pp.unexpected = function (pos) {
  this.raise(pos != null ? pos : this.start, "Unexpected token");
};

function DestructuringErrors() {
  this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
}

pp.checkPatternErrors = function (refDestructuringErrors, isAssign) {
  if (!refDestructuringErrors) {
    return;
  }

  if (refDestructuringErrors.trailingComma > -1) {
    this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
  }

  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;

  if (parens > -1) {
    this.raiseRecoverable(parens, "Parenthesized pattern");
  }
};

pp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {
  if (!refDestructuringErrors) {
    return false;
  }

  var shorthandAssign = refDestructuringErrors.shorthandAssign;
  var doubleProto = refDestructuringErrors.doubleProto;

  if (!andThrow) {
    return shorthandAssign >= 0 || doubleProto >= 0;
  }

  if (shorthandAssign >= 0) {
    this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns");
  }

  if (doubleProto >= 0) {
    this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
  }
};

pp.checkYieldAwaitInDefaultParams = function () {
  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
    this.raise(this.yieldPos, "Yield expression cannot be a default value");
  }

  if (this.awaitPos) {
    this.raise(this.awaitPos, "Await expression cannot be a default value");
  }
};

pp.isSimpleAssignTarget = function (expr) {
  if (expr.type === "ParenthesizedExpression") {
    return this.isSimpleAssignTarget(expr.expression);
  }

  return expr.type === "Identifier" || expr.type === "MemberExpression";
};

var pp$1 = Parser.prototype; // ### Statement parsing
// Parse a program. Initializes the parser, reads any number of
// statements, and wraps them in a Program node.  Optionally takes a
// `program` argument.  If present, the statements will be appended
// to its body instead of creating a new node.

pp$1.parseTopLevel = function (node) {
  var exports = {};

  if (!node.body) {
    node.body = [];
  }

  while (this.type !== types.eof) {
    var stmt = this.parseStatement(null, true, exports);
    node.body.push(stmt);
  }

  if (this.inModule) {
    for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1) {
      var name = list[i];
      this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
    }
  }

  this.adaptDirectivePrologue(node.body);
  this.next();
  node.sourceType = this.options.sourceType;
  return this.finishNode(node, "Program");
};

var loopLabel = {
  kind: "loop" },

switchLabel = {
  kind: "switch" };


pp$1.isLet = function (context) {
  if (this.options.ecmaVersion < 6 || !this.isContextual("let")) {
    return false;
  }

  skipWhiteSpace.lastIndex = this.pos;
  var skip = skipWhiteSpace.exec(this.input);
  var next = this.pos + skip[0].length,
  nextCh = this.input.charCodeAt(next); // For ambiguous cases, determine if a LexicalDeclaration (or only a
  // Statement) is allowed here. If context is not empty then only a Statement
  // is allowed. However, `let [` is an explicit negative lookahead for
  // ExpressionStatement, so special-case it first.

  if (nextCh === 91) {
    return true;
  } // '['


  if (context) {
    return false;
  }

  if (nextCh === 123) {
    return true;
  } // '{'


  if (isIdentifierStart(nextCh, true)) {
    var pos = next + 1;

    while (isIdentifierChar(this.input.charCodeAt(pos), true)) {
      ++pos;
    }

    var ident = this.input.slice(next, pos);

    if (!keywordRelationalOperator.test(ident)) {
      return true;
    }
  }

  return false;
}; // check 'async [no LineTerminator here] function'
// - 'async /*foo*/ function' is OK.
// - 'async /*\n*/ function' is invalid.


pp$1.isAsyncFunction = function () {
  if (this.options.ecmaVersion < 8 || !this.isContextual("async")) {
    return false;
  }

  skipWhiteSpace.lastIndex = this.pos;
  var skip = skipWhiteSpace.exec(this.input);
  var next = this.pos + skip[0].length;
  return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)));
}; // Parse a single statement.
//
// If expecting a statement and finding a slash operator, parse a
// regular expression literal. This is to handle cases like
// `if (foo) /blah/.exec(foo)`, where looking at the previous token
// does not help.


pp$1.parseStatement = function (context, topLevel, exports) {
  var starttype = this.type,
  node = this.startNode(),
  kind;

  if (this.isLet(context)) {
    starttype = types._var;
    kind = "let";
  } // Most types of statements are recognized by the keyword they
  // start with. Many are trivial to parse, some require a bit of
  // complexity.


  switch (starttype) {
    case types._break:
    case types._continue:
      return this.parseBreakContinueStatement(node, starttype.keyword);

    case types._debugger:
      return this.parseDebuggerStatement(node);

    case types._do:
      return this.parseDoStatement(node);

    case types._for:
      return this.parseForStatement(node);

    case types._function:
      // Function as sole body of either an if statement or a labeled statement
      // works, but not when it is part of a labeled statement that is the sole
      // body of an if statement.
      if (context && (this.strict || context !== "if" && context !== "label") && this.options.ecmaVersion >= 6) {
        this.unexpected();
      }

      return this.parseFunctionStatement(node, false, !context);

    case types._class:
      if (context) {
        this.unexpected();
      }

      return this.parseClass(node, true);

    case types._if:
      return this.parseIfStatement(node);

    case types._return:
      return this.parseReturnStatement(node);

    case types._switch:
      return this.parseSwitchStatement(node);

    case types._throw:
      return this.parseThrowStatement(node);

    case types._try:
      return this.parseTryStatement(node);

    case types._const:
    case types._var:
      kind = kind || this.value;

      if (context && kind !== "var") {
        this.unexpected();
      }

      return this.parseVarStatement(node, kind);

    case types._while:
      return this.parseWhileStatement(node);

    case types._with:
      return this.parseWithStatement(node);

    case types.braceL:
      return this.parseBlock(true, node);

    case types.semi:
      return this.parseEmptyStatement(node);

    case types._export:
    case types._import:
      if (this.options.ecmaVersion > 10 && starttype === types._import) {
        skipWhiteSpace.lastIndex = this.pos;
        var skip = skipWhiteSpace.exec(this.input);
        var next = this.pos + skip[0].length,
        nextCh = this.input.charCodeAt(next);

        if (nextCh === 40 || nextCh === 46) // '(' or '.'
          {
            return this.parseExpressionStatement(node, this.parseExpression());
          }
      }

      if (!this.options.allowImportExportEverywhere) {
        if (!topLevel) {
          this.raise(this.start, "'import' and 'export' may only appear at the top level");
        }

        if (!this.inModule) {
          this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
        }
      }

      return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports);
    // If the statement does not start with a statement keyword or a
    // brace, it's an ExpressionStatement or LabeledStatement. We
    // simply start parsing an expression, and afterwards, if the
    // next token is a colon and the expression was a simple
    // Identifier node, we switch to interpreting it as a label.

    default:
      if (this.isAsyncFunction()) {
        if (context) {
          this.unexpected();
        }

        this.next();
        return this.parseFunctionStatement(node, true, !context);
      }

      var maybeName = this.value,
      expr = this.parseExpression();

      if (starttype === types.name && expr.type === "Identifier" && this.eat(types.colon)) {
        return this.parseLabeledStatement(node, maybeName, expr, context);
      } else {
        return this.parseExpressionStatement(node, expr);
      }}


};

pp$1.parseBreakContinueStatement = function (node, keyword) {
  var isBreak = keyword === "break";
  this.next();

  if (this.eat(types.semi) || this.insertSemicolon()) {
    node.label = null;
  } else if (this.type !== types.name) {
    this.unexpected();
  } else {
    node.label = this.parseIdent();
    this.semicolon();
  } // Verify that there is an actual destination to break or
  // continue to.


  var i = 0;

  for (; i < this.labels.length; ++i) {
    var lab = this.labels[i];

    if (node.label == null || lab.name === node.label.name) {
      if (lab.kind != null && (isBreak || lab.kind === "loop")) {
        break;
      }

      if (node.label && isBreak) {
        break;
      }
    }
  }

  if (i === this.labels.length) {
    this.raise(node.start, "Unsyntactic " + keyword);
  }

  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
};

pp$1.parseDebuggerStatement = function (node) {
  this.next();
  this.semicolon();
  return this.finishNode(node, "DebuggerStatement");
};

pp$1.parseDoStatement = function (node) {
  this.next();
  this.labels.push(loopLabel);
  node.body = this.parseStatement("do");
  this.labels.pop();
  this.expect(types._while);
  node.test = this.parseParenExpression();

  if (this.options.ecmaVersion >= 6) {
    this.eat(types.semi);
  } else {
    this.semicolon();
  }

  return this.finishNode(node, "DoWhileStatement");
}; // Disambiguating between a `for` and a `for`/`in` or `for`/`of`
// loop is non-trivial. Basically, we have to parse the init `var`
// statement or expression, disallowing the `in` operator (see
// the second parameter to `parseExpression`), and then check
// whether the next token is `in` or `of`. When there is no init
// part (semicolon immediately after the opening parenthesis), it
// is a regular `for` loop.


pp$1.parseForStatement = function (node) {
  this.next();
  var awaitAt = this.options.ecmaVersion >= 9 && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual("await") ? this.lastTokStart : -1;
  this.labels.push(loopLabel);
  this.enterScope(0);
  this.expect(types.parenL);

  if (this.type === types.semi) {
    if (awaitAt > -1) {
      this.unexpected(awaitAt);
    }

    return this.parseFor(node, null);
  }

  var isLet = this.isLet();

  if (this.type === types._var || this.type === types._const || isLet) {
    var init$1 = this.startNode(),
    kind = isLet ? "let" : this.value;
    this.next();
    this.parseVar(init$1, true, kind);
    this.finishNode(init$1, "VariableDeclaration");

    if ((this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1) {
      if (this.options.ecmaVersion >= 9) {
        if (this.type === types._in) {
          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }
        } else {
          node.await = awaitAt > -1;
        }
      }

      return this.parseForIn(node, init$1);
    }

    if (awaitAt > -1) {
      this.unexpected(awaitAt);
    }

    return this.parseFor(node, init$1);
  }

  var refDestructuringErrors = new DestructuringErrors();
  var init = this.parseExpression(true, refDestructuringErrors);

  if (this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) {
    if (this.options.ecmaVersion >= 9) {
      if (this.type === types._in) {
        if (awaitAt > -1) {
          this.unexpected(awaitAt);
        }
      } else {
        node.await = awaitAt > -1;
      }
    }

    this.toAssignable(init, false, refDestructuringErrors);
    this.checkLVal(init);
    return this.parseForIn(node, init);
  } else {
    this.checkExpressionErrors(refDestructuringErrors, true);
  }

  if (awaitAt > -1) {
    this.unexpected(awaitAt);
  }

  return this.parseFor(node, init);
};

pp$1.parseFunctionStatement = function (node, isAsync, declarationPosition) {
  this.next();
  return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
};

pp$1.parseIfStatement = function (node) {
  this.next();
  node.test = this.parseParenExpression(); // allow function declarations in branches, but only in non-strict mode

  node.consequent = this.parseStatement("if");
  node.alternate = this.eat(types._else) ? this.parseStatement("if") : null;
  return this.finishNode(node, "IfStatement");
};

pp$1.parseReturnStatement = function (node) {
  if (!this.inFunction && !this.options.allowReturnOutsideFunction) {
    this.raise(this.start, "'return' outside of function");
  }

  this.next(); // In `return` (and `break`/`continue`), the keywords with
  // optional arguments, we eagerly look for a semicolon or the
  // possibility to insert one.

  if (this.eat(types.semi) || this.insertSemicolon()) {
    node.argument = null;
  } else {
    node.argument = this.parseExpression();
    this.semicolon();
  }

  return this.finishNode(node, "ReturnStatement");
};

pp$1.parseSwitchStatement = function (node) {
  this.next();
  node.discriminant = this.parseParenExpression();
  node.cases = [];
  this.expect(types.braceL);
  this.labels.push(switchLabel);
  this.enterScope(0); // Statements under must be grouped (by label) in SwitchCase
  // nodes. `cur` is used to keep the node that we are currently
  // adding statements to.

  var cur;

  for (var sawDefault = false; this.type !== types.braceR;) {
    if (this.type === types._case || this.type === types._default) {
      var isCase = this.type === types._case;

      if (cur) {
        this.finishNode(cur, "SwitchCase");
      }

      node.cases.push(cur = this.startNode());
      cur.consequent = [];
      this.next();

      if (isCase) {
        cur.test = this.parseExpression();
      } else {
        if (sawDefault) {
          this.raiseRecoverable(this.lastTokStart, "Multiple default clauses");
        }

        sawDefault = true;
        cur.test = null;
      }

      this.expect(types.colon);
    } else {
      if (!cur) {
        this.unexpected();
      }

      cur.consequent.push(this.parseStatement(null));
    }
  }

  this.exitScope();

  if (cur) {
    this.finishNode(cur, "SwitchCase");
  }

  this.next(); // Closing brace

  this.labels.pop();
  return this.finishNode(node, "SwitchStatement");
};

pp$1.parseThrowStatement = function (node) {
  this.next();

  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {
    this.raise(this.lastTokEnd, "Illegal newline after throw");
  }

  node.argument = this.parseExpression();
  this.semicolon();
  return this.finishNode(node, "ThrowStatement");
}; // Reused empty array added for node fields that are always empty.


var empty = [];

pp$1.parseTryStatement = function (node) {
  this.next();
  node.block = this.parseBlock();
  node.handler = null;

  if (this.type === types._catch) {
    var clause = this.startNode();
    this.next();

    if (this.eat(types.parenL)) {
      clause.param = this.parseBindingAtom();
      var simple = clause.param.type === "Identifier";
      this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
      this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
      this.expect(types.parenR);
    } else {
      if (this.options.ecmaVersion < 10) {
        this.unexpected();
      }

      clause.param = null;
      this.enterScope(0);
    }

    clause.body = this.parseBlock(false);
    this.exitScope();
    node.handler = this.finishNode(clause, "CatchClause");
  }

  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;

  if (!node.handler && !node.finalizer) {
    this.raise(node.start, "Missing catch or finally clause");
  }

  return this.finishNode(node, "TryStatement");
};

pp$1.parseVarStatement = function (node, kind) {
  this.next();
  this.parseVar(node, false, kind);
  this.semicolon();
  return this.finishNode(node, "VariableDeclaration");
};

pp$1.parseWhileStatement = function (node) {
  this.next();
  node.test = this.parseParenExpression();
  this.labels.push(loopLabel);
  node.body = this.parseStatement("while");
  this.labels.pop();
  return this.finishNode(node, "WhileStatement");
};

pp$1.parseWithStatement = function (node) {
  if (this.strict) {
    this.raise(this.start, "'with' in strict mode");
  }

  this.next();
  node.object = this.parseParenExpression();
  node.body = this.parseStatement("with");
  return this.finishNode(node, "WithStatement");
};

pp$1.parseEmptyStatement = function (node) {
  this.next();
  return this.finishNode(node, "EmptyStatement");
};

pp$1.parseLabeledStatement = function (node, maybeName, expr, context) {
  for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1) {
    var label = list[i$1];

    if (label.name === maybeName) {
      this.raise(expr.start, "Label '" + maybeName + "' is already declared");
    }
  }

  var kind = this.type.isLoop ? "loop" : this.type === types._switch ? "switch" : null;

  for (var i = this.labels.length - 1; i >= 0; i--) {
    var label$1 = this.labels[i];

    if (label$1.statementStart === node.start) {
      // Update information about previous labels on this node
      label$1.statementStart = this.start;
      label$1.kind = kind;
    } else {
      break;
    }
  }

  this.labels.push({
    name: maybeName,
    kind: kind,
    statementStart: this.start });

  node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
  this.labels.pop();
  node.label = expr;
  return this.finishNode(node, "LabeledStatement");
};

pp$1.parseExpressionStatement = function (node, expr) {
  node.expression = expr;
  this.semicolon();
  return this.finishNode(node, "ExpressionStatement");
}; // Parse a semicolon-enclosed block of statements, handling `"use
// strict"` declarations when `allowStrict` is true (used for
// function bodies).


pp$1.parseBlock = function (createNewLexicalScope, node, exitStrict) {
  if (createNewLexicalScope === void 0) createNewLexicalScope = true;
  if (node === void 0) node = this.startNode();
  node.body = [];
  this.expect(types.braceL);

  if (createNewLexicalScope) {
    this.enterScope(0);
  }

  while (this.type !== types.braceR) {
    var stmt = this.parseStatement(null);
    node.body.push(stmt);
  }

  if (exitStrict) {
    this.strict = false;
  }

  this.next();

  if (createNewLexicalScope) {
    this.exitScope();
  }

  return this.finishNode(node, "BlockStatement");
}; // Parse a regular `for` loop. The disambiguation code in
// `parseStatement` will already have parsed the init statement or
// expression.


pp$1.parseFor = function (node, init) {
  node.init = init;
  this.expect(types.semi);
  node.test = this.type === types.semi ? null : this.parseExpression();
  this.expect(types.semi);
  node.update = this.type === types.parenR ? null : this.parseExpression();
  this.expect(types.parenR);
  node.body = this.parseStatement("for");
  this.exitScope();
  this.labels.pop();
  return this.finishNode(node, "ForStatement");
}; // Parse a `for`/`in` and `for`/`of` loop, which are almost
// same from parser's perspective.


pp$1.parseForIn = function (node, init) {
  var isForIn = this.type === types._in;
  this.next();

  if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
    this.raise(init.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer");
  } else if (init.type === "AssignmentPattern") {
    this.raise(init.start, "Invalid left-hand side in for-loop");
  }

  node.left = init;
  node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
  this.expect(types.parenR);
  node.body = this.parseStatement("for");
  this.exitScope();
  this.labels.pop();
  return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
}; // Parse a list of variable declarations.


pp$1.parseVar = function (node, isFor, kind) {
  node.declarations = [];
  node.kind = kind;

  for (;;) {
    var decl = this.startNode();
    this.parseVarId(decl, kind);

    if (this.eat(types.eq)) {
      decl.init = this.parseMaybeAssign(isFor);
    } else if (kind === "const" && !(this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
      this.unexpected();
    } else if (decl.id.type !== "Identifier" && !(isFor && (this.type === types._in || this.isContextual("of")))) {
      this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
    } else {
      decl.init = null;
    }

    node.declarations.push(this.finishNode(decl, "VariableDeclarator"));

    if (!this.eat(types.comma)) {
      break;
    }
  }

  return node;
};

pp$1.parseVarId = function (decl, kind) {
  decl.id = this.parseBindingAtom();
  this.checkLVal(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
};

var FUNC_STATEMENT = 1,
FUNC_HANGING_STATEMENT = 2,
FUNC_NULLABLE_ID = 4; // Parse a function declaration or literal (depending on the
// `statement & FUNC_STATEMENT`).
// Remove `allowExpressionBody` for 7.0.0, as it is only called with false

pp$1.parseFunction = function (node, statement, allowExpressionBody, isAsync) {
  this.initFunction(node);

  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
    if (this.type === types.star && statement & FUNC_HANGING_STATEMENT) {
      this.unexpected();
    }

    node.generator = this.eat(types.star);
  }

  if (this.options.ecmaVersion >= 8) {
    node.async = !!isAsync;
  }

  if (statement & FUNC_STATEMENT) {
    node.id = statement & FUNC_NULLABLE_ID && this.type !== types.name ? null : this.parseIdent();

    if (node.id && !(statement & FUNC_HANGING_STATEMENT)) // If it is a regular function declaration in sloppy mode, then it is
      // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding
      // mode depends on properties of the current scope (see
      // treatFunctionsAsVar).
      {
        this.checkLVal(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION);
      }
  }

  var oldYieldPos = this.yieldPos,
  oldAwaitPos = this.awaitPos,
  oldAwaitIdentPos = this.awaitIdentPos;
  this.yieldPos = 0;
  this.awaitPos = 0;
  this.awaitIdentPos = 0;
  this.enterScope(functionFlags(node.async, node.generator));

  if (!(statement & FUNC_STATEMENT)) {
    node.id = this.type === types.name ? this.parseIdent() : null;
  }

  this.parseFunctionParams(node);
  this.parseFunctionBody(node, allowExpressionBody, false);
  this.yieldPos = oldYieldPos;
  this.awaitPos = oldAwaitPos;
  this.awaitIdentPos = oldAwaitIdentPos;
  return this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
};

pp$1.parseFunctionParams = function (node) {
  this.expect(types.parenL);
  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
  this.checkYieldAwaitInDefaultParams();
}; // Parse a class declaration or literal (depending on the
// `isStatement` parameter).


pp$1.parseClass = function (node, isStatement) {
  this.next(); // ecma-262 14.6 Class Definitions
  // A class definition is always strict mode code.

  var oldStrict = this.strict;
  this.strict = true;
  this.parseClassId(node, isStatement);
  this.parseClassSuper(node);
  var classBody = this.startNode();
  var hadConstructor = false;
  classBody.body = [];
  this.expect(types.braceL);

  while (this.type !== types.braceR) {
    var element = this.parseClassElement(node.superClass !== null);

    if (element) {
      classBody.body.push(element);

      if (element.type === "MethodDefinition" && element.kind === "constructor") {
        if (hadConstructor) {
          this.raise(element.start, "Duplicate constructor in the same class");
        }

        hadConstructor = true;
      }
    }
  }

  this.strict = oldStrict;
  this.next();
  node.body = this.finishNode(classBody, "ClassBody");
  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
};

pp$1.parseClassElement = function (constructorAllowsSuper) {
  var this$1 = this;

  if (this.eat(types.semi)) {
    return null;
  }

  var method = this.startNode();

  var tryContextual = function tryContextual(k, noLineBreak) {
    if (noLineBreak === void 0) noLineBreak = false;
    var start = this$1.start,
    startLoc = this$1.startLoc;

    if (!this$1.eatContextual(k)) {
      return false;
    }

    if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) {
      return true;
    }

    if (method.key) {
      this$1.unexpected();
    }

    method.computed = false;
    method.key = this$1.startNodeAt(start, startLoc);
    method.key.name = k;
    this$1.finishNode(method.key, "Identifier");
    return false;
  };

  method.kind = "method";
  method.static = tryContextual("static");
  var isGenerator = this.eat(types.star);
  var isAsync = false;

  if (!isGenerator) {
    if (this.options.ecmaVersion >= 8 && tryContextual("async", true)) {
      isAsync = true;
      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
    } else if (tryContextual("get")) {
      method.kind = "get";
    } else if (tryContextual("set")) {
      method.kind = "set";
    }
  }

  if (!method.key) {
    this.parsePropertyName(method);
  }

  var key = method.key;
  var allowsDirectSuper = false;

  if (!method.computed && !method.static && (key.type === "Identifier" && key.name === "constructor" || key.type === "Literal" && key.value === "constructor")) {
    if (method.kind !== "method") {
      this.raise(key.start, "Constructor can't have get/set modifier");
    }

    if (isGenerator) {
      this.raise(key.start, "Constructor can't be a generator");
    }

    if (isAsync) {
      this.raise(key.start, "Constructor can't be an async method");
    }

    method.kind = "constructor";
    allowsDirectSuper = constructorAllowsSuper;
  } else if (method.static && key.type === "Identifier" && key.name === "prototype") {
    this.raise(key.start, "Classes may not have a static property named prototype");
  }

  this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);

  if (method.kind === "get" && method.value.params.length !== 0) {
    this.raiseRecoverable(method.value.start, "getter should have no params");
  }

  if (method.kind === "set" && method.value.params.length !== 1) {
    this.raiseRecoverable(method.value.start, "setter should have exactly one param");
  }

  if (method.kind === "set" && method.value.params[0].type === "RestElement") {
    this.raiseRecoverable(method.value.params[0].start, "Setter cannot use rest params");
  }

  return method;
};

pp$1.parseClassMethod = function (method, isGenerator, isAsync, allowsDirectSuper) {
  method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
  return this.finishNode(method, "MethodDefinition");
};

pp$1.parseClassId = function (node, isStatement) {
  if (this.type === types.name) {
    node.id = this.parseIdent();

    if (isStatement) {
      this.checkLVal(node.id, BIND_LEXICAL, false);
    }
  } else {
    if (isStatement === true) {
      this.unexpected();
    }

    node.id = null;
  }
};

pp$1.parseClassSuper = function (node) {
  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;
}; // Parses module export declaration.


pp$1.parseExport = function (node, exports) {
  this.next(); // export * from '...'

  if (this.eat(types.star)) {
    if (this.options.ecmaVersion >= 11) {
      if (this.eatContextual("as")) {
        node.exported = this.parseIdent(true);
        this.checkExport(exports, node.exported.name, this.lastTokStart);
      } else {
        node.exported = null;
      }
    }

    this.expectContextual("from");

    if (this.type !== types.string) {
      this.unexpected();
    }

    node.source = this.parseExprAtom();
    this.semicolon();
    return this.finishNode(node, "ExportAllDeclaration");
  }

  if (this.eat(types._default)) {
    // export default ...
    this.checkExport(exports, "default", this.lastTokStart);
    var isAsync;

    if (this.type === types._function || (isAsync = this.isAsyncFunction())) {
      var fNode = this.startNode();
      this.next();

      if (isAsync) {
        this.next();
      }

      node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
    } else if (this.type === types._class) {
      var cNode = this.startNode();
      node.declaration = this.parseClass(cNode, "nullableID");
    } else {
      node.declaration = this.parseMaybeAssign();
      this.semicolon();
    }

    return this.finishNode(node, "ExportDefaultDeclaration");
  } // export var|const|let|function|class ...


  if (this.shouldParseExportStatement()) {
    node.declaration = this.parseStatement(null);

    if (node.declaration.type === "VariableDeclaration") {
      this.checkVariableExport(exports, node.declaration.declarations);
    } else {
      this.checkExport(exports, node.declaration.id.name, node.declaration.id.start);
    }

    node.specifiers = [];
    node.source = null;
  } else {
    // export { x, y as z } [from '...']
    node.declaration = null;
    node.specifiers = this.parseExportSpecifiers(exports);

    if (this.eatContextual("from")) {
      if (this.type !== types.string) {
        this.unexpected();
      }

      node.source = this.parseExprAtom();
    } else {
      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
        // check for keywords used as local names
        var spec = list[i];
        this.checkUnreserved(spec.local); // check if export is defined

        this.checkLocalExport(spec.local);
      }

      node.source = null;
    }

    this.semicolon();
  }

  return this.finishNode(node, "ExportNamedDeclaration");
};

pp$1.checkExport = function (exports, name, pos) {
  if (!exports) {
    return;
  }

  if (has(exports, name)) {
    this.raiseRecoverable(pos, "Duplicate export '" + name + "'");
  }

  exports[name] = true;
};

pp$1.checkPatternExport = function (exports, pat) {
  var type = pat.type;

  if (type === "Identifier") {
    this.checkExport(exports, pat.name, pat.start);
  } else if (type === "ObjectPattern") {
    for (var i = 0, list = pat.properties; i < list.length; i += 1) {
      var prop = list[i];
      this.checkPatternExport(exports, prop);
    }
  } else if (type === "ArrayPattern") {
    for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
      var elt = list$1[i$1];

      if (elt) {
        this.checkPatternExport(exports, elt);
      }
    }
  } else if (type === "Property") {
    this.checkPatternExport(exports, pat.value);
  } else if (type === "AssignmentPattern") {
    this.checkPatternExport(exports, pat.left);
  } else if (type === "RestElement") {
    this.checkPatternExport(exports, pat.argument);
  } else if (type === "ParenthesizedExpression") {
    this.checkPatternExport(exports, pat.expression);
  }
};

pp$1.checkVariableExport = function (exports, decls) {
  if (!exports) {
    return;
  }

  for (var i = 0, list = decls; i < list.length; i += 1) {
    var decl = list[i];
    this.checkPatternExport(exports, decl.id);
  }
};

pp$1.shouldParseExportStatement = function () {
  return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
}; // Parses a comma-separated list of module exports.


pp$1.parseExportSpecifiers = function (exports) {
  var nodes = [],
  first = true; // export { x, y as z } [from '...']

  this.expect(types.braceL);

  while (!this.eat(types.braceR)) {
    if (!first) {
      this.expect(types.comma);

      if (this.afterTrailingComma(types.braceR)) {
        break;
      }
    } else {
      first = false;
    }

    var node = this.startNode();
    node.local = this.parseIdent(true);
    node.exported = this.eatContextual("as") ? this.parseIdent(true) : node.local;
    this.checkExport(exports, node.exported.name, node.exported.start);
    nodes.push(this.finishNode(node, "ExportSpecifier"));
  }

  return nodes;
}; // Parses import declaration.


pp$1.parseImport = function (node) {
  this.next(); // import '...'

  if (this.type === types.string) {
    node.specifiers = empty;
    node.source = this.parseExprAtom();
  } else {
    node.specifiers = this.parseImportSpecifiers();
    this.expectContextual("from");
    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
  }

  this.semicolon();
  return this.finishNode(node, "ImportDeclaration");
}; // Parses a comma-separated list of module imports.


pp$1.parseImportSpecifiers = function () {
  var nodes = [],
  first = true;

  if (this.type === types.name) {
    // import defaultObj, { x, y as z } from '...'
    var node = this.startNode();
    node.local = this.parseIdent();
    this.checkLVal(node.local, BIND_LEXICAL);
    nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));

    if (!this.eat(types.comma)) {
      return nodes;
    }
  }

  if (this.type === types.star) {
    var node$1 = this.startNode();
    this.next();
    this.expectContextual("as");
    node$1.local = this.parseIdent();
    this.checkLVal(node$1.local, BIND_LEXICAL);
    nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
    return nodes;
  }

  this.expect(types.braceL);

  while (!this.eat(types.braceR)) {
    if (!first) {
      this.expect(types.comma);

      if (this.afterTrailingComma(types.braceR)) {
        break;
      }
    } else {
      first = false;
    }

    var node$2 = this.startNode();
    node$2.imported = this.parseIdent(true);

    if (this.eatContextual("as")) {
      node$2.local = this.parseIdent();
    } else {
      this.checkUnreserved(node$2.imported);
      node$2.local = node$2.imported;
    }

    this.checkLVal(node$2.local, BIND_LEXICAL);
    nodes.push(this.finishNode(node$2, "ImportSpecifier"));
  }

  return nodes;
}; // Set `ExpressionStatement#directive` property for directive prologues.


pp$1.adaptDirectivePrologue = function (statements) {
  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
    statements[i].directive = statements[i].expression.raw.slice(1, -1);
  }
};

pp$1.isDirectiveCandidate = function (statement) {
  return statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value === "string" && ( // Reject parenthesized strings.
  this.input[statement.start] === "\"" || this.input[statement.start] === "'");
};

var pp$2 = Parser.prototype; // Convert existing expression atom to assignable pattern
// if possible.

pp$2.toAssignable = function (node, isBinding, refDestructuringErrors) {
  if (this.options.ecmaVersion >= 6 && node) {
    switch (node.type) {
      case "Identifier":
        if (this.inAsync && node.name === "await") {
          this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
        }

        break;

      case "ObjectPattern":
      case "ArrayPattern":
      case "RestElement":
        break;

      case "ObjectExpression":
        node.type = "ObjectPattern";

        if (refDestructuringErrors) {
          this.checkPatternErrors(refDestructuringErrors, true);
        }

        for (var i = 0, list = node.properties; i < list.length; i += 1) {
          var prop = list[i];
          this.toAssignable(prop, isBinding); // Early error:
          //   AssignmentRestProperty[Yield, Await] :
          //     `...` DestructuringAssignmentTarget[Yield, Await]
          //
          //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.

          if (prop.type === "RestElement" && (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")) {
            this.raise(prop.argument.start, "Unexpected token");
          }
        }

        break;

      case "Property":
        // AssignmentProperty has type === "Property"
        if (node.kind !== "init") {
          this.raise(node.key.start, "Object pattern can't contain getter or setter");
        }

        this.toAssignable(node.value, isBinding);
        break;

      case "ArrayExpression":
        node.type = "ArrayPattern";

        if (refDestructuringErrors) {
          this.checkPatternErrors(refDestructuringErrors, true);
        }

        this.toAssignableList(node.elements, isBinding);
        break;

      case "SpreadElement":
        node.type = "RestElement";
        this.toAssignable(node.argument, isBinding);

        if (node.argument.type === "AssignmentPattern") {
          this.raise(node.argument.start, "Rest elements cannot have a default value");
        }

        break;

      case "AssignmentExpression":
        if (node.operator !== "=") {
          this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
        }

        node.type = "AssignmentPattern";
        delete node.operator;
        this.toAssignable(node.left, isBinding);
      // falls through to AssignmentPattern

      case "AssignmentPattern":
        break;

      case "ParenthesizedExpression":
        this.toAssignable(node.expression, isBinding, refDestructuringErrors);
        break;

      case "ChainExpression":
        this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
        break;

      case "MemberExpression":
        if (!isBinding) {
          break;
        }

      default:
        this.raise(node.start, "Assigning to rvalue");}

  } else if (refDestructuringErrors) {
    this.checkPatternErrors(refDestructuringErrors, true);
  }

  return node;
}; // Convert list of expression atoms to binding list.


pp$2.toAssignableList = function (exprList, isBinding) {
  var end = exprList.length;

  for (var i = 0; i < end; i++) {
    var elt = exprList[i];

    if (elt) {
      this.toAssignable(elt, isBinding);
    }
  }

  if (end) {
    var last = exprList[end - 1];

    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") {
      this.unexpected(last.argument.start);
    }
  }

  return exprList;
}; // Parses spread element.


pp$2.parseSpread = function (refDestructuringErrors) {
  var node = this.startNode();
  this.next();
  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
  return this.finishNode(node, "SpreadElement");
};

pp$2.parseRestBinding = function () {
  var node = this.startNode();
  this.next(); // RestElement inside of a function parameter must be an identifier

  if (this.options.ecmaVersion === 6 && this.type !== types.name) {
    this.unexpected();
  }

  node.argument = this.parseBindingAtom();
  return this.finishNode(node, "RestElement");
}; // Parses lvalue (assignable) atom.


pp$2.parseBindingAtom = function () {
  if (this.options.ecmaVersion >= 6) {
    switch (this.type) {
      case types.bracketL:
        var node = this.startNode();
        this.next();
        node.elements = this.parseBindingList(types.bracketR, true, true);
        return this.finishNode(node, "ArrayPattern");

      case types.braceL:
        return this.parseObj(true);}

  }

  return this.parseIdent();
};

pp$2.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
  var elts = [],
  first = true;

  while (!this.eat(close)) {
    if (first) {
      first = false;
    } else {
      this.expect(types.comma);
    }

    if (allowEmpty && this.type === types.comma) {
      elts.push(null);
    } else if (allowTrailingComma && this.afterTrailingComma(close)) {
      break;
    } else if (this.type === types.ellipsis) {
      var rest = this.parseRestBinding();
      this.parseBindingListItem(rest);
      elts.push(rest);

      if (this.type === types.comma) {
        this.raise(this.start, "Comma is not permitted after the rest element");
      }

      this.expect(close);
      break;
    } else {
      var elem = this.parseMaybeDefault(this.start, this.startLoc);
      this.parseBindingListItem(elem);
      elts.push(elem);
    }
  }

  return elts;
};

pp$2.parseBindingListItem = function (param) {
  return param;
}; // Parses assignment pattern around given atom if possible.


pp$2.parseMaybeDefault = function (startPos, startLoc, left) {
  left = left || this.parseBindingAtom();

  if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) {
    return left;
  }

  var node = this.startNodeAt(startPos, startLoc);
  node.left = left;
  node.right = this.parseMaybeAssign();
  return this.finishNode(node, "AssignmentPattern");
}; // Verify that a node is an lval — something that can be assigned
// to.
// bindingType can be either:
// 'var' indicating that the lval creates a 'var' binding
// 'let' indicating that the lval creates a lexical ('let' or 'const') binding
// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references


pp$2.checkLVal = function (expr, bindingType, checkClashes) {
  if (bindingType === void 0) bindingType = BIND_NONE;

  switch (expr.type) {
    case "Identifier":
      if (bindingType === BIND_LEXICAL && expr.name === "let") {
        this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name");
      }

      if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {
        this.raiseRecoverable(expr.start, (bindingType ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
      }

      if (checkClashes) {
        if (has(checkClashes, expr.name)) {
          this.raiseRecoverable(expr.start, "Argument name clash");
        }

        checkClashes[expr.name] = true;
      }

      if (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) {
        this.declareName(expr.name, bindingType, expr.start);
      }

      break;

    case "ChainExpression":
      this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
      break;

    case "MemberExpression":
      if (bindingType) {
        this.raiseRecoverable(expr.start, "Binding member expression");
      }

      break;

    case "ObjectPattern":
      for (var i = 0, list = expr.properties; i < list.length; i += 1) {
        var prop = list[i];
        this.checkLVal(prop, bindingType, checkClashes);
      }

      break;

    case "Property":
      // AssignmentProperty has type === "Property"
      this.checkLVal(expr.value, bindingType, checkClashes);
      break;

    case "ArrayPattern":
      for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
        var elem = list$1[i$1];

        if (elem) {
          this.checkLVal(elem, bindingType, checkClashes);
        }
      }

      break;

    case "AssignmentPattern":
      this.checkLVal(expr.left, bindingType, checkClashes);
      break;

    case "RestElement":
      this.checkLVal(expr.argument, bindingType, checkClashes);
      break;

    case "ParenthesizedExpression":
      this.checkLVal(expr.expression, bindingType, checkClashes);
      break;

    default:
      this.raise(expr.start, (bindingType ? "Binding" : "Assigning to") + " rvalue");}

}; // A recursive descent parser operates by defining functions for all


var pp$3 = Parser.prototype; // Check if property name clashes with already added.
// Object/class getters and setters are not allowed to clash —
// either with each other or with an init property — and in
// strict mode, init properties are also not allowed to be repeated.

pp$3.checkPropClash = function (prop, propHash, refDestructuringErrors) {
  if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement") {
    return;
  }

  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
    return;
  }

  var key = prop.key;
  var name;

  switch (key.type) {
    case "Identifier":
      name = key.name;
      break;

    case "Literal":
      name = String(key.value);
      break;

    default:
      return;}


  var kind = prop.kind;

  if (this.options.ecmaVersion >= 6) {
    if (name === "__proto__" && kind === "init") {
      if (propHash.proto) {
        if (refDestructuringErrors) {
          if (refDestructuringErrors.doubleProto < 0) {
            refDestructuringErrors.doubleProto = key.start;
          } // Backwards-compat kludge. Can be removed in version 6.0

        } else {
          this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
        }
      }

      propHash.proto = true;
    }

    return;
  }

  name = "$" + name;
  var other = propHash[name];

  if (other) {
    var redefinition;

    if (kind === "init") {
      redefinition = this.strict && other.init || other.get || other.set;
    } else {
      redefinition = other.init || other[kind];
    }

    if (redefinition) {
      this.raiseRecoverable(key.start, "Redefinition of property");
    }
  } else {
    other = propHash[name] = {
      init: false,
      get: false,
      set: false };

  }

  other[kind] = true;
}; // ### Expression parsing
// These nest, from the most general expression type at the top to
// 'atomic', nondivisible expression types at the bottom. Most of
// the functions will simply let the function(s) below them parse,
// and, *if* the syntactic construct they handle is present, wrap
// the AST node that the inner parser gave them in another node.
// Parse a full expression. The optional arguments are used to
// forbid the `in` operator (in for loops initalization expressions)
// and provide reference for storing '=' operator inside shorthand
// property assignment in contexts where both object expression
// and object pattern might appear (so it's possible to raise
// delayed syntax error at correct position).


pp$3.parseExpression = function (noIn, refDestructuringErrors) {
  var startPos = this.start,
  startLoc = this.startLoc;
  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);

  if (this.type === types.comma) {
    var node = this.startNodeAt(startPos, startLoc);
    node.expressions = [expr];

    while (this.eat(types.comma)) {
      node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));
    }

    return this.finishNode(node, "SequenceExpression");
  }

  return expr;
}; // Parse an assignment expression. This includes applications of
// operators like `+=`.


pp$3.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {
  if (this.isContextual("yield")) {
    if (this.inGenerator) {
      return this.parseYield(noIn);
    } // The tokenizer will assume an expression is allowed after
    // `yield`, but this isn't that kind of yield
    else {
        this.exprAllowed = false;
      }
  }

  var ownDestructuringErrors = false,
  oldParenAssign = -1,
  oldTrailingComma = -1;

  if (refDestructuringErrors) {
    oldParenAssign = refDestructuringErrors.parenthesizedAssign;
    oldTrailingComma = refDestructuringErrors.trailingComma;
    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
  } else {
    refDestructuringErrors = new DestructuringErrors();
    ownDestructuringErrors = true;
  }

  var startPos = this.start,
  startLoc = this.startLoc;

  if (this.type === types.parenL || this.type === types.name) {
    this.potentialArrowAt = this.start;
  }

  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);

  if (afterLeftParse) {
    left = afterLeftParse.call(this, left, startPos, startLoc);
  }

  if (this.type.isAssign) {
    var node = this.startNodeAt(startPos, startLoc);
    node.operator = this.value;
    node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;

    if (!ownDestructuringErrors) {
      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;
    }

    if (refDestructuringErrors.shorthandAssign >= node.left.start) {
      refDestructuringErrors.shorthandAssign = -1;
    } // reset because shorthand default was used correctly


    this.checkLVal(left);
    this.next();
    node.right = this.parseMaybeAssign(noIn);
    return this.finishNode(node, "AssignmentExpression");
  } else {
    if (ownDestructuringErrors) {
      this.checkExpressionErrors(refDestructuringErrors, true);
    }
  }

  if (oldParenAssign > -1) {
    refDestructuringErrors.parenthesizedAssign = oldParenAssign;
  }

  if (oldTrailingComma > -1) {
    refDestructuringErrors.trailingComma = oldTrailingComma;
  }

  return left;
}; // Parse a ternary conditional (`?:`) operator.


pp$3.parseMaybeConditional = function (noIn, refDestructuringErrors) {
  var startPos = this.start,
  startLoc = this.startLoc;
  var expr = this.parseExprOps(noIn, refDestructuringErrors);

  if (this.checkExpressionErrors(refDestructuringErrors)) {
    return expr;
  }

  if (this.eat(types.question)) {
    var node = this.startNodeAt(startPos, startLoc);
    node.test = expr;
    node.consequent = this.parseMaybeAssign();
    this.expect(types.colon);
    node.alternate = this.parseMaybeAssign(noIn);
    return this.finishNode(node, "ConditionalExpression");
  }

  return expr;
}; // Start the precedence parser.


pp$3.parseExprOps = function (noIn, refDestructuringErrors) {
  var startPos = this.start,
  startLoc = this.startLoc;
  var expr = this.parseMaybeUnary(refDestructuringErrors, false);

  if (this.checkExpressionErrors(refDestructuringErrors)) {
    return expr;
  }

  return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn);
}; // Parse binary operators with the operator precedence parsing
// algorithm. `left` is the left-hand side of the operator.
// `minPrec` provides context that allows the function to stop and
// defer further parser to one of its callers when it encounters an
// operator that has a lower precedence than the set it is parsing.


pp$3.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
  var prec = this.type.binop;

  if (prec != null && (!noIn || this.type !== types._in)) {
    if (prec > minPrec) {
      var logical = this.type === types.logicalOR || this.type === types.logicalAND;
      var coalesce = this.type === types.coalesce;

      if (coalesce) {
        // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.
        // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.
        prec = types.logicalAND.binop;
      }

      var op = this.value;
      this.next();
      var startPos = this.start,
      startLoc = this.startLoc;
      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);
      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);

      if (logical && this.type === types.coalesce || coalesce && (this.type === types.logicalOR || this.type === types.logicalAND)) {
        this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses");
      }

      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
    }
  }

  return left;
};

pp$3.buildBinary = function (startPos, startLoc, left, right, op, logical) {
  var node = this.startNodeAt(startPos, startLoc);
  node.left = left;
  node.operator = op;
  node.right = right;
  return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
}; // Parse unary operators, both prefix and postfix.


pp$3.parseMaybeUnary = function (refDestructuringErrors, sawUnary) {
  var startPos = this.start,
  startLoc = this.startLoc,
  expr;

  if (this.isContextual("await") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) {
    expr = this.parseAwait();
    sawUnary = true;
  } else if (this.type.prefix) {
    var node = this.startNode(),
    update = this.type === types.incDec;
    node.operator = this.value;
    node.prefix = true;
    this.next();
    node.argument = this.parseMaybeUnary(null, true);
    this.checkExpressionErrors(refDestructuringErrors, true);

    if (update) {
      this.checkLVal(node.argument);
    } else if (this.strict && node.operator === "delete" && node.argument.type === "Identifier") {
      this.raiseRecoverable(node.start, "Deleting local variable in strict mode");
    } else {
      sawUnary = true;
    }

    expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
  } else {
    expr = this.parseExprSubscripts(refDestructuringErrors);

    if (this.checkExpressionErrors(refDestructuringErrors)) {
      return expr;
    }

    while (this.type.postfix && !this.canInsertSemicolon()) {
      var node$1 = this.startNodeAt(startPos, startLoc);
      node$1.operator = this.value;
      node$1.prefix = false;
      node$1.argument = expr;
      this.checkLVal(expr);
      this.next();
      expr = this.finishNode(node$1, "UpdateExpression");
    }
  }

  if (!sawUnary && this.eat(types.starstar)) {
    return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false);
  } else {
    return expr;
  }
}; // Parse call, dot, and `[]`-subscript expressions.


pp$3.parseExprSubscripts = function (refDestructuringErrors) {
  var startPos = this.start,
  startLoc = this.startLoc;
  var expr = this.parseExprAtom(refDestructuringErrors);

  if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")") {
    return expr;
  }

  var result = this.parseSubscripts(expr, startPos, startLoc);

  if (refDestructuringErrors && result.type === "MemberExpression") {
    if (refDestructuringErrors.parenthesizedAssign >= result.start) {
      refDestructuringErrors.parenthesizedAssign = -1;
    }

    if (refDestructuringErrors.parenthesizedBind >= result.start) {
      refDestructuringErrors.parenthesizedBind = -1;
    }
  }

  return result;
};

pp$3.parseSubscripts = function (base, startPos, startLoc, noCalls) {
  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && this.potentialArrowAt === base.start;
  var optionalChained = false;

  while (true) {
    var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained);

    if (element.optional) {
      optionalChained = true;
    }

    if (element === base || element.type === "ArrowFunctionExpression") {
      if (optionalChained) {
        var chainNode = this.startNodeAt(startPos, startLoc);
        chainNode.expression = element;
        element = this.finishNode(chainNode, "ChainExpression");
      }

      return element;
    }

    base = element;
  }
};

pp$3.parseSubscript = function (base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained) {
  var optionalSupported = this.options.ecmaVersion >= 11;
  var optional = optionalSupported && this.eat(types.questionDot);

  if (noCalls && optional) {
    this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
  }

  var computed = this.eat(types.bracketL);

  if (computed || optional && this.type !== types.parenL && this.type !== types.backQuote || this.eat(types.dot)) {
    var node = this.startNodeAt(startPos, startLoc);
    node.object = base;
    node.property = computed ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== "never");
    node.computed = !!computed;

    if (computed) {
      this.expect(types.bracketR);
    }

    if (optionalSupported) {
      node.optional = optional;
    }

    base = this.finishNode(node, "MemberExpression");
  } else if (!noCalls && this.eat(types.parenL)) {
    var refDestructuringErrors = new DestructuringErrors(),
    oldYieldPos = this.yieldPos,
    oldAwaitPos = this.awaitPos,
    oldAwaitIdentPos = this.awaitIdentPos;
    this.yieldPos = 0;
    this.awaitPos = 0;
    this.awaitIdentPos = 0;
    var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);

    if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types.arrow)) {
      this.checkPatternErrors(refDestructuringErrors, false);
      this.checkYieldAwaitInDefaultParams();

      if (this.awaitIdentPos > 0) {
        this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function");
      }

      this.yieldPos = oldYieldPos;
      this.awaitPos = oldAwaitPos;
      this.awaitIdentPos = oldAwaitIdentPos;
      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true);
    }

    this.checkExpressionErrors(refDestructuringErrors, true);
    this.yieldPos = oldYieldPos || this.yieldPos;
    this.awaitPos = oldAwaitPos || this.awaitPos;
    this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
    var node$1 = this.startNodeAt(startPos, startLoc);
    node$1.callee = base;
    node$1.arguments = exprList;

    if (optionalSupported) {
      node$1.optional = optional;
    }

    base = this.finishNode(node$1, "CallExpression");
  } else if (this.type === types.backQuote) {
    if (optional || optionalChained) {
      this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
    }

    var node$2 = this.startNodeAt(startPos, startLoc);
    node$2.tag = base;
    node$2.quasi = this.parseTemplate({
      isTagged: true });

    base = this.finishNode(node$2, "TaggedTemplateExpression");
  }

  return base;
}; // Parse an atomic expression — either a single token that is an
// expression, an expression started by a keyword like `function` or
// `new`, or an expression wrapped in punctuation like `()`, `[]`,
// or `{}`.


pp$3.parseExprAtom = function (refDestructuringErrors) {
  // If a division operator appears in an expression position, the
  // tokenizer got confused, and we force it to read a regexp instead.
  if (this.type === types.slash) {
    this.readRegexp();
  }

  var node,
  canBeArrow = this.potentialArrowAt === this.start;

  switch (this.type) {
    case types._super:
      if (!this.allowSuper) {
        this.raise(this.start, "'super' keyword outside a method");
      }

      node = this.startNode();
      this.next();

      if (this.type === types.parenL && !this.allowDirectSuper) {
        this.raise(node.start, "super() call outside constructor of a subclass");
      } // The `super` keyword can appear at below:
      // SuperProperty:
      //     super [ Expression ]
      //     super . IdentifierName
      // SuperCall:
      //     super ( Arguments )


      if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL) {
        this.unexpected();
      }

      return this.finishNode(node, "Super");

    case types._this:
      node = this.startNode();
      this.next();
      return this.finishNode(node, "ThisExpression");

    case types.name:
      var startPos = this.start,
      startLoc = this.startLoc,
      containsEsc = this.containsEsc;
      var id = this.parseIdent(false);

      if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types._function)) {
        return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true);
      }

      if (canBeArrow && !this.canInsertSemicolon()) {
        if (this.eat(types.arrow)) {
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false);
        }

        if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types.name && !containsEsc) {
          id = this.parseIdent(false);

          if (this.canInsertSemicolon() || !this.eat(types.arrow)) {
            this.unexpected();
          }

          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true);
        }
      }

      return id;

    case types.regexp:
      var value = this.value;
      node = this.parseLiteral(value.value);
      node.regex = {
        pattern: value.pattern,
        flags: value.flags };

      return node;

    case types.num:
    case types.string:
      return this.parseLiteral(this.value);

    case types._null:
    case types._true:
    case types._false:
      node = this.startNode();
      node.value = this.type === types._null ? null : this.type === types._true;
      node.raw = this.type.keyword;
      this.next();
      return this.finishNode(node, "Literal");

    case types.parenL:
      var start = this.start,
      expr = this.parseParenAndDistinguishExpression(canBeArrow);

      if (refDestructuringErrors) {
        if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {
          refDestructuringErrors.parenthesizedAssign = start;
        }

        if (refDestructuringErrors.parenthesizedBind < 0) {
          refDestructuringErrors.parenthesizedBind = start;
        }
      }

      return expr;

    case types.bracketL:
      node = this.startNode();
      this.next();
      node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);
      return this.finishNode(node, "ArrayExpression");

    case types.braceL:
      return this.parseObj(false, refDestructuringErrors);

    case types._function:
      node = this.startNode();
      this.next();
      return this.parseFunction(node, 0);

    case types._class:
      return this.parseClass(this.startNode(), false);

    case types._new:
      return this.parseNew();

    case types.backQuote:
      return this.parseTemplate();

    case types._import:
      if (this.options.ecmaVersion >= 11) {
        return this.parseExprImport();
      } else {
        return this.unexpected();
      }

    default:
      this.unexpected();}

};

pp$3.parseExprImport = function () {
  var node = this.startNode(); // Consume `import` as an identifier for `import.meta`.
  // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.

  if (this.containsEsc) {
    this.raiseRecoverable(this.start, "Escape sequence in keyword import");
  }

  var meta = this.parseIdent(true);

  switch (this.type) {
    case types.parenL:
      return this.parseDynamicImport(node);

    case types.dot:
      node.meta = meta;
      return this.parseImportMeta(node);

    default:
      this.unexpected();}

};

pp$3.parseDynamicImport = function (node) {
  this.next(); // skip `(`
  // Parse node.source.

  node.source = this.parseMaybeAssign(); // Verify ending.

  if (!this.eat(types.parenR)) {
    var errorPos = this.start;

    if (this.eat(types.comma) && this.eat(types.parenR)) {
      this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
    } else {
      this.unexpected(errorPos);
    }
  }

  return this.finishNode(node, "ImportExpression");
};

pp$3.parseImportMeta = function (node) {
  this.next(); // skip `.`

  var containsEsc = this.containsEsc;
  node.property = this.parseIdent(true);

  if (node.property.name !== "meta") {
    this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'");
  }

  if (containsEsc) {
    this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters");
  }

  if (this.options.sourceType !== "module") {
    this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module");
  }

  return this.finishNode(node, "MetaProperty");
};

pp$3.parseLiteral = function (value) {
  var node = this.startNode();
  node.value = value;
  node.raw = this.input.slice(this.start, this.end);

  if (node.raw.charCodeAt(node.raw.length - 1) === 110) {
    node.bigint = node.raw.slice(0, -1);
  }

  this.next();
  return this.finishNode(node, "Literal");
};

pp$3.parseParenExpression = function () {
  this.expect(types.parenL);
  var val = this.parseExpression();
  this.expect(types.parenR);
  return val;
};

pp$3.parseParenAndDistinguishExpression = function (canBeArrow) {
  var startPos = this.start,
  startLoc = this.startLoc,
  val,
  allowTrailingComma = this.options.ecmaVersion >= 8;

  if (this.options.ecmaVersion >= 6) {
    this.next();
    var innerStartPos = this.start,
    innerStartLoc = this.startLoc;
    var exprList = [],
    first = true,
    lastIsComma = false;
    var refDestructuringErrors = new DestructuringErrors(),
    oldYieldPos = this.yieldPos,
    oldAwaitPos = this.awaitPos,
    spreadStart;
    this.yieldPos = 0;
    this.awaitPos = 0; // Do not save awaitIdentPos to allow checking awaits nested in parameters

    while (this.type !== types.parenR) {
      first ? first = false : this.expect(types.comma);

      if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {
        lastIsComma = true;
        break;
      } else if (this.type === types.ellipsis) {
        spreadStart = this.start;
        exprList.push(this.parseParenItem(this.parseRestBinding()));

        if (this.type === types.comma) {
          this.raise(this.start, "Comma is not permitted after the rest element");
        }

        break;
      } else {
        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
      }
    }

    var innerEndPos = this.start,
    innerEndLoc = this.startLoc;
    this.expect(types.parenR);

    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
      this.checkPatternErrors(refDestructuringErrors, false);
      this.checkYieldAwaitInDefaultParams();
      this.yieldPos = oldYieldPos;
      this.awaitPos = oldAwaitPos;
      return this.parseParenArrowList(startPos, startLoc, exprList);
    }

    if (!exprList.length || lastIsComma) {
      this.unexpected(this.lastTokStart);
    }

    if (spreadStart) {
      this.unexpected(spreadStart);
    }

    this.checkExpressionErrors(refDestructuringErrors, true);
    this.yieldPos = oldYieldPos || this.yieldPos;
    this.awaitPos = oldAwaitPos || this.awaitPos;

    if (exprList.length > 1) {
      val = this.startNodeAt(innerStartPos, innerStartLoc);
      val.expressions = exprList;
      this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
    } else {
      val = exprList[0];
    }
  } else {
    val = this.parseParenExpression();
  }

  if (this.options.preserveParens) {
    var par = this.startNodeAt(startPos, startLoc);
    par.expression = val;
    return this.finishNode(par, "ParenthesizedExpression");
  } else {
    return val;
  }
};

pp$3.parseParenItem = function (item) {
  return item;
};

pp$3.parseParenArrowList = function (startPos, startLoc, exprList) {
  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);
}; // New's precedence is slightly tricky. It must allow its argument to
// be a `[]` or dot subscript expression, but not a call — at least,
// not without wrapping it in parentheses. Thus, it uses the noCalls
// argument to parseSubscripts to prevent it from consuming the
// argument list.


var empty$1 = [];

pp$3.parseNew = function () {
  if (this.containsEsc) {
    this.raiseRecoverable(this.start, "Escape sequence in keyword new");
  }

  var node = this.startNode();
  var meta = this.parseIdent(true);

  if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {
    node.meta = meta;
    var containsEsc = this.containsEsc;
    node.property = this.parseIdent(true);

    if (node.property.name !== "target") {
      this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'");
    }

    if (containsEsc) {
      this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters");
    }

    if (!this.inNonArrowFunction()) {
      this.raiseRecoverable(node.start, "'new.target' can only be used in functions");
    }

    return this.finishNode(node, "MetaProperty");
  }

  var startPos = this.start,
  startLoc = this.startLoc,
  isImport = this.type === types._import;
  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);

  if (isImport && node.callee.type === "ImportExpression") {
    this.raise(startPos, "Cannot use new with import()");
  }

  if (this.eat(types.parenL)) {
    node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false);
  } else {
    node.arguments = empty$1;
  }

  return this.finishNode(node, "NewExpression");
}; // Parse template expression.


pp$3.parseTemplateElement = function (ref) {
  var isTagged = ref.isTagged;
  var elem = this.startNode();

  if (this.type === types.invalidTemplate) {
    if (!isTagged) {
      this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
    }

    elem.value = {
      raw: this.value,
      cooked: null };

  } else {
    elem.value = {
      raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
      cooked: this.value };

  }

  this.next();
  elem.tail = this.type === types.backQuote;
  return this.finishNode(elem, "TemplateElement");
};

pp$3.parseTemplate = function (ref) {
  if (ref === void 0) ref = {};
  var isTagged = ref.isTagged;
  if (isTagged === void 0) isTagged = false;
  var node = this.startNode();
  this.next();
  node.expressions = [];
  var curElt = this.parseTemplateElement({
    isTagged: isTagged });

  node.quasis = [curElt];

  while (!curElt.tail) {
    if (this.type === types.eof) {
      this.raise(this.pos, "Unterminated template literal");
    }

    this.expect(types.dollarBraceL);
    node.expressions.push(this.parseExpression());
    this.expect(types.braceR);
    node.quasis.push(curElt = this.parseTemplateElement({
      isTagged: isTagged }));

  }

  this.next();
  return this.finishNode(node, "TemplateLiteral");
};

pp$3.isAsyncProp = function (prop) {
  return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
}; // Parse an object literal or binding pattern.


pp$3.parseObj = function (isPattern, refDestructuringErrors) {
  var node = this.startNode(),
  first = true,
  propHash = {};
  node.properties = [];
  this.next();

  while (!this.eat(types.braceR)) {
    if (!first) {
      this.expect(types.comma);

      if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types.braceR)) {
        break;
      }
    } else {
      first = false;
    }

    var prop = this.parseProperty(isPattern, refDestructuringErrors);

    if (!isPattern) {
      this.checkPropClash(prop, propHash, refDestructuringErrors);
    }

    node.properties.push(prop);
  }

  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
};

pp$3.parseProperty = function (isPattern, refDestructuringErrors) {
  var prop = this.startNode(),
  isGenerator,
  isAsync,
  startPos,
  startLoc;

  if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {
    if (isPattern) {
      prop.argument = this.parseIdent(false);

      if (this.type === types.comma) {
        this.raise(this.start, "Comma is not permitted after the rest element");
      }

      return this.finishNode(prop, "RestElement");
    } // To disallow parenthesized identifier via `this.toAssignable()`.


    if (this.type === types.parenL && refDestructuringErrors) {
      if (refDestructuringErrors.parenthesizedAssign < 0) {
        refDestructuringErrors.parenthesizedAssign = this.start;
      }

      if (refDestructuringErrors.parenthesizedBind < 0) {
        refDestructuringErrors.parenthesizedBind = this.start;
      }
    } // Parse argument.


    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors); // To disallow trailing comma via `this.toAssignable()`.

    if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
      refDestructuringErrors.trailingComma = this.start;
    } // Finish


    return this.finishNode(prop, "SpreadElement");
  }

  if (this.options.ecmaVersion >= 6) {
    prop.method = false;
    prop.shorthand = false;

    if (isPattern || refDestructuringErrors) {
      startPos = this.start;
      startLoc = this.startLoc;
    }

    if (!isPattern) {
      isGenerator = this.eat(types.star);
    }
  }

  var containsEsc = this.containsEsc;
  this.parsePropertyName(prop);

  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
    isAsync = true;
    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
    this.parsePropertyName(prop, refDestructuringErrors);
  } else {
    isAsync = false;
  }

  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
  return this.finishNode(prop, "Property");
};

pp$3.parsePropertyValue = function (prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
  if ((isGenerator || isAsync) && this.type === types.colon) {
    this.unexpected();
  }

  if (this.eat(types.colon)) {
    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
    prop.kind = "init";
  } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {
    if (isPattern) {
      this.unexpected();
    }

    prop.kind = "init";
    prop.method = true;
    prop.value = this.parseMethod(isGenerator, isAsync);
  } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && this.type !== types.comma && this.type !== types.braceR && this.type !== types.eq) {
    if (isGenerator || isAsync) {
      this.unexpected();
    }

    prop.kind = prop.key.name;
    this.parsePropertyName(prop);
    prop.value = this.parseMethod(false);
    var paramCount = prop.kind === "get" ? 0 : 1;

    if (prop.value.params.length !== paramCount) {
      var start = prop.value.start;

      if (prop.kind === "get") {
        this.raiseRecoverable(start, "getter should have no params");
      } else {
        this.raiseRecoverable(start, "setter should have exactly one param");
      }
    } else {
      if (prop.kind === "set" && prop.value.params[0].type === "RestElement") {
        this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
      }
    }
  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
    if (isGenerator || isAsync) {
      this.unexpected();
    }

    this.checkUnreserved(prop.key);

    if (prop.key.name === "await" && !this.awaitIdentPos) {
      this.awaitIdentPos = startPos;
    }

    prop.kind = "init";

    if (isPattern) {
      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
    } else if (this.type === types.eq && refDestructuringErrors) {
      if (refDestructuringErrors.shorthandAssign < 0) {
        refDestructuringErrors.shorthandAssign = this.start;
      }

      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
    } else {
      prop.value = prop.key;
    }

    prop.shorthand = true;
  } else {
    this.unexpected();
  }
};

pp$3.parsePropertyName = function (prop) {
  if (this.options.ecmaVersion >= 6) {
    if (this.eat(types.bracketL)) {
      prop.computed = true;
      prop.key = this.parseMaybeAssign();
      this.expect(types.bracketR);
      return prop.key;
    } else {
      prop.computed = false;
    }
  }

  return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
}; // Initialize empty function node.


pp$3.initFunction = function (node) {
  node.id = null;

  if (this.options.ecmaVersion >= 6) {
    node.generator = node.expression = false;
  }

  if (this.options.ecmaVersion >= 8) {
    node.async = false;
  }
}; // Parse object or class method.


pp$3.parseMethod = function (isGenerator, isAsync, allowDirectSuper) {
  var node = this.startNode(),
  oldYieldPos = this.yieldPos,
  oldAwaitPos = this.awaitPos,
  oldAwaitIdentPos = this.awaitIdentPos;
  this.initFunction(node);

  if (this.options.ecmaVersion >= 6) {
    node.generator = isGenerator;
  }

  if (this.options.ecmaVersion >= 8) {
    node.async = !!isAsync;
  }

  this.yieldPos = 0;
  this.awaitPos = 0;
  this.awaitIdentPos = 0;
  this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
  this.expect(types.parenL);
  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
  this.checkYieldAwaitInDefaultParams();
  this.parseFunctionBody(node, false, true);
  this.yieldPos = oldYieldPos;
  this.awaitPos = oldAwaitPos;
  this.awaitIdentPos = oldAwaitIdentPos;
  return this.finishNode(node, "FunctionExpression");
}; // Parse arrow function expression with given parameters.


pp$3.parseArrowExpression = function (node, params, isAsync) {
  var oldYieldPos = this.yieldPos,
  oldAwaitPos = this.awaitPos,
  oldAwaitIdentPos = this.awaitIdentPos;
  this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
  this.initFunction(node);

  if (this.options.ecmaVersion >= 8) {
    node.async = !!isAsync;
  }

  this.yieldPos = 0;
  this.awaitPos = 0;
  this.awaitIdentPos = 0;
  node.params = this.toAssignableList(params, true);
  this.parseFunctionBody(node, true, false);
  this.yieldPos = oldYieldPos;
  this.awaitPos = oldAwaitPos;
  this.awaitIdentPos = oldAwaitIdentPos;
  return this.finishNode(node, "ArrowFunctionExpression");
}; // Parse function body and check parameters.


pp$3.parseFunctionBody = function (node, isArrowFunction, isMethod) {
  var isExpression = isArrowFunction && this.type !== types.braceL;
  var oldStrict = this.strict,
  useStrict = false;

  if (isExpression) {
    node.body = this.parseMaybeAssign();
    node.expression = true;
    this.checkParams(node, false);
  } else {
    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);

    if (!oldStrict || nonSimple) {
      useStrict = this.strictDirective(this.end); // If this is a strict mode function, verify that argument names
      // are not repeated, and it does not try to bind the words `eval`
      // or `arguments`.

      if (useStrict && nonSimple) {
        this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
      }
    } // Start a new scope with regard to labels and the `inFunction`
    // flag (restore them to their old value afterwards).


    var oldLabels = this.labels;
    this.labels = [];

    if (useStrict) {
      this.strict = true;
    } // Add the params to varDeclaredNames to ensure that an error is thrown
    // if a let/const declaration in the function clashes with one of the params.


    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params)); // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'

    if (this.strict && node.id) {
      this.checkLVal(node.id, BIND_OUTSIDE);
    }

    node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);
    node.expression = false;
    this.adaptDirectivePrologue(node.body.body);
    this.labels = oldLabels;
  }

  this.exitScope();
};

pp$3.isSimpleParamList = function (params) {
  for (var i = 0, list = params; i < list.length; i += 1) {
    var param = list[i];

    if (param.type !== "Identifier") {
      return false;
    }
  }

  return true;
}; // Checks function params for various disallowed patterns such as using "eval"
// or "arguments" and duplicate parameters.


pp$3.checkParams = function (node, allowDuplicates) {
  var nameHash = {};

  for (var i = 0, list = node.params; i < list.length; i += 1) {
    var param = list[i];
    this.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);
  }
}; // Parses a comma-separated list of expressions, and returns them as
// an array. `close` is the token type that ends the list, and
// `allowEmpty` can be turned on to allow subsequent commas with
// nothing in between them to be parsed as `null` (which is needed
// for array literals).


pp$3.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
  var elts = [],
  first = true;

  while (!this.eat(close)) {
    if (!first) {
      this.expect(types.comma);

      if (allowTrailingComma && this.afterTrailingComma(close)) {
        break;
      }
    } else {
      first = false;
    }

    var elt = void 0;

    if (allowEmpty && this.type === types.comma) {
      elt = null;
    } else if (this.type === types.ellipsis) {
      elt = this.parseSpread(refDestructuringErrors);

      if (refDestructuringErrors && this.type === types.comma && refDestructuringErrors.trailingComma < 0) {
        refDestructuringErrors.trailingComma = this.start;
      }
    } else {
      elt = this.parseMaybeAssign(false, refDestructuringErrors);
    }

    elts.push(elt);
  }

  return elts;
};

pp$3.checkUnreserved = function (ref) {
  var start = ref.start;
  var end = ref.end;
  var name = ref.name;

  if (this.inGenerator && name === "yield") {
    this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator");
  }

  if (this.inAsync && name === "await") {
    this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function");
  }

  if (this.keywords.test(name)) {
    this.raise(start, "Unexpected keyword '" + name + "'");
  }

  if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") !== -1) {
    return;
  }

  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;

  if (re.test(name)) {
    if (!this.inAsync && name === "await") {
      this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function");
    }

    this.raiseRecoverable(start, "The keyword '" + name + "' is reserved");
  }
}; // Parse the next token as an identifier. If `liberal` is true (used
// when parsing properties), it will also convert keywords into
// identifiers.


pp$3.parseIdent = function (liberal, isBinding) {
  var node = this.startNode();

  if (this.type === types.name) {
    node.name = this.value;
  } else if (this.type.keyword) {
    node.name = this.type.keyword; // To fix https://github.com/acornjs/acorn/issues/575
    // `class` and `function` keywords push new context into this.context.
    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.
    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword

    if ((node.name === "class" || node.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
      this.context.pop();
    }
  } else {
    this.unexpected();
  }

  this.next(!!liberal);
  this.finishNode(node, "Identifier");

  if (!liberal) {
    this.checkUnreserved(node);

    if (node.name === "await" && !this.awaitIdentPos) {
      this.awaitIdentPos = node.start;
    }
  }

  return node;
}; // Parses yield expression inside generator.


pp$3.parseYield = function (noIn) {
  if (!this.yieldPos) {
    this.yieldPos = this.start;
  }

  var node = this.startNode();
  this.next();

  if (this.type === types.semi || this.canInsertSemicolon() || this.type !== types.star && !this.type.startsExpr) {
    node.delegate = false;
    node.argument = null;
  } else {
    node.delegate = this.eat(types.star);
    node.argument = this.parseMaybeAssign(noIn);
  }

  return this.finishNode(node, "YieldExpression");
};

pp$3.parseAwait = function () {
  if (!this.awaitPos) {
    this.awaitPos = this.start;
  }

  var node = this.startNode();
  this.next();
  node.argument = this.parseMaybeUnary(null, false);
  return this.finishNode(node, "AwaitExpression");
};

var pp$4 = Parser.prototype; // This function is used to raise exceptions on parse errors. It
// takes an offset integer (into the current `input`) to indicate
// the location of the error, attaches the position to the end
// of the error message, and then raises a `SyntaxError` with that
// message.

pp$4.raise = function (pos, message) {
  var loc = getLineInfo(this.input, pos);
  message += " (" + loc.line + ":" + loc.column + ")";
  var err = new SyntaxError(message);
  err.pos = pos;
  err.loc = loc;
  err.raisedAt = this.pos;
  throw err;
};

pp$4.raiseRecoverable = pp$4.raise;

pp$4.curPosition = function () {
  if (this.options.locations) {
    return new Position(this.curLine, this.pos - this.lineStart);
  }
};

var pp$5 = Parser.prototype;

var Scope = function Scope(flags) {
  this.flags = flags; // A list of var-declared names in the current lexical scope

  this.var = []; // A list of lexically-declared names in the current lexical scope

  this.lexical = []; // A list of lexically-declared FunctionDeclaration names in the current lexical scope

  this.functions = [];
}; // The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.


pp$5.enterScope = function (flags) {
  this.scopeStack.push(new Scope(flags));
};

pp$5.exitScope = function () {
  this.scopeStack.pop();
}; // The spec says:
// > At the top level of a function, or script, function declarations are
// > treated like var declarations rather than like lexical declarations.


pp$5.treatFunctionsAsVarInScope = function (scope) {
  return scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_TOP;
};

pp$5.declareName = function (name, bindingType, pos) {
  var redeclared = false;

  if (bindingType === BIND_LEXICAL) {
    var scope = this.currentScope();
    redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
    scope.lexical.push(name);

    if (this.inModule && scope.flags & SCOPE_TOP) {
      delete this.undefinedExports[name];
    }
  } else if (bindingType === BIND_SIMPLE_CATCH) {
    var scope$1 = this.currentScope();
    scope$1.lexical.push(name);
  } else if (bindingType === BIND_FUNCTION) {
    var scope$2 = this.currentScope();

    if (this.treatFunctionsAsVar) {
      redeclared = scope$2.lexical.indexOf(name) > -1;
    } else {
      redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1;
    }

    scope$2.functions.push(name);
  } else {
    for (var i = this.scopeStack.length - 1; i >= 0; --i) {
      var scope$3 = this.scopeStack[i];

      if (scope$3.lexical.indexOf(name) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
        redeclared = true;
        break;
      }

      scope$3.var.push(name);

      if (this.inModule && scope$3.flags & SCOPE_TOP) {
        delete this.undefinedExports[name];
      }

      if (scope$3.flags & SCOPE_VAR) {
        break;
      }
    }
  }

  if (redeclared) {
    this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
  }
};

pp$5.checkLocalExport = function (id) {
  // scope.functions must be empty as Module code is always strict.
  if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1) {
    this.undefinedExports[id.name] = id;
  }
};

pp$5.currentScope = function () {
  return this.scopeStack[this.scopeStack.length - 1];
};

pp$5.currentVarScope = function () {
  for (var i = this.scopeStack.length - 1;; i--) {
    var scope = this.scopeStack[i];

    if (scope.flags & SCOPE_VAR) {
      return scope;
    }
  }
}; // Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.


pp$5.currentThisScope = function () {
  for (var i = this.scopeStack.length - 1;; i--) {
    var scope = this.scopeStack[i];

    if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) {
      return scope;
    }
  }
};

var Node = function Node(parser, pos, loc) {
  this.type = "";
  this.start = pos;
  this.end = 0;

  if (parser.options.locations) {
    this.loc = new SourceLocation(parser, loc);
  }

  if (parser.options.directSourceFile) {
    this.sourceFile = parser.options.directSourceFile;
  }

  if (parser.options.ranges) {
    this.range = [pos, 0];
  }
}; // Start an AST node, attaching a start offset.


var pp$6 = Parser.prototype;

pp$6.startNode = function () {
  return new Node(this, this.start, this.startLoc);
};

pp$6.startNodeAt = function (pos, loc) {
  return new Node(this, pos, loc);
}; // Finish an AST node, adding `type` and `end` properties.


function finishNodeAt(node, type, pos, loc) {
  node.type = type;
  node.end = pos;

  if (this.options.locations) {
    node.loc.end = loc;
  }

  if (this.options.ranges) {
    node.range[1] = pos;
  }

  return node;
}

pp$6.finishNode = function (node, type) {
  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
}; // Finish node at given position


pp$6.finishNodeAt = function (node, type, pos, loc) {
  return finishNodeAt.call(this, node, type, pos, loc);
}; // The algorithm used to determine whether a regexp can appear at a


var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
  this.token = token;
  this.isExpr = !!isExpr;
  this.preserveSpace = !!preserveSpace;
  this.override = override;
  this.generator = !!generator;
};

var types$1 = {
  b_stat: new TokContext("{", false),
  b_expr: new TokContext("{", true),
  b_tmpl: new TokContext("${", false),
  p_stat: new TokContext("(", false),
  p_expr: new TokContext("(", true),
  q_tmpl: new TokContext("`", true, true, function (p) {
    return p.tryReadTemplateToken();
  }),
  f_stat: new TokContext("function", false),
  f_expr: new TokContext("function", true),
  f_expr_gen: new TokContext("function", true, false, null, true),
  f_gen: new TokContext("function", false, false, null, true) };

var pp$7 = Parser.prototype;

pp$7.initialContext = function () {
  return [types$1.b_stat];
};

pp$7.braceIsBlock = function (prevType) {
  var parent = this.curContext();

  if (parent === types$1.f_expr || parent === types$1.f_stat) {
    return true;
  }

  if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr)) {
    return !parent.isExpr;
  } // The check for `tt.name && exprAllowed` detects whether we are
  // after a `yield` or `of` construct. See the `updateContext` for
  // `tt.name`.


  if (prevType === types._return || prevType === types.name && this.exprAllowed) {
    return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
  }

  if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {
    return true;
  }

  if (prevType === types.braceL) {
    return parent === types$1.b_stat;
  }

  if (prevType === types._var || prevType === types._const || prevType === types.name) {
    return false;
  }

  return !this.exprAllowed;
};

pp$7.inGeneratorContext = function () {
  for (var i = this.context.length - 1; i >= 1; i--) {
    var context = this.context[i];

    if (context.token === "function") {
      return context.generator;
    }
  }

  return false;
};

pp$7.updateContext = function (prevType) {
  var update,
  type = this.type;

  if (type.keyword && prevType === types.dot) {
    this.exprAllowed = false;
  } else if (update = type.updateContext) {
    update.call(this, prevType);
  } else {
    this.exprAllowed = type.beforeExpr;
  }
}; // Token-specific context update code


types.parenR.updateContext = types.braceR.updateContext = function () {
  if (this.context.length === 1) {
    this.exprAllowed = true;
    return;
  }

  var out = this.context.pop();

  if (out === types$1.b_stat && this.curContext().token === "function") {
    out = this.context.pop();
  }

  this.exprAllowed = !out.isExpr;
};

types.braceL.updateContext = function (prevType) {
  this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);
  this.exprAllowed = true;
};

types.dollarBraceL.updateContext = function () {
  this.context.push(types$1.b_tmpl);
  this.exprAllowed = true;
};

types.parenL.updateContext = function (prevType) {
  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;
  this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);
  this.exprAllowed = true;
};

types.incDec.updateContext = function () {// tokExprAllowed stays unchanged
};

types._function.updateContext = types._class.updateContext = function (prevType) {
  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {
    this.context.push(types$1.f_expr);
  } else {
    this.context.push(types$1.f_stat);
  }

  this.exprAllowed = false;
};

types.backQuote.updateContext = function () {
  if (this.curContext() === types$1.q_tmpl) {
    this.context.pop();
  } else {
    this.context.push(types$1.q_tmpl);
  }

  this.exprAllowed = false;
};

types.star.updateContext = function (prevType) {
  if (prevType === types._function) {
    var index = this.context.length - 1;

    if (this.context[index] === types$1.f_expr) {
      this.context[index] = types$1.f_expr_gen;
    } else {
      this.context[index] = types$1.f_gen;
    }
  }

  this.exprAllowed = true;
};

types.name.updateContext = function (prevType) {
  var allowed = false;

  if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {
    if (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) {
      allowed = true;
    }
  }

  this.exprAllowed = allowed;
}; // This file contains Unicode properties extracted from the ECMAScript
// specification. The lists are extracted like so:
// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)
// #table-binary-unicode-properties


var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
var ecma11BinaryProperties = ecma10BinaryProperties;
var unicodeBinaryProperties = {
  9: ecma9BinaryProperties,
  10: ecma10BinaryProperties,
  11: ecma11BinaryProperties };
// #table-unicode-general-category-values

var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu"; // #table-unicode-script-values

var ecma9ScriptValues = "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
var unicodeScriptValues = {
  9: ecma9ScriptValues,
  10: ecma10ScriptValues,
  11: ecma11ScriptValues };

var data = {};

function buildUnicodeData(ecmaVersion) {
  var d = data[ecmaVersion] = {
    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
    nonBinary: {
      General_Category: wordsRegexp(unicodeGeneralCategoryValues),
      Script: wordsRegexp(unicodeScriptValues[ecmaVersion]) } };


  d.nonBinary.Script_Extensions = d.nonBinary.Script;
  d.nonBinary.gc = d.nonBinary.General_Category;
  d.nonBinary.sc = d.nonBinary.Script;
  d.nonBinary.scx = d.nonBinary.Script_Extensions;
}

buildUnicodeData(9);
buildUnicodeData(10);
buildUnicodeData(11);
var pp$8 = Parser.prototype;

var RegExpValidationState = function RegExpValidationState(parser) {
  this.parser = parser;
  this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "");
  this.unicodeProperties = data[parser.options.ecmaVersion >= 11 ? 11 : parser.options.ecmaVersion];
  this.source = "";
  this.flags = "";
  this.start = 0;
  this.switchU = false;
  this.switchN = false;
  this.pos = 0;
  this.lastIntValue = 0;
  this.lastStringValue = "";
  this.lastAssertionIsQuantifiable = false;
  this.numCapturingParens = 0;
  this.maxBackReference = 0;
  this.groupNames = [];
  this.backReferenceNames = [];
};

RegExpValidationState.prototype.reset = function reset(start, pattern, flags) {
  var unicode = flags.indexOf("u") !== -1;
  this.start = start | 0;
  this.source = pattern + "";
  this.flags = flags;
  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
};

RegExpValidationState.prototype.raise = function raise(message) {
  this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
}; // If u flag is given, this returns the code point at the index (it combines a surrogate pair).
// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).


RegExpValidationState.prototype.at = function at(i, forceU) {
  if (forceU === void 0) forceU = false;
  var s = this.source;
  var l = s.length;

  if (i >= l) {
    return -1;
  }

  var c = s.charCodeAt(i);

  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {
    return c;
  }

  var next = s.charCodeAt(i + 1);
  return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c;
};

RegExpValidationState.prototype.nextIndex = function nextIndex(i, forceU) {
  if (forceU === void 0) forceU = false;
  var s = this.source;
  var l = s.length;

  if (i >= l) {
    return l;
  }

  var c = s.charCodeAt(i),
  next;

  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l || (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {
    return i + 1;
  }

  return i + 2;
};

RegExpValidationState.prototype.current = function current(forceU) {
  if (forceU === void 0) forceU = false;
  return this.at(this.pos, forceU);
};

RegExpValidationState.prototype.lookahead = function lookahead(forceU) {
  if (forceU === void 0) forceU = false;
  return this.at(this.nextIndex(this.pos, forceU), forceU);
};

RegExpValidationState.prototype.advance = function advance(forceU) {
  if (forceU === void 0) forceU = false;
  this.pos = this.nextIndex(this.pos, forceU);
};

RegExpValidationState.prototype.eat = function eat(ch, forceU) {
  if (forceU === void 0) forceU = false;

  if (this.current(forceU) === ch) {
    this.advance(forceU);
    return true;
  }

  return false;
};

function codePointToString(ch) {
  if (ch <= 0xFFFF) {
    return String.fromCharCode(ch);
  }

  ch -= 0x10000;
  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00);
}
/**
   * Validate the flags part of a given RegExpLiteral.
   *
   * @param {RegExpValidationState} state The state to validate RegExp.
   * @returns {void}
   */


pp$8.validateRegExpFlags = function (state) {
  var validFlags = state.validFlags;
  var flags = state.flags;

  for (var i = 0; i < flags.length; i++) {
    var flag = flags.charAt(i);

    if (validFlags.indexOf(flag) === -1) {
      this.raise(state.start, "Invalid regular expression flag");
    }

    if (flags.indexOf(flag, i + 1) > -1) {
      this.raise(state.start, "Duplicate regular expression flag");
    }
  }
};
/**
    * Validate the pattern part of a given RegExpLiteral.
    *
    * @param {RegExpValidationState} state The state to validate RegExp.
    * @returns {void}
    */


pp$8.validateRegExpPattern = function (state) {
  this.regexp_pattern(state); // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of
  // parsing contains a |GroupName|, reparse with the goal symbol
  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*
  // exception if _P_ did not conform to the grammar, if any elements of _P_
  // were not matched by the parse, or if any Early Error conditions exist.

  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
    state.switchN = true;
    this.regexp_pattern(state);
  }
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern


pp$8.regexp_pattern = function (state) {
  state.pos = 0;
  state.lastIntValue = 0;
  state.lastStringValue = "";
  state.lastAssertionIsQuantifiable = false;
  state.numCapturingParens = 0;
  state.maxBackReference = 0;
  state.groupNames.length = 0;
  state.backReferenceNames.length = 0;
  this.regexp_disjunction(state);

  if (state.pos !== state.source.length) {
    // Make the same messages as V8.
    if (state.eat(0x29
    /* ) */))
    {
      state.raise("Unmatched ')'");
    }

    if (state.eat(0x5D
    /* ] */) ||
    state.eat(0x7D
    /* } */))
    {
      state.raise("Lone quantifier brackets");
    }
  }

  if (state.maxBackReference > state.numCapturingParens) {
    state.raise("Invalid escape");
  }

  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {
    var name = list[i];

    if (state.groupNames.indexOf(name) === -1) {
      state.raise("Invalid named capture referenced");
    }
  }
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction


pp$8.regexp_disjunction = function (state) {
  this.regexp_alternative(state);

  while (state.eat(0x7C
  /* | */))
  {
    this.regexp_alternative(state);
  } // Make the same message as V8.


  if (this.regexp_eatQuantifier(state, true)) {
    state.raise("Nothing to repeat");
  }

  if (state.eat(0x7B
  /* { */))
  {
    state.raise("Lone quantifier brackets");
  }
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative


pp$8.regexp_alternative = function (state) {
  while (state.pos < state.source.length && this.regexp_eatTerm(state)) {}
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term


pp$8.regexp_eatTerm = function (state) {
  if (this.regexp_eatAssertion(state)) {
    // Handle `QuantifiableAssertion Quantifier` alternative.
    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion
    // is a QuantifiableAssertion.
    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
      // Make the same message as V8.
      if (state.switchU) {
        state.raise("Invalid quantifier");
      }
    }

    return true;
  }

  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
    this.regexp_eatQuantifier(state);
    return true;
  }

  return false;
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion


pp$8.regexp_eatAssertion = function (state) {
  var start = state.pos;
  state.lastAssertionIsQuantifiable = false; // ^, $

  if (state.eat(0x5E
  /* ^ */) ||
  state.eat(0x24
  /* $ */))
  {
    return true;
  } // \b \B


  if (state.eat(0x5C
  /* \ */))
  {
    if (state.eat(0x42
    /* B */) ||
    state.eat(0x62
    /* b */))
    {
      return true;
    }

    state.pos = start;
  } // Lookahead / Lookbehind


  if (state.eat(0x28
  /* ( */) &&
  state.eat(0x3F
  /* ? */))
  {
    var lookbehind = false;

    if (this.options.ecmaVersion >= 9) {
      lookbehind = state.eat(0x3C
      /* < */);

    }

    if (state.eat(0x3D
    /* = */) ||
    state.eat(0x21
    /* ! */))
    {
      this.regexp_disjunction(state);

      if (!state.eat(0x29
      /* ) */))
      {
        state.raise("Unterminated group");
      }

      state.lastAssertionIsQuantifiable = !lookbehind;
      return true;
    }
  }

  state.pos = start;
  return false;
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier


pp$8.regexp_eatQuantifier = function (state, noError) {
  if (noError === void 0) noError = false;

  if (this.regexp_eatQuantifierPrefix(state, noError)) {
    state.eat(0x3F
    /* ? */);

    return true;
  }

  return false;
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix


pp$8.regexp_eatQuantifierPrefix = function (state, noError) {
  return state.eat(0x2A
  /* * */) ||
  state.eat(0x2B
  /* + */) ||
  state.eat(0x3F
  /* ? */) ||
  this.regexp_eatBracedQuantifier(state, noError);
};

pp$8.regexp_eatBracedQuantifier = function (state, noError) {
  var start = state.pos;

  if (state.eat(0x7B
  /* { */))
  {
    var min = 0,
    max = -1;

    if (this.regexp_eatDecimalDigits(state)) {
      min = state.lastIntValue;

      if (state.eat(0x2C
      /* , */) &&
      this.regexp_eatDecimalDigits(state)) {
        max = state.lastIntValue;
      }

      if (state.eat(0x7D
      /* } */))
      {
        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term
        if (max !== -1 && max < min && !noError) {
          state.raise("numbers out of order in {} quantifier");
        }

        return true;
      }
    }

    if (state.switchU && !noError) {
      state.raise("Incomplete quantifier");
    }

    state.pos = start;
  }

  return false;
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Atom


pp$8.regexp_eatAtom = function (state) {
  return this.regexp_eatPatternCharacters(state) || state.eat(0x2E
  /* . */) ||
  this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
};

pp$8.regexp_eatReverseSolidusAtomEscape = function (state) {
  var start = state.pos;

  if (state.eat(0x5C
  /* \ */))
  {
    if (this.regexp_eatAtomEscape(state)) {
      return true;
    }

    state.pos = start;
  }

  return false;
};

pp$8.regexp_eatUncapturingGroup = function (state) {
  var start = state.pos;

  if (state.eat(0x28
  /* ( */))
  {
    if (state.eat(0x3F
    /* ? */) &&
    state.eat(0x3A
    /* : */))
    {
      this.regexp_disjunction(state);

      if (state.eat(0x29
      /* ) */))
      {
        return true;
      }

      state.raise("Unterminated group");
    }

    state.pos = start;
  }

  return false;
};

pp$8.regexp_eatCapturingGroup = function (state) {
  if (state.eat(0x28
  /* ( */))
  {
    if (this.options.ecmaVersion >= 9) {
      this.regexp_groupSpecifier(state);
    } else if (state.current() === 0x3F
    /* ? */)
      {
        state.raise("Invalid group");
      }

    this.regexp_disjunction(state);

    if (state.eat(0x29
    /* ) */))
    {
      state.numCapturingParens += 1;
      return true;
    }

    state.raise("Unterminated group");
  }

  return false;
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom


pp$8.regexp_eatExtendedAtom = function (state) {
  return state.eat(0x2E
  /* . */) ||
  this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier


pp$8.regexp_eatInvalidBracedQuantifier = function (state) {
  if (this.regexp_eatBracedQuantifier(state, true)) {
    state.raise("Nothing to repeat");
  }

  return false;
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter


pp$8.regexp_eatSyntaxCharacter = function (state) {
  var ch = state.current();

  if (isSyntaxCharacter(ch)) {
    state.lastIntValue = ch;
    state.advance();
    return true;
  }

  return false;
};

function isSyntaxCharacter(ch) {
  return ch === 0x24
  /* $ */ ||
  ch >= 0x28
  /* ( */ &&
  ch <= 0x2B
  /* + */ ||
  ch === 0x2E
  /* . */ ||
  ch === 0x3F
  /* ? */ ||
  ch >= 0x5B
  /* [ */ &&
  ch <= 0x5E
  /* ^ */ ||
  ch >= 0x7B
  /* { */ &&
  ch <= 0x7D
  /* } */;

} // https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter
// But eat eager.


pp$8.regexp_eatPatternCharacters = function (state) {
  var start = state.pos;
  var ch = 0;

  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
    state.advance();
  }

  return state.pos !== start;
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter


pp$8.regexp_eatExtendedPatternCharacter = function (state) {
  var ch = state.current();

  if (ch !== -1 && ch !== 0x24
  /* $ */ &&
  !(ch >= 0x28
  /* ( */ &&
  ch <= 0x2B
  /* + */) &&
  ch !== 0x2E
  /* . */ &&
  ch !== 0x3F
  /* ? */ &&
  ch !== 0x5B
  /* [ */ &&
  ch !== 0x5E
  /* ^ */ &&
  ch !== 0x7C
  /* | */)
    {
      state.advance();
      return true;
    }

  return false;
}; // GroupSpecifier ::
//   [empty]
//   `?` GroupName


pp$8.regexp_groupSpecifier = function (state) {
  if (state.eat(0x3F
  /* ? */))
  {
    if (this.regexp_eatGroupName(state)) {
      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
        state.raise("Duplicate capture group name");
      }

      state.groupNames.push(state.lastStringValue);
      return;
    }

    state.raise("Invalid group");
  }
}; // GroupName ::
//   `<` RegExpIdentifierName `>`
// Note: this updates `state.lastStringValue` property with the eaten name.


pp$8.regexp_eatGroupName = function (state) {
  state.lastStringValue = "";

  if (state.eat(0x3C
  /* < */))
  {
    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E
    /* > */))
    {
      return true;
    }

    state.raise("Invalid capture group name");
  }

  return false;
}; // RegExpIdentifierName ::
//   RegExpIdentifierStart
//   RegExpIdentifierName RegExpIdentifierPart
// Note: this updates `state.lastStringValue` property with the eaten name.


pp$8.regexp_eatRegExpIdentifierName = function (state) {
  state.lastStringValue = "";

  if (this.regexp_eatRegExpIdentifierStart(state)) {
    state.lastStringValue += codePointToString(state.lastIntValue);

    while (this.regexp_eatRegExpIdentifierPart(state)) {
      state.lastStringValue += codePointToString(state.lastIntValue);
    }

    return true;
  }

  return false;
}; // RegExpIdentifierStart ::
//   UnicodeIDStart
//   `$`
//   `_`
//   `\` RegExpUnicodeEscapeSequence[+U]


pp$8.regexp_eatRegExpIdentifierStart = function (state) {
  var start = state.pos;
  var forceU = this.options.ecmaVersion >= 11;
  var ch = state.current(forceU);
  state.advance(forceU);

  if (ch === 0x5C
  /* \ */ &&
  this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
    ch = state.lastIntValue;
  }

  if (isRegExpIdentifierStart(ch)) {
    state.lastIntValue = ch;
    return true;
  }

  state.pos = start;
  return false;
};

function isRegExpIdentifierStart(ch) {
  return isIdentifierStart(ch, true) || ch === 0x24
  /* $ */ ||
  ch === 0x5F;
  /* _ */
} // RegExpIdentifierPart ::
//   UnicodeIDContinue
//   `$`
//   `_`
//   `\` RegExpUnicodeEscapeSequence[+U]
//   <ZWNJ>
//   <ZWJ>


pp$8.regexp_eatRegExpIdentifierPart = function (state) {
  var start = state.pos;
  var forceU = this.options.ecmaVersion >= 11;
  var ch = state.current(forceU);
  state.advance(forceU);

  if (ch === 0x5C
  /* \ */ &&
  this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
    ch = state.lastIntValue;
  }

  if (isRegExpIdentifierPart(ch)) {
    state.lastIntValue = ch;
    return true;
  }

  state.pos = start;
  return false;
};

function isRegExpIdentifierPart(ch) {
  return isIdentifierChar(ch, true) || ch === 0x24
  /* $ */ ||
  ch === 0x5F
  /* _ */ ||
  ch === 0x200C
  /* <ZWNJ> */ ||
  ch === 0x200D;
  /* <ZWJ> */
} // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape


pp$8.regexp_eatAtomEscape = function (state) {
  if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {
    return true;
  }

  if (state.switchU) {
    // Make the same message as V8.
    if (state.current() === 0x63
    /* c */)
      {
        state.raise("Invalid unicode escape");
      }

    state.raise("Invalid escape");
  }

  return false;
};

pp$8.regexp_eatBackReference = function (state) {
  var start = state.pos;

  if (this.regexp_eatDecimalEscape(state)) {
    var n = state.lastIntValue;

    if (state.switchU) {
      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape
      if (n > state.maxBackReference) {
        state.maxBackReference = n;
      }

      return true;
    }

    if (n <= state.numCapturingParens) {
      return true;
    }

    state.pos = start;
  }

  return false;
};

pp$8.regexp_eatKGroupName = function (state) {
  if (state.eat(0x6B
  /* k */))
  {
    if (this.regexp_eatGroupName(state)) {
      state.backReferenceNames.push(state.lastStringValue);
      return true;
    }

    state.raise("Invalid named reference");
  }

  return false;
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape


pp$8.regexp_eatCharacterEscape = function (state) {
  return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
};

pp$8.regexp_eatCControlLetter = function (state) {
  var start = state.pos;

  if (state.eat(0x63
  /* c */))
  {
    if (this.regexp_eatControlLetter(state)) {
      return true;
    }

    state.pos = start;
  }

  return false;
};

pp$8.regexp_eatZero = function (state) {
  if (state.current() === 0x30
  /* 0 */ &&
  !isDecimalDigit(state.lookahead())) {
    state.lastIntValue = 0;
    state.advance();
    return true;
  }

  return false;
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape


pp$8.regexp_eatControlEscape = function (state) {
  var ch = state.current();

  if (ch === 0x74
  /* t */)
    {
      state.lastIntValue = 0x09;
      /* \t */

      state.advance();
      return true;
    }

  if (ch === 0x6E
  /* n */)
    {
      state.lastIntValue = 0x0A;
      /* \n */

      state.advance();
      return true;
    }

  if (ch === 0x76
  /* v */)
    {
      state.lastIntValue = 0x0B;
      /* \v */

      state.advance();
      return true;
    }

  if (ch === 0x66
  /* f */)
    {
      state.lastIntValue = 0x0C;
      /* \f */

      state.advance();
      return true;
    }

  if (ch === 0x72
  /* r */)
    {
      state.lastIntValue = 0x0D;
      /* \r */

      state.advance();
      return true;
    }

  return false;
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter


pp$8.regexp_eatControlLetter = function (state) {
  var ch = state.current();

  if (isControlLetter(ch)) {
    state.lastIntValue = ch % 0x20;
    state.advance();
    return true;
  }

  return false;
};

function isControlLetter(ch) {
  return ch >= 0x41
  /* A */ &&
  ch <= 0x5A
  /* Z */ ||
  ch >= 0x61
  /* a */ &&
  ch <= 0x7A
  /* z */;

} // https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence


pp$8.regexp_eatRegExpUnicodeEscapeSequence = function (state, forceU) {
  if (forceU === void 0) forceU = false;
  var start = state.pos;
  var switchU = forceU || state.switchU;

  if (state.eat(0x75
  /* u */))
  {
    if (this.regexp_eatFixedHexDigits(state, 4)) {
      var lead = state.lastIntValue;

      if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {
        var leadSurrogateEnd = state.pos;

        if (state.eat(0x5C
        /* \ */) &&
        state.eat(0x75
        /* u */) &&
        this.regexp_eatFixedHexDigits(state, 4)) {
          var trail = state.lastIntValue;

          if (trail >= 0xDC00 && trail <= 0xDFFF) {
            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
            return true;
          }
        }

        state.pos = leadSurrogateEnd;
        state.lastIntValue = lead;
      }

      return true;
    }

    if (switchU && state.eat(0x7B
    /* { */) &&
    this.regexp_eatHexDigits(state) && state.eat(0x7D
    /* } */) &&
    isValidUnicode(state.lastIntValue)) {
      return true;
    }

    if (switchU) {
      state.raise("Invalid unicode escape");
    }

    state.pos = start;
  }

  return false;
};

function isValidUnicode(ch) {
  return ch >= 0 && ch <= 0x10FFFF;
} // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape


pp$8.regexp_eatIdentityEscape = function (state) {
  if (state.switchU) {
    if (this.regexp_eatSyntaxCharacter(state)) {
      return true;
    }

    if (state.eat(0x2F
    /* / */))
    {
      state.lastIntValue = 0x2F;
      /* / */

      return true;
    }

    return false;
  }

  var ch = state.current();

  if (ch !== 0x63
  /* c */ && (
  !state.switchN || ch !== 0x6B
  /* k */))
  {
    state.lastIntValue = ch;
    state.advance();
    return true;
  }

  return false;
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape


pp$8.regexp_eatDecimalEscape = function (state) {
  state.lastIntValue = 0;
  var ch = state.current();

  if (ch >= 0x31
  /* 1 */ &&
  ch <= 0x39
  /* 9 */)
    {
      do {
        state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30
        /* 0 */);

        state.advance();
      } while ((ch = state.current()) >= 0x30
      /* 0 */ &&
      ch <= 0x39
      /* 9 */);


      return true;
    }

  return false;
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape


pp$8.regexp_eatCharacterClassEscape = function (state) {
  var ch = state.current();

  if (isCharacterClassEscape(ch)) {
    state.lastIntValue = -1;
    state.advance();
    return true;
  }

  if (state.switchU && this.options.ecmaVersion >= 9 && (ch === 0x50
  /* P */ ||
  ch === 0x70
  /* p */))
  {
    state.lastIntValue = -1;
    state.advance();

    if (state.eat(0x7B
    /* { */) &&
    this.regexp_eatUnicodePropertyValueExpression(state) && state.eat(0x7D
    /* } */))
    {
      return true;
    }

    state.raise("Invalid property name");
  }

  return false;
};

function isCharacterClassEscape(ch) {
  return ch === 0x64
  /* d */ ||
  ch === 0x44
  /* D */ ||
  ch === 0x73
  /* s */ ||
  ch === 0x53
  /* S */ ||
  ch === 0x77
  /* w */ ||
  ch === 0x57
  /* W */;

} // UnicodePropertyValueExpression ::
//   UnicodePropertyName `=` UnicodePropertyValue
//   LoneUnicodePropertyNameOrValue


pp$8.regexp_eatUnicodePropertyValueExpression = function (state) {
  var start = state.pos; // UnicodePropertyName `=` UnicodePropertyValue

  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D
  /* = */))
  {
    var name = state.lastStringValue;

    if (this.regexp_eatUnicodePropertyValue(state)) {
      var value = state.lastStringValue;
      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
      return true;
    }
  }

  state.pos = start; // LoneUnicodePropertyNameOrValue

  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
    var nameOrValue = state.lastStringValue;
    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
    return true;
  }

  return false;
};

pp$8.regexp_validateUnicodePropertyNameAndValue = function (state, name, value) {
  if (!has(state.unicodeProperties.nonBinary, name)) {
    state.raise("Invalid property name");
  }

  if (!state.unicodeProperties.nonBinary[name].test(value)) {
    state.raise("Invalid property value");
  }
};

pp$8.regexp_validateUnicodePropertyNameOrValue = function (state, nameOrValue) {
  if (!state.unicodeProperties.binary.test(nameOrValue)) {
    state.raise("Invalid property name");
  }
}; // UnicodePropertyName ::
//   UnicodePropertyNameCharacters


pp$8.regexp_eatUnicodePropertyName = function (state) {
  var ch = 0;
  state.lastStringValue = "";

  while (isUnicodePropertyNameCharacter(ch = state.current())) {
    state.lastStringValue += codePointToString(ch);
    state.advance();
  }

  return state.lastStringValue !== "";
};

function isUnicodePropertyNameCharacter(ch) {
  return isControlLetter(ch) || ch === 0x5F;
  /* _ */
} // UnicodePropertyValue ::
//   UnicodePropertyValueCharacters


pp$8.regexp_eatUnicodePropertyValue = function (state) {
  var ch = 0;
  state.lastStringValue = "";

  while (isUnicodePropertyValueCharacter(ch = state.current())) {
    state.lastStringValue += codePointToString(ch);
    state.advance();
  }

  return state.lastStringValue !== "";
};

function isUnicodePropertyValueCharacter(ch) {
  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
} // LoneUnicodePropertyNameOrValue ::
//   UnicodePropertyValueCharacters


pp$8.regexp_eatLoneUnicodePropertyNameOrValue = function (state) {
  return this.regexp_eatUnicodePropertyValue(state);
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass


pp$8.regexp_eatCharacterClass = function (state) {
  if (state.eat(0x5B
  /* [ */))
  {
    state.eat(0x5E
    /* ^ */);

    this.regexp_classRanges(state);

    if (state.eat(0x5D
    /* ] */))
    {
      return true;
    } // Unreachable since it threw "unterminated regular expression" error before.


    state.raise("Unterminated character class");
  }

  return false;
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges
// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges
// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash


pp$8.regexp_classRanges = function (state) {
  while (this.regexp_eatClassAtom(state)) {
    var left = state.lastIntValue;

    if (state.eat(0x2D
    /* - */) &&
    this.regexp_eatClassAtom(state)) {
      var right = state.lastIntValue;

      if (state.switchU && (left === -1 || right === -1)) {
        state.raise("Invalid character class");
      }

      if (left !== -1 && right !== -1 && left > right) {
        state.raise("Range out of order in character class");
      }
    }
  }
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom
// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash


pp$8.regexp_eatClassAtom = function (state) {
  var start = state.pos;

  if (state.eat(0x5C
  /* \ */))
  {
    if (this.regexp_eatClassEscape(state)) {
      return true;
    }

    if (state.switchU) {
      // Make the same message as V8.
      var ch$1 = state.current();

      if (ch$1 === 0x63
      /* c */ ||
      isOctalDigit(ch$1)) {
        state.raise("Invalid class escape");
      }

      state.raise("Invalid escape");
    }

    state.pos = start;
  }

  var ch = state.current();

  if (ch !== 0x5D
  /* ] */)
    {
      state.lastIntValue = ch;
      state.advance();
      return true;
    }

  return false;
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape


pp$8.regexp_eatClassEscape = function (state) {
  var start = state.pos;

  if (state.eat(0x62
  /* b */))
  {
    state.lastIntValue = 0x08;
    /* <BS> */

    return true;
  }

  if (state.switchU && state.eat(0x2D
  /* - */))
  {
    state.lastIntValue = 0x2D;
    /* - */

    return true;
  }

  if (!state.switchU && state.eat(0x63
  /* c */))
  {
    if (this.regexp_eatClassControlLetter(state)) {
      return true;
    }

    state.pos = start;
  }

  return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter


pp$8.regexp_eatClassControlLetter = function (state) {
  var ch = state.current();

  if (isDecimalDigit(ch) || ch === 0x5F
  /* _ */)
    {
      state.lastIntValue = ch % 0x20;
      state.advance();
      return true;
    }

  return false;
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence


pp$8.regexp_eatHexEscapeSequence = function (state) {
  var start = state.pos;

  if (state.eat(0x78
  /* x */))
  {
    if (this.regexp_eatFixedHexDigits(state, 2)) {
      return true;
    }

    if (state.switchU) {
      state.raise("Invalid escape");
    }

    state.pos = start;
  }

  return false;
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits


pp$8.regexp_eatDecimalDigits = function (state) {
  var start = state.pos;
  var ch = 0;
  state.lastIntValue = 0;

  while (isDecimalDigit(ch = state.current())) {
    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30
    /* 0 */);

    state.advance();
  }

  return state.pos !== start;
};

function isDecimalDigit(ch) {
  return ch >= 0x30
  /* 0 */ &&
  ch <= 0x39;
  /* 9 */
} // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits


pp$8.regexp_eatHexDigits = function (state) {
  var start = state.pos;
  var ch = 0;
  state.lastIntValue = 0;

  while (isHexDigit(ch = state.current())) {
    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
    state.advance();
  }

  return state.pos !== start;
};

function isHexDigit(ch) {
  return ch >= 0x30
  /* 0 */ &&
  ch <= 0x39
  /* 9 */ ||
  ch >= 0x41
  /* A */ &&
  ch <= 0x46
  /* F */ ||
  ch >= 0x61
  /* a */ &&
  ch <= 0x66
  /* f */;

}

function hexToInt(ch) {
  if (ch >= 0x41
  /* A */ &&
  ch <= 0x46
  /* F */)
    {
      return 10 + (ch - 0x41
      /* A */);

    }

  if (ch >= 0x61
  /* a */ &&
  ch <= 0x66
  /* f */)
    {
      return 10 + (ch - 0x61
      /* a */);

    }

  return ch - 0x30;
  /* 0 */
} // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence
// Allows only 0-377(octal) i.e. 0-255(decimal).


pp$8.regexp_eatLegacyOctalEscapeSequence = function (state) {
  if (this.regexp_eatOctalDigit(state)) {
    var n1 = state.lastIntValue;

    if (this.regexp_eatOctalDigit(state)) {
      var n2 = state.lastIntValue;

      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
      } else {
        state.lastIntValue = n1 * 8 + n2;
      }
    } else {
      state.lastIntValue = n1;
    }

    return true;
  }

  return false;
}; // https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit


pp$8.regexp_eatOctalDigit = function (state) {
  var ch = state.current();

  if (isOctalDigit(ch)) {
    state.lastIntValue = ch - 0x30;
    /* 0 */

    state.advance();
    return true;
  }

  state.lastIntValue = 0;
  return false;
};

function isOctalDigit(ch) {
  return ch >= 0x30
  /* 0 */ &&
  ch <= 0x37;
  /* 7 */
} // https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits
// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit
// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence


pp$8.regexp_eatFixedHexDigits = function (state, length) {
  var start = state.pos;
  state.lastIntValue = 0;

  for (var i = 0; i < length; ++i) {
    var ch = state.current();

    if (!isHexDigit(ch)) {
      state.pos = start;
      return false;
    }

    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
    state.advance();
  }

  return true;
}; // Object type used to represent tokens. Note that normally, tokens
// simply exist as properties on the parser object. This is only
// used for the onToken callback and the external tokenizer.


var Token = function Token(p) {
  this.type = p.type;
  this.value = p.value;
  this.start = p.start;
  this.end = p.end;

  if (p.options.locations) {
    this.loc = new SourceLocation(p, p.startLoc, p.endLoc);
  }

  if (p.options.ranges) {
    this.range = [p.start, p.end];
  }
}; // ## Tokenizer


var pp$9 = Parser.prototype; // Move to the next token

pp$9.next = function (ignoreEscapeSequenceInKeyword) {
  if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc) {
    this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword);
  }

  if (this.options.onToken) {
    this.options.onToken(new Token(this));
  }

  this.lastTokEnd = this.end;
  this.lastTokStart = this.start;
  this.lastTokEndLoc = this.endLoc;
  this.lastTokStartLoc = this.startLoc;
  this.nextToken();
};

pp$9.getToken = function () {
  this.next();
  return new Token(this);
}; // If we're in an ES6 environment, make parsers iterable


if (typeof Symbol !== "undefined") {
  pp$9[Symbol.iterator] = function () {
    var this$1 = this;
    return {
      next: function () {
        var token = this$1.getToken();
        return {
          done: token.type === types.eof,
          value: token };

      } };

  };
} // Toggle strict mode. Re-reads the next number or string to please
// pedantic tests (`"use strict"; 010;` should fail).


pp$9.curContext = function () {
  return this.context[this.context.length - 1];
}; // Read a single token, updating the parser object's token-related
// properties.


pp$9.nextToken = function () {
  var curContext = this.curContext();

  if (!curContext || !curContext.preserveSpace) {
    this.skipSpace();
  }

  this.start = this.pos;

  if (this.options.locations) {
    this.startLoc = this.curPosition();
  }

  if (this.pos >= this.input.length) {
    return this.finishToken(types.eof);
  }

  if (curContext.override) {
    return curContext.override(this);
  } else {
    this.readToken(this.fullCharCodeAtPos());
  }
};

pp$9.readToken = function (code) {
  // Identifier or keyword. '\uXXXX' sequences are allowed in
  // identifiers, so '\' also dispatches to that.
  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92
  /* '\' */)
    {
      return this.readWord();
    }

  return this.getTokenFromCode(code);
};

pp$9.fullCharCodeAtPos = function () {
  var code = this.input.charCodeAt(this.pos);

  if (code <= 0xd7ff || code >= 0xe000) {
    return code;
  }

  var next = this.input.charCodeAt(this.pos + 1);
  return (code << 10) + next - 0x35fdc00;
};

pp$9.skipBlockComment = function () {
  var startLoc = this.options.onComment && this.curPosition();
  var start = this.pos,
  end = this.input.indexOf("*/", this.pos += 2);

  if (end === -1) {
    this.raise(this.pos - 2, "Unterminated comment");
  }

  this.pos = end + 2;

  if (this.options.locations) {
    lineBreakG.lastIndex = start;
    var match;

    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {
      ++this.curLine;
      this.lineStart = match.index + match[0].length;
    }
  }

  if (this.options.onComment) {
    this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
  }
};

pp$9.skipLineComment = function (startSkip) {
  var start = this.pos;
  var startLoc = this.options.onComment && this.curPosition();
  var ch = this.input.charCodeAt(this.pos += startSkip);

  while (this.pos < this.input.length && !isNewLine(ch)) {
    ch = this.input.charCodeAt(++this.pos);
  }

  if (this.options.onComment) {
    this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
  }
}; // Called at the start of the parse and after every token. Skips
// whitespace and comments, and.


pp$9.skipSpace = function () {
  loop: while (this.pos < this.input.length) {
    var ch = this.input.charCodeAt(this.pos);

    switch (ch) {
      case 32:
      case 160:
        // ' '
        ++this.pos;
        break;

      case 13:
        if (this.input.charCodeAt(this.pos + 1) === 10) {
          ++this.pos;
        }

      case 10:
      case 8232:
      case 8233:
        ++this.pos;

        if (this.options.locations) {
          ++this.curLine;
          this.lineStart = this.pos;
        }

        break;

      case 47:
        // '/'
        switch (this.input.charCodeAt(this.pos + 1)) {
          case 42:
            // '*'
            this.skipBlockComment();
            break;

          case 47:
            this.skipLineComment(2);
            break;

          default:
            break loop;}


        break;

      default:
        if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
          ++this.pos;
        } else {
          break loop;
        }}


  }
}; // Called at the end of every token. Sets `end`, `val`, and
// maintains `context` and `exprAllowed`, and skips the space after
// the token, so that the next one's `start` will point at the
// right position.


pp$9.finishToken = function (type, val) {
  this.end = this.pos;

  if (this.options.locations) {
    this.endLoc = this.curPosition();
  }

  var prevType = this.type;
  this.type = type;
  this.value = val;
  this.updateContext(prevType);
}; // ### Token reading
// This is the function that is called to fetch the next token. It
// is somewhat obscure, because it works in character codes rather
// than characters, and because operator parsing has been inlined
// into it.
//
// All in the name of speed.
//


pp$9.readToken_dot = function () {
  var next = this.input.charCodeAt(this.pos + 1);

  if (next >= 48 && next <= 57) {
    return this.readNumber(true);
  }

  var next2 = this.input.charCodeAt(this.pos + 2);

  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
    // 46 = dot '.'
    this.pos += 3;
    return this.finishToken(types.ellipsis);
  } else {
    ++this.pos;
    return this.finishToken(types.dot);
  }
};

pp$9.readToken_slash = function () {
  // '/'
  var next = this.input.charCodeAt(this.pos + 1);

  if (this.exprAllowed) {
    ++this.pos;
    return this.readRegexp();
  }

  if (next === 61) {
    return this.finishOp(types.assign, 2);
  }

  return this.finishOp(types.slash, 1);
};

pp$9.readToken_mult_modulo_exp = function (code) {
  // '%*'
  var next = this.input.charCodeAt(this.pos + 1);
  var size = 1;
  var tokentype = code === 42 ? types.star : types.modulo; // exponentiation operator ** and **=

  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
    ++size;
    tokentype = types.starstar;
    next = this.input.charCodeAt(this.pos + 2);
  }

  if (next === 61) {
    return this.finishOp(types.assign, size + 1);
  }

  return this.finishOp(tokentype, size);
};

pp$9.readToken_pipe_amp = function (code) {
  // '|&'
  var next = this.input.charCodeAt(this.pos + 1);

  if (next === code) {
    return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);
  }

  if (next === 61) {
    return this.finishOp(types.assign, 2);
  }

  return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);
};

pp$9.readToken_caret = function () {
  // '^'
  var next = this.input.charCodeAt(this.pos + 1);

  if (next === 61) {
    return this.finishOp(types.assign, 2);
  }

  return this.finishOp(types.bitwiseXOR, 1);
};

pp$9.readToken_plus_min = function (code) {
  // '+-'
  var next = this.input.charCodeAt(this.pos + 1);

  if (next === code) {
    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
      // A `-->` line comment
      this.skipLineComment(3);
      this.skipSpace();
      return this.nextToken();
    }

    return this.finishOp(types.incDec, 2);
  }

  if (next === 61) {
    return this.finishOp(types.assign, 2);
  }

  return this.finishOp(types.plusMin, 1);
};

pp$9.readToken_lt_gt = function (code) {
  // '<>'
  var next = this.input.charCodeAt(this.pos + 1);
  var size = 1;

  if (next === code) {
    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;

    if (this.input.charCodeAt(this.pos + size) === 61) {
      return this.finishOp(types.assign, size + 1);
    }

    return this.finishOp(types.bitShift, size);
  }

  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {
    // `<!--`, an XML-style comment that should be interpreted as a line comment
    this.skipLineComment(4);
    this.skipSpace();
    return this.nextToken();
  }

  if (next === 61) {
    size = 2;
  }

  return this.finishOp(types.relational, size);
};

pp$9.readToken_eq_excl = function (code) {
  // '=!'
  var next = this.input.charCodeAt(this.pos + 1);

  if (next === 61) {
    return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
  }

  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
    // '=>'
    this.pos += 2;
    return this.finishToken(types.arrow);
  }

  return this.finishOp(code === 61 ? types.eq : types.prefix, 1);
};

pp$9.readToken_question = function () {
  // '?'
  if (this.options.ecmaVersion >= 11) {
    var next = this.input.charCodeAt(this.pos + 1);

    if (next === 46) {
      var next2 = this.input.charCodeAt(this.pos + 2);

      if (next2 < 48 || next2 > 57) {
        return this.finishOp(types.questionDot, 2);
      }
    }

    if (next === 63) {
      return this.finishOp(types.coalesce, 2);
    }
  }

  return this.finishOp(types.question, 1);
};

pp$9.getTokenFromCode = function (code) {
  switch (code) {
    // The interpretation of a dot depends on whether it is followed
    // by a digit or another two dots.
    case 46:
      // '.'
      return this.readToken_dot();
    // Punctuation tokens.

    case 40:
      ++this.pos;
      return this.finishToken(types.parenL);

    case 41:
      ++this.pos;
      return this.finishToken(types.parenR);

    case 59:
      ++this.pos;
      return this.finishToken(types.semi);

    case 44:
      ++this.pos;
      return this.finishToken(types.comma);

    case 91:
      ++this.pos;
      return this.finishToken(types.bracketL);

    case 93:
      ++this.pos;
      return this.finishToken(types.bracketR);

    case 123:
      ++this.pos;
      return this.finishToken(types.braceL);

    case 125:
      ++this.pos;
      return this.finishToken(types.braceR);

    case 58:
      ++this.pos;
      return this.finishToken(types.colon);

    case 96:
      // '`'
      if (this.options.ecmaVersion < 6) {
        break;
      }

      ++this.pos;
      return this.finishToken(types.backQuote);

    case 48:
      // '0'
      var next = this.input.charCodeAt(this.pos + 1);

      if (next === 120 || next === 88) {
        return this.readRadixNumber(16);
      } // '0x', '0X' - hex number


      if (this.options.ecmaVersion >= 6) {
        if (next === 111 || next === 79) {
          return this.readRadixNumber(8);
        } // '0o', '0O' - octal number


        if (next === 98 || next === 66) {
          return this.readRadixNumber(2);
        } // '0b', '0B' - binary number

      }

    // Anything else beginning with a digit is an integer, octal
    // number, or float.

    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      // 1-9
      return this.readNumber(false);
    // Quotes produce strings.

    case 34:
    case 39:
      // '"', "'"
      return this.readString(code);
    // Operators are parsed inline in tiny state machines. '=' (61) is
    // often referred to. `finishOp` simply skips the amount of
    // characters it is given as second argument, and returns a token
    // of the type given by its first argument.

    case 47:
      // '/'
      return this.readToken_slash();

    case 37:
    case 42:
      // '%*'
      return this.readToken_mult_modulo_exp(code);

    case 124:
    case 38:
      // '|&'
      return this.readToken_pipe_amp(code);

    case 94:
      // '^'
      return this.readToken_caret();

    case 43:
    case 45:
      // '+-'
      return this.readToken_plus_min(code);

    case 60:
    case 62:
      // '<>'
      return this.readToken_lt_gt(code);

    case 61:
    case 33:
      // '=!'
      return this.readToken_eq_excl(code);

    case 63:
      // '?'
      return this.readToken_question();

    case 126:
      // '~'
      return this.finishOp(types.prefix, 1);}


  this.raise(this.pos, "Unexpected character '" + codePointToString$1(code) + "'");
};

pp$9.finishOp = function (type, size) {
  var str = this.input.slice(this.pos, this.pos + size);
  this.pos += size;
  return this.finishToken(type, str);
};

pp$9.readRegexp = function () {
  var escaped,
  inClass,
  start = this.pos;

  for (;;) {
    if (this.pos >= this.input.length) {
      this.raise(start, "Unterminated regular expression");
    }

    var ch = this.input.charAt(this.pos);

    if (lineBreak.test(ch)) {
      this.raise(start, "Unterminated regular expression");
    }

    if (!escaped) {
      if (ch === "[") {
        inClass = true;
      } else if (ch === "]" && inClass) {
        inClass = false;
      } else if (ch === "/" && !inClass) {
        break;
      }

      escaped = ch === "\\";
    } else {
      escaped = false;
    }

    ++this.pos;
  }

  var pattern = this.input.slice(start, this.pos);
  ++this.pos;
  var flagsStart = this.pos;
  var flags = this.readWord1();

  if (this.containsEsc) {
    this.unexpected(flagsStart);
  } // Validate pattern


  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
  state.reset(start, pattern, flags);
  this.validateRegExpFlags(state);
  this.validateRegExpPattern(state); // Create Literal#value property value.

  var value = null;

  try {
    value = new RegExp(pattern, flags);
  } catch (e) {// ESTree requires null if it failed to instantiate RegExp object.
    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral
  }

  return this.finishToken(types.regexp, {
    pattern: pattern,
    flags: flags,
    value: value });

}; // Read an integer in the given radix. Return null if zero digits
// were read, the integer value otherwise. When `len` is given, this
// will return `null` unless the integer has exactly `len` digits.


pp$9.readInt = function (radix, len) {
  var start = this.pos,
  total = 0;

  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
    var code = this.input.charCodeAt(this.pos),
    val = void 0;

    if (code >= 97) {
      val = code - 97 + 10;
    } // a
    else if (code >= 65) {
        val = code - 65 + 10;
      } // A
      else if (code >= 48 && code <= 57) {
          val = code - 48;
        } // 0-9
        else {
            val = Infinity;
          }

    if (val >= radix) {
      break;
    }

    ++this.pos;
    total = total * radix + val;
  }

  if (this.pos === start || len != null && this.pos - start !== len) {
    return null;
  }

  return total;
};

pp$9.readRadixNumber = function (radix) {
  var start = this.pos;
  this.pos += 2; // 0x

  var val = this.readInt(radix);

  if (val == null) {
    this.raise(this.start + 2, "Expected number in radix " + radix);
  }

  if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
    val = typeof BigInt !== "undefined" ? BigInt(this.input.slice(start, this.pos)) : null;
    ++this.pos;
  } else if (isIdentifierStart(this.fullCharCodeAtPos())) {
    this.raise(this.pos, "Identifier directly after number");
  }

  return this.finishToken(types.num, val);
}; // Read an integer, octal integer, or floating-point number.


pp$9.readNumber = function (startsWithDot) {
  var start = this.pos;

  if (!startsWithDot && this.readInt(10) === null) {
    this.raise(start, "Invalid number");
  }

  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;

  if (octal && this.strict) {
    this.raise(start, "Invalid number");
  }

  var next = this.input.charCodeAt(this.pos);

  if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
    var str$1 = this.input.slice(start, this.pos);
    var val$1 = typeof BigInt !== "undefined" ? BigInt(str$1) : null;
    ++this.pos;

    if (isIdentifierStart(this.fullCharCodeAtPos())) {
      this.raise(this.pos, "Identifier directly after number");
    }

    return this.finishToken(types.num, val$1);
  }

  if (octal && /[89]/.test(this.input.slice(start, this.pos))) {
    octal = false;
  }

  if (next === 46 && !octal) {
    // '.'
    ++this.pos;
    this.readInt(10);
    next = this.input.charCodeAt(this.pos);
  }

  if ((next === 69 || next === 101) && !octal) {
    // 'eE'
    next = this.input.charCodeAt(++this.pos);

    if (next === 43 || next === 45) {
      ++this.pos;
    } // '+-'


    if (this.readInt(10) === null) {
      this.raise(start, "Invalid number");
    }
  }

  if (isIdentifierStart(this.fullCharCodeAtPos())) {
    this.raise(this.pos, "Identifier directly after number");
  }

  var str = this.input.slice(start, this.pos);
  var val = octal ? parseInt(str, 8) : parseFloat(str);
  return this.finishToken(types.num, val);
}; // Read a string value, interpreting backslash-escapes.


pp$9.readCodePoint = function () {
  var ch = this.input.charCodeAt(this.pos),
  code;

  if (ch === 123) {
    // '{'
    if (this.options.ecmaVersion < 6) {
      this.unexpected();
    }

    var codePos = ++this.pos;
    code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
    ++this.pos;

    if (code > 0x10FFFF) {
      this.invalidStringToken(codePos, "Code point out of bounds");
    }
  } else {
    code = this.readHexChar(4);
  }

  return code;
};

function codePointToString$1(code) {
  // UTF-16 Decoding
  if (code <= 0xFFFF) {
    return String.fromCharCode(code);
  }

  code -= 0x10000;
  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);
}

pp$9.readString = function (quote) {
  var out = "",
  chunkStart = ++this.pos;

  for (;;) {
    if (this.pos >= this.input.length) {
      this.raise(this.start, "Unterminated string constant");
    }

    var ch = this.input.charCodeAt(this.pos);

    if (ch === quote) {
      break;
    }

    if (ch === 92) {
      // '\'
      out += this.input.slice(chunkStart, this.pos);
      out += this.readEscapedChar(false);
      chunkStart = this.pos;
    } else {
      if (isNewLine(ch, this.options.ecmaVersion >= 10)) {
        this.raise(this.start, "Unterminated string constant");
      }

      ++this.pos;
    }
  }

  out += this.input.slice(chunkStart, this.pos++);
  return this.finishToken(types.string, out);
}; // Reads template string tokens.


var INVALID_TEMPLATE_ESCAPE_ERROR = {};

pp$9.tryReadTemplateToken = function () {
  this.inTemplateElement = true;

  try {
    this.readTmplToken();
  } catch (err) {
    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
      this.readInvalidTemplateToken();
    } else {
      throw err;
    }
  }

  this.inTemplateElement = false;
};

pp$9.invalidStringToken = function (position, message) {
  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
    throw INVALID_TEMPLATE_ESCAPE_ERROR;
  } else {
    this.raise(position, message);
  }
};

pp$9.readTmplToken = function () {
  var out = "",
  chunkStart = this.pos;

  for (;;) {
    if (this.pos >= this.input.length) {
      this.raise(this.start, "Unterminated template");
    }

    var ch = this.input.charCodeAt(this.pos);

    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
      // '`', '${'
      if (this.pos === this.start && (this.type === types.template || this.type === types.invalidTemplate)) {
        if (ch === 36) {
          this.pos += 2;
          return this.finishToken(types.dollarBraceL);
        } else {
          ++this.pos;
          return this.finishToken(types.backQuote);
        }
      }

      out += this.input.slice(chunkStart, this.pos);
      return this.finishToken(types.template, out);
    }

    if (ch === 92) {
      // '\'
      out += this.input.slice(chunkStart, this.pos);
      out += this.readEscapedChar(true);
      chunkStart = this.pos;
    } else if (isNewLine(ch)) {
      out += this.input.slice(chunkStart, this.pos);
      ++this.pos;

      switch (ch) {
        case 13:
          if (this.input.charCodeAt(this.pos) === 10) {
            ++this.pos;
          }

        case 10:
          out += "\n";
          break;

        default:
          out += String.fromCharCode(ch);
          break;}


      if (this.options.locations) {
        ++this.curLine;
        this.lineStart = this.pos;
      }

      chunkStart = this.pos;
    } else {
      ++this.pos;
    }
  }
}; // Reads a template token to search for the end, without validating any escape sequences


pp$9.readInvalidTemplateToken = function () {
  for (; this.pos < this.input.length; this.pos++) {
    switch (this.input[this.pos]) {
      case "\\":
        ++this.pos;
        break;

      case "$":
        if (this.input[this.pos + 1] !== "{") {
          break;
        }

      // falls through

      case "`":
        return this.finishToken(types.invalidTemplate, this.input.slice(this.start, this.pos));
      // no default
    }
  }

  this.raise(this.start, "Unterminated template");
}; // Used to read escaped characters


pp$9.readEscapedChar = function (inTemplate) {
  var ch = this.input.charCodeAt(++this.pos);
  ++this.pos;

  switch (ch) {
    case 110:
      return "\n";
    // 'n' -> '\n'

    case 114:
      return "\r";
    // 'r' -> '\r'

    case 120:
      return String.fromCharCode(this.readHexChar(2));
    // 'x'

    case 117:
      return codePointToString$1(this.readCodePoint());
    // 'u'

    case 116:
      return "\t";
    // 't' -> '\t'

    case 98:
      return "\b";
    // 'b' -> '\b'

    case 118:
      return "\u000b";
    // 'v' -> '\u000b'

    case 102:
      return "\f";
    // 'f' -> '\f'

    case 13:
      if (this.input.charCodeAt(this.pos) === 10) {
        ++this.pos;
      }

    // '\r\n'

    case 10:
      // ' \n'
      if (this.options.locations) {
        this.lineStart = this.pos;
        ++this.curLine;
      }

      return "";

    case 56:
    case 57:
      if (inTemplate) {
        var codePos = this.pos - 1;
        this.invalidStringToken(codePos, "Invalid escape sequence in template string");
        return null;
      }

    default:
      if (ch >= 48 && ch <= 55) {
        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
        var octal = parseInt(octalStr, 8);

        if (octal > 255) {
          octalStr = octalStr.slice(0, -1);
          octal = parseInt(octalStr, 8);
        }

        this.pos += octalStr.length - 1;
        ch = this.input.charCodeAt(this.pos);

        if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
          this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode");
        }

        return String.fromCharCode(octal);
      }

      if (isNewLine(ch)) {
        // Unicode new line characters after \ get removed from output in both
        // template literals and strings
        return "";
      }

      return String.fromCharCode(ch);}

}; // Used to read character escape sequences ('\x', '\u', '\U').


pp$9.readHexChar = function (len) {
  var codePos = this.pos;
  var n = this.readInt(16, len);

  if (n === null) {
    this.invalidStringToken(codePos, "Bad character escape sequence");
  }

  return n;
}; // Read an identifier, and return it as a string. Sets `this.containsEsc`
// to whether the word contained a '\u' escape.
//
// Incrementally adds only escaped chars, adding other chunks as-is
// as a micro-optimization.


pp$9.readWord1 = function () {
  this.containsEsc = false;
  var word = "",
  first = true,
  chunkStart = this.pos;
  var astral = this.options.ecmaVersion >= 6;

  while (this.pos < this.input.length) {
    var ch = this.fullCharCodeAtPos();

    if (isIdentifierChar(ch, astral)) {
      this.pos += ch <= 0xffff ? 1 : 2;
    } else if (ch === 92) {
      // "\"
      this.containsEsc = true;
      word += this.input.slice(chunkStart, this.pos);
      var escStart = this.pos;

      if (this.input.charCodeAt(++this.pos) !== 117) // "u"
        {
          this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX");
        }

      ++this.pos;
      var esc = this.readCodePoint();

      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {
        this.invalidStringToken(escStart, "Invalid Unicode escape");
      }

      word += codePointToString$1(esc);
      chunkStart = this.pos;
    } else {
      break;
    }

    first = false;
  }

  return word + this.input.slice(chunkStart, this.pos);
}; // Read an identifier or keyword token. Will check for reserved
// words when necessary.


pp$9.readWord = function () {
  var word = this.readWord1();
  var type = types.name;

  if (this.keywords.test(word)) {
    type = keywords$1[word];
  }

  return this.finishToken(type, word);
}; // Acorn is a tiny, fast JavaScript parser written in JavaScript.


var version = "7.3.1";
Parser.acorn = {
  Parser: Parser,
  version: version,
  defaultOptions: defaultOptions,
  Position: Position,
  SourceLocation: SourceLocation,
  getLineInfo: getLineInfo,
  Node: Node,
  TokenType: TokenType,
  tokTypes: types,
  keywordTypes: keywords$1,
  TokContext: TokContext,
  tokContexts: types$1,
  isIdentifierChar: isIdentifierChar,
  isIdentifierStart: isIdentifierStart,
  Token: Token,
  isNewLine: isNewLine,
  lineBreak: lineBreak,
  lineBreakG: lineBreakG,
  nonASCIIwhitespace: nonASCIIwhitespace };
// The main exported interface (under `self.acorn` when in the
// browser) is a `parse` function that takes a code string and
// returns an abstract syntax tree as specified by [Mozilla parser
// API][api].
//
// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API

function parse(input, options) {
  return Parser.parse(input, options);
} // This function tries to parse a single expression at a given

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function unwrapExports(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
  return module = {
    exports: {} },
  fn(module, module.exports), module.exports;
}

var polyfill = createCommonjsModule(function (module) {
  /**
                                                        * core-js 3.1.3
                                                        * https://github.com/zloirock/core-js
                                                        * License: http://rock.mit-license.org
                                                        * © 2019 Denis Pushkarev (zloirock.ru)
                                                        */
  !function (undefined$1) {
    /******/
    (function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/

      /******/
      // The require function

      /******/

      function __webpack_require__(moduleId) {
        /******/

        /******/
        // Check if module is in cache

        /******/
        if (installedModules[moduleId]) {
          /******/
          return installedModules[moduleId].exports;
          /******/
        }
        /******/
        // Create a new module (and put it into the cache)

        /******/


        var module = installedModules[moduleId] = {
          /******/
          i: moduleId,

          /******/
          l: false,

          /******/
          exports: {}
          /******/ };


        /******/

        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/

        /******/
        // Flag the module as loaded

        /******/

        module.l = true;
        /******/

        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/

      /******/

      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __webpack_require__.m = modules;
      /******/

      /******/
      // expose the module cache

      /******/

      __webpack_require__.c = installedModules;
      /******/

      /******/
      // define getter function for harmony exports

      /******/

      __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
          /******/
          Object.defineProperty(exports, name, {
            enumerable: true,
            get: getter });

          /******/
        }
        /******/

      };
      /******/

      /******/
      // define __esModule on exports

      /******/


      __webpack_require__.r = function (exports) {
        /******/
        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
          /******/
          Object.defineProperty(exports, Symbol.toStringTag, {
            value: 'Module' });

          /******/
        }
        /******/


        Object.defineProperty(exports, '__esModule', {
          value: true });

        /******/
      };
      /******/

      /******/
      // create a fake namespace object

      /******/
      // mode & 1: value is a module id, require it

      /******/
      // mode & 2: merge all properties of value into the ns

      /******/
      // mode & 4: return value when already ns object

      /******/
      // mode & 8|1: behave like require

      /******/


      __webpack_require__.t = function (value, mode) {
        /******/
        if (mode & 1) value = __webpack_require__(value);
        /******/

        if (mode & 8) return value;
        /******/

        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;
        /******/

        var ns = Object.create(null);
        /******/

        __webpack_require__.r(ns);
        /******/


        Object.defineProperty(ns, 'default', {
          enumerable: true,
          value: value });

        /******/

        if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {
          return value[key];
        }.bind(null, key));
        /******/

        return ns;
        /******/
      };
      /******/

      /******/
      // getDefaultExport function for compatibility with non-harmony modules

      /******/


      __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
        /******/
        function getDefault() {
          return module['default'];
        } :
        /******/
        function getModuleExports() {
          return module;
        };
        /******/

        __webpack_require__.d(getter, 'a', getter);
        /******/


        return getter;
        /******/
      };
      /******/

      /******/
      // Object.prototype.hasOwnProperty.call

      /******/


      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/

      /******/
      // __webpack_public_path__

      /******/


      __webpack_require__.p = "";
      /******/

      /******/

      /******/
      // Load entry module and return exports

      /******/

      return __webpack_require__(__webpack_require__.s = 0);
      /******/
    })(
    /************************************************************************/

    /******/
    [
    /* 0 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(1);

      __webpack_require__(56);

      __webpack_require__(57);

      __webpack_require__(58);

      __webpack_require__(59);

      __webpack_require__(60);

      __webpack_require__(61);

      __webpack_require__(62);

      __webpack_require__(63);

      __webpack_require__(64);

      __webpack_require__(65);

      __webpack_require__(66);

      __webpack_require__(67);

      __webpack_require__(68);

      __webpack_require__(69);

      __webpack_require__(70);

      __webpack_require__(74);

      __webpack_require__(77);

      __webpack_require__(82);

      __webpack_require__(84);

      __webpack_require__(85);

      __webpack_require__(86);

      __webpack_require__(87);

      __webpack_require__(89);

      __webpack_require__(90);

      __webpack_require__(92);

      __webpack_require__(100);

      __webpack_require__(101);

      __webpack_require__(102);

      __webpack_require__(103);

      __webpack_require__(111);

      __webpack_require__(112);

      __webpack_require__(114);

      __webpack_require__(115);

      __webpack_require__(116);

      __webpack_require__(118);

      __webpack_require__(119);

      __webpack_require__(120);

      __webpack_require__(121);

      __webpack_require__(122);

      __webpack_require__(123);

      __webpack_require__(126);

      __webpack_require__(127);

      __webpack_require__(128);

      __webpack_require__(129);

      __webpack_require__(135);

      __webpack_require__(136);

      __webpack_require__(138);

      __webpack_require__(139);

      __webpack_require__(140);

      __webpack_require__(142);

      __webpack_require__(143);

      __webpack_require__(145);

      __webpack_require__(146);

      __webpack_require__(148);

      __webpack_require__(149);

      __webpack_require__(150);

      __webpack_require__(151);

      __webpack_require__(158);

      __webpack_require__(160);

      __webpack_require__(161);

      __webpack_require__(162);

      __webpack_require__(164);

      __webpack_require__(165);

      __webpack_require__(167);

      __webpack_require__(168);

      __webpack_require__(170);

      __webpack_require__(171);

      __webpack_require__(172);

      __webpack_require__(173);

      __webpack_require__(174);

      __webpack_require__(175);

      __webpack_require__(176);

      __webpack_require__(177);

      __webpack_require__(178);

      __webpack_require__(179);

      __webpack_require__(180);

      __webpack_require__(183);

      __webpack_require__(184);

      __webpack_require__(186);

      __webpack_require__(188);

      __webpack_require__(189);

      __webpack_require__(190);

      __webpack_require__(191);

      __webpack_require__(192);

      __webpack_require__(194);

      __webpack_require__(196);

      __webpack_require__(199);

      __webpack_require__(200);

      __webpack_require__(202);

      __webpack_require__(203);

      __webpack_require__(205);

      __webpack_require__(206);

      __webpack_require__(207);

      __webpack_require__(208);

      __webpack_require__(210);

      __webpack_require__(211);

      __webpack_require__(212);

      __webpack_require__(213);

      __webpack_require__(214);

      __webpack_require__(215);

      __webpack_require__(216);

      __webpack_require__(218);

      __webpack_require__(219);

      __webpack_require__(220);

      __webpack_require__(221);

      __webpack_require__(222);

      __webpack_require__(223);

      __webpack_require__(224);

      __webpack_require__(225);

      __webpack_require__(226);

      __webpack_require__(227);

      __webpack_require__(229);

      __webpack_require__(230);

      __webpack_require__(231);

      __webpack_require__(232);

      __webpack_require__(240);

      __webpack_require__(241);

      __webpack_require__(242);

      __webpack_require__(243);

      __webpack_require__(244);

      __webpack_require__(245);

      __webpack_require__(246);

      __webpack_require__(247);

      __webpack_require__(248);

      __webpack_require__(249);

      __webpack_require__(250);

      __webpack_require__(251);

      __webpack_require__(252);

      __webpack_require__(253);

      __webpack_require__(254);

      __webpack_require__(257);

      __webpack_require__(259);

      __webpack_require__(260);

      __webpack_require__(261);

      __webpack_require__(262);

      __webpack_require__(264);

      __webpack_require__(267);

      __webpack_require__(268);

      __webpack_require__(269);

      __webpack_require__(270);

      __webpack_require__(274);

      __webpack_require__(275);

      __webpack_require__(278);

      __webpack_require__(279);

      __webpack_require__(280);

      __webpack_require__(281);

      __webpack_require__(282);

      __webpack_require__(283);

      __webpack_require__(284);

      __webpack_require__(285);

      __webpack_require__(287);

      __webpack_require__(288);

      __webpack_require__(289);

      __webpack_require__(292);

      __webpack_require__(293);

      __webpack_require__(294);

      __webpack_require__(295);

      __webpack_require__(296);

      __webpack_require__(297);

      __webpack_require__(298);

      __webpack_require__(299);

      __webpack_require__(300);

      __webpack_require__(301);

      __webpack_require__(302);

      __webpack_require__(303);

      __webpack_require__(304);

      __webpack_require__(309);

      __webpack_require__(310);

      __webpack_require__(311);

      __webpack_require__(312);

      __webpack_require__(313);

      __webpack_require__(314);

      __webpack_require__(315);

      __webpack_require__(316);

      __webpack_require__(317);

      __webpack_require__(318);

      __webpack_require__(319);

      __webpack_require__(320);

      __webpack_require__(321);

      __webpack_require__(322);

      __webpack_require__(323);

      __webpack_require__(324);

      __webpack_require__(325);

      __webpack_require__(326);

      __webpack_require__(327);

      __webpack_require__(328);

      __webpack_require__(329);

      __webpack_require__(330);

      __webpack_require__(331);

      __webpack_require__(332);

      __webpack_require__(333);

      __webpack_require__(334);

      __webpack_require__(335);

      __webpack_require__(336);

      __webpack_require__(337);

      __webpack_require__(338);

      __webpack_require__(339);

      __webpack_require__(340);

      __webpack_require__(341);

      __webpack_require__(342);

      __webpack_require__(344);

      __webpack_require__(345);

      __webpack_require__(347);

      __webpack_require__(348);

      __webpack_require__(349);

      __webpack_require__(350);

      __webpack_require__(355);

      module.exports = __webpack_require__(353);
      /***/
    },
    /* 1 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var global = __webpack_require__(3);

      var has = __webpack_require__(15);

      var NATIVE_SYMBOL = __webpack_require__(42);

      var DESCRIPTORS = __webpack_require__(5);

      var IS_PURE = __webpack_require__(24);

      var redefine = __webpack_require__(21);

      var hiddenKeys = __webpack_require__(30);

      var fails = __webpack_require__(6);

      var shared = __webpack_require__(22);

      var setToStringTag = __webpack_require__(43);

      var uid = __webpack_require__(29);

      var wellKnownSymbol = __webpack_require__(44);

      var wrappedWellKnownSymbolModule = __webpack_require__(45);

      var defineWellKnownSymbol = __webpack_require__(46);

      var enumKeys = __webpack_require__(48);

      var isArray = __webpack_require__(50);

      var anObject = __webpack_require__(20);

      var isObject = __webpack_require__(14);

      var toObject = __webpack_require__(51);

      var toIndexedObject = __webpack_require__(9);

      var toPrimitive = __webpack_require__(13);

      var createPropertyDescriptor = __webpack_require__(8);

      var nativeObjectCreate = __webpack_require__(52);

      var getOwnPropertyNamesModule = __webpack_require__(33);

      var getOwnPropertyNamesExternal = __webpack_require__(55);

      var getOwnPropertyDescriptorModule = __webpack_require__(4);

      var definePropertyModule = __webpack_require__(19);

      var propertyIsEnumerableModule = __webpack_require__(7);

      var hide = __webpack_require__(18);

      var objectKeys = __webpack_require__(49);

      var getOwnPropertySymbolsModule = __webpack_require__(40);

      var sharedKey = __webpack_require__(28);

      var InternalStateModule = __webpack_require__(26);

      var HIDDEN = sharedKey('hidden');
      var SYMBOL = 'Symbol';
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(SYMBOL);
      var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      var nativeDefineProperty = definePropertyModule.f;
      var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
      var $Symbol = global.Symbol;
      var JSON = global.JSON;
      var nativeJSONStringify = JSON && JSON.stringify;
      var PROTOTYPE = 'prototype';
      var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
      var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
      var SymbolRegistry = shared('symbol-registry');
      var AllSymbols = shared('symbols');
      var ObjectPrototypeSymbols = shared('op-symbols');
      var WellKnownSymbolsStore = shared('wks');
      var ObjectPrototype = Object[PROTOTYPE];
      var QObject = global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

      var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

      var setSymbolDescriptor = DESCRIPTORS && fails(function () {
        return nativeObjectCreate(nativeDefineProperty({}, 'a', {
          get: function () {
            return nativeDefineProperty(this, 'a', {
              value: 7 }).
            a;
          } })).
        a != 7;
      }) ? function (it, key, D) {
        var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, key);
        if (ObjectPrototypeDescriptor) delete ObjectPrototype[key];
        nativeDefineProperty(it, key, D);

        if (ObjectPrototypeDescriptor && it !== ObjectPrototype) {
          nativeDefineProperty(ObjectPrototype, key, ObjectPrototypeDescriptor);
        }
      } : nativeDefineProperty;

      var wrap = function wrap(tag, description) {
        var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
        setInternalState(symbol, {
          type: SYMBOL,
          tag: tag,
          description: description });

        if (!DESCRIPTORS) symbol.description = description;
        return symbol;
      };

      var isSymbol = NATIVE_SYMBOL && typeof $Symbol.iterator == 'symbol' ? function (it) {
        return typeof it == 'symbol';
      } : function (it) {
        return Object(it) instanceof $Symbol;
      };

      var $defineProperty = function defineProperty(it, key, D) {
        if (it === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, key, D);
        anObject(it);
        key = toPrimitive(key, true);
        anObject(D);

        if (has(AllSymbols, key)) {
          if (!D.enumerable) {
            if (!has(it, HIDDEN)) nativeDefineProperty(it, HIDDEN, createPropertyDescriptor(1, {}));
            it[HIDDEN][key] = true;
          } else {
            if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
            D = nativeObjectCreate(D, {
              enumerable: createPropertyDescriptor(0, false) });

          }

          return setSymbolDescriptor(it, key, D);
        }

        return nativeDefineProperty(it, key, D);
      };

      var $defineProperties = function defineProperties(it, P) {
        anObject(it);
        var keys = enumKeys(P = toIndexedObject(P));
        var i = 0;
        var l = keys.length;
        var key;

        while (l > i) $defineProperty(it, key = keys[i++], P[key]);

        return it;
      };

      var $create = function create(it, P) {
        return P === undefined$1 ? nativeObjectCreate(it) : $defineProperties(nativeObjectCreate(it), P);
      };

      var $propertyIsEnumerable = function propertyIsEnumerable(key) {
        var E = nativePropertyIsEnumerable.call(this, key = toPrimitive(key, true));
        if (this === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return false;
        return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
      };

      var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
        it = toIndexedObject(it);
        key = toPrimitive(key, true);
        if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
        var D = nativeGetOwnPropertyDescriptor(it, key);
        if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
        return D;
      };

      var $getOwnPropertyNames = function getOwnPropertyNames(it) {
        var names = nativeGetOwnPropertyNames(toIndexedObject(it));
        var result = [];
        var i = 0;
        var key;

        while (names.length > i) {
          if (!has(AllSymbols, key = names[i++]) && !has(hiddenKeys, key)) result.push(key);
        }

        return result;
      };

      var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
        var IS_OP = it === ObjectPrototype;
        var names = nativeGetOwnPropertyNames(IS_OP ? ObjectPrototypeSymbols : toIndexedObject(it));
        var result = [];
        var i = 0;
        var key;

        while (names.length > i) {
          if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectPrototype, key) : true)) result.push(AllSymbols[key]);
        }

        return result;
      }; // `Symbol` constructor
      // https://tc39.github.io/ecma262/#sec-symbol-constructor


      if (!NATIVE_SYMBOL) {
        $Symbol = function Symbol() {
          if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
          var description = arguments[0] === undefined$1 ? undefined$1 : String(arguments[0]);
          var tag = uid(description);

          var setter = function setter(value) {
            if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
            if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
            setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
          };

          if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, {
            configurable: true,
            set: setter });

          return wrap(tag, description);
        };

        redefine($Symbol[PROTOTYPE], 'toString', function toString() {
          return getInternalState(this).tag;
        });
        propertyIsEnumerableModule.f = $propertyIsEnumerable;
        definePropertyModule.f = $defineProperty;
        getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
        getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
        getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

        if (DESCRIPTORS) {
          // https://github.com/tc39/proposal-Symbol-description
          nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
            configurable: true,
            get: function description() {
              return getInternalState(this).description;
            } });


          if (!IS_PURE) {
            redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, {
              unsafe: true });

          }
        }

        wrappedWellKnownSymbolModule.f = function (name) {
          return wrap(wellKnownSymbol(name), name);
        };
      }

      $({
        global: true,
        wrap: true,
        forced: !NATIVE_SYMBOL,
        sham: !NATIVE_SYMBOL },
      {
        Symbol: $Symbol });


      for (var wellKnownSymbols = objectKeys(WellKnownSymbolsStore), k = 0; wellKnownSymbols.length > k;) {
        defineWellKnownSymbol(wellKnownSymbols[k++]);
      }

      $({
        target: SYMBOL,
        stat: true,
        forced: !NATIVE_SYMBOL },
      {
        // `Symbol.for` method
        // https://tc39.github.io/ecma262/#sec-symbol.for
        'for': function (key) {
          return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
        },
        // `Symbol.keyFor` method
        // https://tc39.github.io/ecma262/#sec-symbol.keyfor
        keyFor: function keyFor(sym) {
          if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');

          for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
        },
        useSetter: function () {
          USE_SETTER = true;
        },
        useSimple: function () {
          USE_SETTER = false;
        } });

      $({
        target: 'Object',
        stat: true,
        forced: !NATIVE_SYMBOL,
        sham: !DESCRIPTORS },
      {
        // `Object.create` method
        // https://tc39.github.io/ecma262/#sec-object.create
        create: $create,
        // `Object.defineProperty` method
        // https://tc39.github.io/ecma262/#sec-object.defineproperty
        defineProperty: $defineProperty,
        // `Object.defineProperties` method
        // https://tc39.github.io/ecma262/#sec-object.defineproperties
        defineProperties: $defineProperties,
        // `Object.getOwnPropertyDescriptor` method
        // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor });

      $({
        target: 'Object',
        stat: true,
        forced: !NATIVE_SYMBOL },
      {
        // `Object.getOwnPropertyNames` method
        // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
        getOwnPropertyNames: $getOwnPropertyNames,
        // `Object.getOwnPropertySymbols` method
        // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
        getOwnPropertySymbols: $getOwnPropertySymbols });
      // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
      // https://bugs.chromium.org/p/v8/issues/detail?id=3443

      $({
        target: 'Object',
        stat: true,
        forced: fails(function () {
          getOwnPropertySymbolsModule.f(1);
        }) },
      {
        getOwnPropertySymbols: function getOwnPropertySymbols(it) {
          return getOwnPropertySymbolsModule.f(toObject(it));
        } });
      // `JSON.stringify` method behavior with symbols
      // https://tc39.github.io/ecma262/#sec-json.stringify

      JSON && $({
        target: 'JSON',
        stat: true,
        forced: !NATIVE_SYMBOL || fails(function () {
          var symbol = $Symbol(); // MS Edge converts symbol values to JSON as {}

          return nativeJSONStringify([symbol]) != '[null]' // WebKit converts symbol values to JSON as null
          || nativeJSONStringify({
            a: symbol }) !=
          '{}' // V8 throws on boxed symbols
          || nativeJSONStringify(Object(symbol)) != '{}';
        }) },
      {
        stringify: function stringify(it) {
          var args = [it];
          var i = 1;
          var replacer, $replacer;

          while (arguments.length > i) args.push(arguments[i++]);

          $replacer = replacer = args[1];
          if (!isObject(replacer) && it === undefined$1 || isSymbol(it)) return; // IE8 returns string on undefined

          if (!isArray(replacer)) replacer = function (key, value) {
            if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
            if (!isSymbol(value)) return value;
          };
          args[1] = replacer;
          return nativeJSONStringify.apply(JSON, args);
        } });
      // `Symbol.prototype[@@toPrimitive]` method
      // https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive

      if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) hide($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf); // `Symbol.prototype[@@toStringTag]` property
      // https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag

      setToStringTag($Symbol, SYMBOL);
      hiddenKeys[HIDDEN] = true;
      /***/
    },
    /* 2 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var getOwnPropertyDescriptor = __webpack_require__(4).f;

      var hide = __webpack_require__(18);

      var redefine = __webpack_require__(21);

      var setGlobal = __webpack_require__(23);

      var copyConstructorProperties = __webpack_require__(31);

      var isForced = __webpack_require__(41);
      /*
                                                options.target      - name of the target object
                                                options.global      - target is the global object
                                                options.stat        - export as static methods of target
                                                options.proto       - export as prototype methods of target
                                                options.real        - real prototype method for the `pure` version
                                                options.forced      - export even if the native feature is available
                                                options.bind        - bind methods to the target, required for the `pure` version
                                                options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
                                                options.unsafe      - use the simple assignment of property instead of delete + defineProperty
                                                options.sham        - add a flag to not completely full polyfills
                                                options.enumerable  - export as enumerable property
                                                options.noTargetGet - prevent calling a getter on target
                                              */


      module.exports = function (options, source) {
        var TARGET = options.target;
        var GLOBAL = options.global;
        var STATIC = options.stat;
        var FORCED, target, key, targetProperty, sourceProperty, descriptor;

        if (GLOBAL) {
          target = global;
        } else if (STATIC) {
          target = global[TARGET] || setGlobal(TARGET, {});
        } else {
          target = (global[TARGET] || {}).prototype;
        }

        if (target) for (key in source) {
          sourceProperty = source[key];

          if (options.noTargetGet) {
            descriptor = getOwnPropertyDescriptor(target, key);
            targetProperty = descriptor && descriptor.value;
          } else targetProperty = target[key];

          FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contained in target

          if (!FORCED && targetProperty !== undefined$1) {
            if (typeof sourceProperty === typeof targetProperty) continue;
            copyConstructorProperties(sourceProperty, targetProperty);
          } // add a flag to not completely full polyfills


          if (options.sham || targetProperty && targetProperty.sham) {
            hide(sourceProperty, 'sham', true);
          } // extend global


          redefine(target, key, sourceProperty, options);
        }
      };
      /***/

    },
    /* 3 */

    /***/
    function (module, exports) {
      var O = 'object';

      var check = function check(it) {
        return it && it.Math == Math && it;
      }; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028


      module.exports = // eslint-disable-next-line no-undef
      check(typeof globalThis == O && globalThis) || check(typeof window == O && window) || check(typeof self == O && self) || check(typeof commonjsGlobal == O && commonjsGlobal) || // eslint-disable-next-line no-new-func
      Function('return this')();
      /***/
    },
    /* 4 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(5);

      var propertyIsEnumerableModule = __webpack_require__(7);

      var createPropertyDescriptor = __webpack_require__(8);

      var toIndexedObject = __webpack_require__(9);

      var toPrimitive = __webpack_require__(13);

      var has = __webpack_require__(15);

      var IE8_DOM_DEFINE = __webpack_require__(16);

      var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
        O = toIndexedObject(O);
        P = toPrimitive(P, true);
        if (IE8_DOM_DEFINE) try {
          return nativeGetOwnPropertyDescriptor(O, P);
        } catch (error) {
          /* empty */
        }
        if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
      };
      /***/
    },
    /* 5 */

    /***/
    function (module, exports, __webpack_require__) {
      var fails = __webpack_require__(6); // Thank's IE8 for his funny defineProperty


      module.exports = !fails(function () {
        return Object.defineProperty({}, 'a', {
          get: function () {
            return 7;
          } }).
        a != 7;
      });
      /***/
    },
    /* 6 */

    /***/
    function (module, exports) {
      module.exports = function (exec) {
        try {
          return !!exec();
        } catch (error) {
          return true;
        }
      };
      /***/

    },
    /* 7 */

    /***/
    function (module, exports, __webpack_require__) {
      var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug

      var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({
        1: 2 },
      1);
      exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
        var descriptor = getOwnPropertyDescriptor(this, V);
        return !!descriptor && descriptor.enumerable;
      } : nativePropertyIsEnumerable;
      /***/
    },
    /* 8 */

    /***/
    function (module, exports) {
      module.exports = function (bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value: value };

      };
      /***/

    },
    /* 9 */

    /***/
    function (module, exports, __webpack_require__) {
      // toObject with fallback for non-array-like ES3 strings
      var IndexedObject = __webpack_require__(10);

      var requireObjectCoercible = __webpack_require__(12);

      module.exports = function (it) {
        return IndexedObject(requireObjectCoercible(it));
      };
      /***/

    },
    /* 10 */

    /***/
    function (module, exports, __webpack_require__) {
      // fallback for non-array-like ES3 and non-enumerable old V8 strings
      var fails = __webpack_require__(6);

      var classof = __webpack_require__(11);

      var split = ''.split;
      module.exports = fails(function () {
        // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
        // eslint-disable-next-line no-prototype-builtins
        return !Object('z').propertyIsEnumerable(0);
      }) ? function (it) {
        return classof(it) == 'String' ? split.call(it, '') : Object(it);
      } : Object;
      /***/
    },
    /* 11 */

    /***/
    function (module, exports) {
      var toString = {}.toString;

      module.exports = function (it) {
        return toString.call(it).slice(8, -1);
      };
      /***/

    },
    /* 12 */

    /***/
    function (module, exports) {
      // `RequireObjectCoercible` abstract operation
      // https://tc39.github.io/ecma262/#sec-requireobjectcoercible
      module.exports = function (it) {
        if (it == undefined$1) throw TypeError("Can't call method on " + it);
        return it;
      };
      /***/

    },
    /* 13 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(14); // 7.1.1 ToPrimitive(input [, PreferredType])
      // instead of the ES6 spec version, we didn't implement @@toPrimitive case
      // and the second argument - flag - preferred type is a string


      module.exports = function (it, S) {
        if (!isObject(it)) return it;
        var fn, val;
        if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
        if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
        if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
        throw TypeError("Can't convert object to primitive value");
      };
      /***/

    },
    /* 14 */

    /***/
    function (module, exports) {
      module.exports = function (it) {
        return typeof it === 'object' ? it !== null : typeof it === 'function';
      };
      /***/

    },
    /* 15 */

    /***/
    function (module, exports) {
      var hasOwnProperty = {}.hasOwnProperty;

      module.exports = function (it, key) {
        return hasOwnProperty.call(it, key);
      };
      /***/

    },
    /* 16 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(5);

      var fails = __webpack_require__(6);

      var createElement = __webpack_require__(17); // Thank's IE8 for his funny defineProperty


      module.exports = !DESCRIPTORS && !fails(function () {
        return Object.defineProperty(createElement('div'), 'a', {
          get: function () {
            return 7;
          } }).
        a != 7;
      });
      /***/
    },
    /* 17 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var isObject = __webpack_require__(14);

      var document = global.document; // typeof document.createElement is 'object' in old IE

      var exist = isObject(document) && isObject(document.createElement);

      module.exports = function (it) {
        return exist ? document.createElement(it) : {};
      };
      /***/

    },
    /* 18 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(5);

      var definePropertyModule = __webpack_require__(19);

      var createPropertyDescriptor = __webpack_require__(8);

      module.exports = DESCRIPTORS ? function (object, key, value) {
        return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
      } : function (object, key, value) {
        object[key] = value;
        return object;
      };
      /***/
    },
    /* 19 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(5);

      var IE8_DOM_DEFINE = __webpack_require__(16);

      var anObject = __webpack_require__(20);

      var toPrimitive = __webpack_require__(13);

      var nativeDefineProperty = Object.defineProperty;
      exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPrimitive(P, true);
        anObject(Attributes);
        if (IE8_DOM_DEFINE) try {
          return nativeDefineProperty(O, P, Attributes);
        } catch (error) {
          /* empty */
        }
        if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
        if ('value' in Attributes) O[P] = Attributes.value;
        return O;
      };
      /***/
    },
    /* 20 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(14);

      module.exports = function (it) {
        if (!isObject(it)) {
          throw TypeError(String(it) + ' is not an object');
        }

        return it;
      };
      /***/

    },
    /* 21 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var shared = __webpack_require__(22);

      var hide = __webpack_require__(18);

      var has = __webpack_require__(15);

      var setGlobal = __webpack_require__(23);

      var nativeFunctionToString = __webpack_require__(25);

      var InternalStateModule = __webpack_require__(26);

      var getInternalState = InternalStateModule.get;
      var enforceInternalState = InternalStateModule.enforce;
      var TEMPLATE = String(nativeFunctionToString).split('toString');
      shared('inspectSource', function (it) {
        return nativeFunctionToString.call(it);
      });
      (module.exports = function (O, key, value, options) {
        var unsafe = options ? !!options.unsafe : false;
        var simple = options ? !!options.enumerable : false;
        var noTargetGet = options ? !!options.noTargetGet : false;

        if (typeof value == 'function') {
          if (typeof key == 'string' && !has(value, 'name')) hide(value, 'name', key);
          enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
        }

        if (O === global) {
          if (simple) O[key] = value;else setGlobal(key, value);
          return;
        } else if (!unsafe) {
          delete O[key];
        } else if (!noTargetGet && O[key]) {
          simple = true;
        }

        if (simple) O[key] = value;else hide(O, key, value); // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
      })(Function.prototype, 'toString', function toString() {
        return typeof this == 'function' && getInternalState(this).source || nativeFunctionToString.call(this);
      });
      /***/
    },
    /* 22 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var setGlobal = __webpack_require__(23);

      var IS_PURE = __webpack_require__(24);

      var SHARED = '__core-js_shared__';
      var store = global[SHARED] || setGlobal(SHARED, {});
      (module.exports = function (key, value) {
        return store[key] || (store[key] = value !== undefined$1 ? value : {});
      })('versions', []).push({
        version: '3.1.3',
        mode: IS_PURE ? 'pure' : 'global',
        copyright: '© 2019 Denis Pushkarev (zloirock.ru)' });

      /***/
    },
    /* 23 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var hide = __webpack_require__(18);

      module.exports = function (key, value) {
        try {
          hide(global, key, value);
        } catch (error) {
          global[key] = value;
        }

        return value;
      };
      /***/

    },
    /* 24 */

    /***/
    function (module, exports) {
      module.exports = false;
      /***/
    },
    /* 25 */

    /***/
    function (module, exports, __webpack_require__) {
      var shared = __webpack_require__(22);

      module.exports = shared('native-function-to-string', Function.toString);
      /***/
    },
    /* 26 */

    /***/
    function (module, exports, __webpack_require__) {
      var NATIVE_WEAK_MAP = __webpack_require__(27);

      var global = __webpack_require__(3);

      var isObject = __webpack_require__(14);

      var hide = __webpack_require__(18);

      var objectHas = __webpack_require__(15);

      var sharedKey = __webpack_require__(28);

      var hiddenKeys = __webpack_require__(30);

      var WeakMap = global.WeakMap;
      var set, get, has;

      var enforce = function enforce(it) {
        return has(it) ? get(it) : set(it, {});
      };

      var getterFor = function getterFor(TYPE) {
        return function (it) {
          var state;

          if (!isObject(it) || (state = get(it)).type !== TYPE) {
            throw TypeError('Incompatible receiver, ' + TYPE + ' required');
          }

          return state;
        };
      };

      if (NATIVE_WEAK_MAP) {
        var store = new WeakMap();
        var wmget = store.get;
        var wmhas = store.has;
        var wmset = store.set;

        set = function (it, metadata) {
          wmset.call(store, it, metadata);
          return metadata;
        };

        get = function (it) {
          return wmget.call(store, it) || {};
        };

        has = function (it) {
          return wmhas.call(store, it);
        };
      } else {
        var STATE = sharedKey('state');
        hiddenKeys[STATE] = true;

        set = function (it, metadata) {
          hide(it, STATE, metadata);
          return metadata;
        };

        get = function (it) {
          return objectHas(it, STATE) ? it[STATE] : {};
        };

        has = function (it) {
          return objectHas(it, STATE);
        };
      }

      module.exports = {
        set: set,
        get: get,
        has: has,
        enforce: enforce,
        getterFor: getterFor };

      /***/
    },
    /* 27 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var nativeFunctionToString = __webpack_require__(25);

      var WeakMap = global.WeakMap;
      module.exports = typeof WeakMap === 'function' && /native code/.test(nativeFunctionToString.call(WeakMap));
      /***/
    },
    /* 28 */

    /***/
    function (module, exports, __webpack_require__) {
      var shared = __webpack_require__(22);

      var uid = __webpack_require__(29);

      var keys = shared('keys');

      module.exports = function (key) {
        return keys[key] || (keys[key] = uid(key));
      };
      /***/

    },
    /* 29 */

    /***/
    function (module, exports) {
      var id = 0;
      var postfix = Math.random();

      module.exports = function (key) {
        return 'Symbol('.concat(key === undefined$1 ? '' : key, ')_', (++id + postfix).toString(36));
      };
      /***/

    },
    /* 30 */

    /***/
    function (module, exports) {
      module.exports = {};
      /***/
    },
    /* 31 */

    /***/
    function (module, exports, __webpack_require__) {
      var has = __webpack_require__(15);

      var ownKeys = __webpack_require__(32);

      var getOwnPropertyDescriptorModule = __webpack_require__(4);

      var definePropertyModule = __webpack_require__(19);

      module.exports = function (target, source) {
        var keys = ownKeys(source);
        var defineProperty = definePropertyModule.f;
        var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
        }
      };
      /***/

    },
    /* 32 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var getOwnPropertyNamesModule = __webpack_require__(33);

      var getOwnPropertySymbolsModule = __webpack_require__(40);

      var anObject = __webpack_require__(20);

      var Reflect = global.Reflect; // all object keys, includes non-enumerable and symbols

      module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
        var keys = getOwnPropertyNamesModule.f(anObject(it));
        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
      };
      /***/

    },
    /* 33 */

    /***/
    function (module, exports, __webpack_require__) {
      // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
      var internalObjectKeys = __webpack_require__(34);

      var enumBugKeys = __webpack_require__(39);

      var hiddenKeys = enumBugKeys.concat('length', 'prototype');

      exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return internalObjectKeys(O, hiddenKeys);
      };
      /***/

    },
    /* 34 */

    /***/
    function (module, exports, __webpack_require__) {
      var has = __webpack_require__(15);

      var toIndexedObject = __webpack_require__(9);

      var arrayIncludes = __webpack_require__(35);

      var hiddenKeys = __webpack_require__(30);

      var arrayIndexOf = arrayIncludes(false);

      module.exports = function (object, names) {
        var O = toIndexedObject(object);
        var i = 0;
        var result = [];
        var key;

        for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key); // Don't enum bug & hidden keys


        while (names.length > i) if (has(O, key = names[i++])) {
          ~arrayIndexOf(result, key) || result.push(key);
        }

        return result;
      };
      /***/

    },
    /* 35 */

    /***/
    function (module, exports, __webpack_require__) {
      var toIndexedObject = __webpack_require__(9);

      var toLength = __webpack_require__(36);

      var toAbsoluteIndex = __webpack_require__(38); // `Array.prototype.{ indexOf, includes }` methods implementation
      // false -> Array#indexOf
      // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
      // true  -> Array#includes
      // https://tc39.github.io/ecma262/#sec-array.prototype.includes


      module.exports = function (IS_INCLUDES) {
        return function ($this, el, fromIndex) {
          var O = toIndexedObject($this);
          var length = toLength(O.length);
          var index = toAbsoluteIndex(fromIndex, length);
          var value; // Array#includes uses SameValueZero equality algorithm
          // eslint-disable-next-line no-self-compare

          if (IS_INCLUDES && el != el) while (length > index) {
            value = O[index++]; // eslint-disable-next-line no-self-compare

            if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
          } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
            if (O[index] === el) return IS_INCLUDES || index || 0;
          }
          return !IS_INCLUDES && -1;
        };
      };
      /***/

    },
    /* 36 */

    /***/
    function (module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(37);

      var min = Math.min; // `ToLength` abstract operation
      // https://tc39.github.io/ecma262/#sec-tolength

      module.exports = function (argument) {
        return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
      };
      /***/

    },
    /* 37 */

    /***/
    function (module, exports) {
      var ceil = Math.ceil;
      var floor = Math.floor; // `ToInteger` abstract operation
      // https://tc39.github.io/ecma262/#sec-tointeger

      module.exports = function (argument) {
        return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
      };
      /***/

    },
    /* 38 */

    /***/
    function (module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(37);

      var max = Math.max;
      var min = Math.min; // Helper for a popular repeating case of the spec:
      // Let integer be ? ToInteger(index).
      // If integer < 0, let result be max((length + integer), 0); else let result be min(length, length).

      module.exports = function (index, length) {
        var integer = toInteger(index);
        return integer < 0 ? max(integer + length, 0) : min(integer, length);
      };
      /***/

    },
    /* 39 */

    /***/
    function (module, exports) {
      // IE8- don't enum bug keys
      module.exports = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];
      /***/
    },
    /* 40 */

    /***/
    function (module, exports) {
      exports.f = Object.getOwnPropertySymbols;
      /***/
    },
    /* 41 */

    /***/
    function (module, exports, __webpack_require__) {
      var fails = __webpack_require__(6);

      var replacement = /#|\.prototype\./;

      var isForced = function isForced(feature, detection) {
        var value = data[normalize(feature)];
        return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == 'function' ? fails(detection) : !!detection;
      };

      var normalize = isForced.normalize = function (string) {
        return String(string).replace(replacement, '.').toLowerCase();
      };

      var data = isForced.data = {};
      var NATIVE = isForced.NATIVE = 'N';
      var POLYFILL = isForced.POLYFILL = 'P';
      module.exports = isForced;
      /***/
    },
    /* 42 */

    /***/
    function (module, exports, __webpack_require__) {
      var fails = __webpack_require__(6);

      module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
        // Chrome 38 Symbol has incorrect toString conversion
        // eslint-disable-next-line no-undef
        return !String(Symbol());
      });
      /***/
    },
    /* 43 */

    /***/
    function (module, exports, __webpack_require__) {
      var defineProperty = __webpack_require__(19).f;

      var has = __webpack_require__(15);

      var wellKnownSymbol = __webpack_require__(44);

      var TO_STRING_TAG = wellKnownSymbol('toStringTag');

      module.exports = function (it, TAG, STATIC) {
        if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
          defineProperty(it, TO_STRING_TAG, {
            configurable: true,
            value: TAG });

        }
      };
      /***/

    },
    /* 44 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var shared = __webpack_require__(22);

      var uid = __webpack_require__(29);

      var NATIVE_SYMBOL = __webpack_require__(42);

      var Symbol = global.Symbol;
      var store = shared('wks');

      module.exports = function (name) {
        return store[name] || (store[name] = NATIVE_SYMBOL && Symbol[name] || (NATIVE_SYMBOL ? Symbol : uid)('Symbol.' + name));
      };
      /***/

    },
    /* 45 */

    /***/
    function (module, exports, __webpack_require__) {
      exports.f = __webpack_require__(44);
      /***/
    },
    /* 46 */

    /***/
    function (module, exports, __webpack_require__) {
      var path = __webpack_require__(47);

      var has = __webpack_require__(15);

      var wrappedWellKnownSymbolModule = __webpack_require__(45);

      var defineProperty = __webpack_require__(19).f;

      module.exports = function (NAME) {
        var Symbol = path.Symbol || (path.Symbol = {});
        if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
          value: wrappedWellKnownSymbolModule.f(NAME) });

      };
      /***/

    },
    /* 47 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__(3);
      /***/
    },
    /* 48 */

    /***/
    function (module, exports, __webpack_require__) {
      var objectKeys = __webpack_require__(49);

      var getOwnPropertySymbolsModule = __webpack_require__(40);

      var propertyIsEnumerableModule = __webpack_require__(7); // all enumerable object keys, includes symbols


      module.exports = function (it) {
        var result = objectKeys(it);
        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;

        if (getOwnPropertySymbols) {
          var symbols = getOwnPropertySymbols(it);
          var propertyIsEnumerable = propertyIsEnumerableModule.f;
          var i = 0;
          var key;

          while (symbols.length > i) if (propertyIsEnumerable.call(it, key = symbols[i++])) result.push(key);
        }

        return result;
      };
      /***/

    },
    /* 49 */

    /***/
    function (module, exports, __webpack_require__) {
      var internalObjectKeys = __webpack_require__(34);

      var enumBugKeys = __webpack_require__(39); // 19.1.2.14 / 15.2.3.14 Object.keys(O)


      module.exports = Object.keys || function keys(O) {
        return internalObjectKeys(O, enumBugKeys);
      };
      /***/

    },
    /* 50 */

    /***/
    function (module, exports, __webpack_require__) {
      var classof = __webpack_require__(11); // `IsArray` abstract operation
      // https://tc39.github.io/ecma262/#sec-isarray


      module.exports = Array.isArray || function isArray(arg) {
        return classof(arg) == 'Array';
      };
      /***/

    },
    /* 51 */

    /***/
    function (module, exports, __webpack_require__) {
      var requireObjectCoercible = __webpack_require__(12); // `ToObject` abstract operation
      // https://tc39.github.io/ecma262/#sec-toobject


      module.exports = function (argument) {
        return Object(requireObjectCoercible(argument));
      };
      /***/

    },
    /* 52 */

    /***/
    function (module, exports, __webpack_require__) {
      var anObject = __webpack_require__(20);

      var defineProperties = __webpack_require__(53);

      var enumBugKeys = __webpack_require__(39);

      var hiddenKeys = __webpack_require__(30);

      var html = __webpack_require__(54);

      var documentCreateElement = __webpack_require__(17);

      var sharedKey = __webpack_require__(28);

      var IE_PROTO = sharedKey('IE_PROTO');
      var PROTOTYPE = 'prototype';

      var Empty = function Empty() {
        /* empty */
      }; // Create object with fake `null` prototype: use iframe Object with cleared prototype


      var _createDict = function createDict() {
        // Thrash, waste and sodomy: IE GC bug
        var iframe = documentCreateElement('iframe');
        var length = enumBugKeys.length;
        var lt = '<';
        var script = 'script';
        var gt = '>';
        var js = 'java' + script + ':';
        var iframeDocument;
        iframe.style.display = 'none';
        html.appendChild(iframe);
        iframe.src = String(js);
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(lt + script + gt + 'document.F=Object' + lt + '/' + script + gt);
        iframeDocument.close();
        _createDict = iframeDocument.F;

        while (length--) delete _createDict[PROTOTYPE][enumBugKeys[length]];

        return _createDict();
      }; // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])


      module.exports = Object.create || function create(O, Properties) {
        var result;

        if (O !== null) {
          Empty[PROTOTYPE] = anObject(O);
          result = new Empty();
          Empty[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

          result[IE_PROTO] = O;
        } else result = _createDict();

        return Properties === undefined$1 ? result : defineProperties(result, Properties);
      };

      hiddenKeys[IE_PROTO] = true;
      /***/
    },
    /* 53 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(5);

      var definePropertyModule = __webpack_require__(19);

      var anObject = __webpack_require__(20);

      var objectKeys = __webpack_require__(49);

      module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var keys = objectKeys(Properties);
        var length = keys.length;
        var i = 0;
        var key;

        while (length > i) definePropertyModule.f(O, key = keys[i++], Properties[key]);

        return O;
      };
      /***/
    },
    /* 54 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var document = global.document;
      module.exports = document && document.documentElement;
      /***/
    },
    /* 55 */

    /***/
    function (module, exports, __webpack_require__) {
      var toIndexedObject = __webpack_require__(9);

      var nativeGetOwnPropertyNames = __webpack_require__(33).f;

      var toString = {}.toString;
      var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

      var getWindowNames = function getWindowNames(it) {
        try {
          return nativeGetOwnPropertyNames(it);
        } catch (error) {
          return windowNames.slice();
        }
      }; // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window


      module.exports.f = function getOwnPropertyNames(it) {
        return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : nativeGetOwnPropertyNames(toIndexedObject(it));
      };
      /***/

    },
    /* 56 */

    /***/
    function (module, exports, __webpack_require__) {
      // `Symbol.prototype.description` getter
      // https://tc39.github.io/ecma262/#sec-symbol.prototype.description
      var $ = __webpack_require__(2);

      var DESCRIPTORS = __webpack_require__(5);

      var global = __webpack_require__(3);

      var has = __webpack_require__(15);

      var isObject = __webpack_require__(14);

      var defineProperty = __webpack_require__(19).f;

      var copyConstructorProperties = __webpack_require__(31);

      var NativeSymbol = global.Symbol;

      if (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) || // Safari 12 bug
      NativeSymbol().description !== undefined$1)) {
        var EmptyStringDescriptionStore = {}; // wrap Symbol constructor for correct work with undefined description

        var SymbolWrapper = function Symbol() {
          var description = arguments.length < 1 || arguments[0] === undefined$1 ? undefined$1 : String(arguments[0]);
          var result = this instanceof SymbolWrapper ? new NativeSymbol(description) // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
          : description === undefined$1 ? NativeSymbol() : NativeSymbol(description);
          if (description === '') EmptyStringDescriptionStore[result] = true;
          return result;
        };

        copyConstructorProperties(SymbolWrapper, NativeSymbol);
        var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
        symbolPrototype.constructor = SymbolWrapper;
        var symbolToString = symbolPrototype.toString;
        var native = String(NativeSymbol('test')) == 'Symbol(test)';
        var regexp = /^Symbol\((.*)\)[^)]+$/;
        defineProperty(symbolPrototype, 'description', {
          configurable: true,
          get: function description() {
            var symbol = isObject(this) ? this.valueOf() : this;
            var string = symbolToString.call(symbol);
            if (has(EmptyStringDescriptionStore, symbol)) return '';
            var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
            return desc === '' ? undefined$1 : desc;
          } });

        $({
          global: true,
          forced: true },
        {
          Symbol: SymbolWrapper });

      }
      /***/

    },
    /* 57 */

    /***/
    function (module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(46); // `Symbol.asyncIterator` well-known symbol
      // https://tc39.github.io/ecma262/#sec-symbol.asynciterator


      defineWellKnownSymbol('asyncIterator');
      /***/
    },
    /* 58 */

    /***/
    function (module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(46); // `Symbol.hasInstance` well-known symbol
      // https://tc39.github.io/ecma262/#sec-symbol.hasinstance


      defineWellKnownSymbol('hasInstance');
      /***/
    },
    /* 59 */

    /***/
    function (module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(46); // `Symbol.isConcatSpreadable` well-known symbol
      // https://tc39.github.io/ecma262/#sec-symbol.isconcatspreadable


      defineWellKnownSymbol('isConcatSpreadable');
      /***/
    },
    /* 60 */

    /***/
    function (module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(46); // `Symbol.iterator` well-known symbol
      // https://tc39.github.io/ecma262/#sec-symbol.iterator


      defineWellKnownSymbol('iterator');
      /***/
    },
    /* 61 */

    /***/
    function (module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(46); // `Symbol.match` well-known symbol
      // https://tc39.github.io/ecma262/#sec-symbol.match


      defineWellKnownSymbol('match');
      /***/
    },
    /* 62 */

    /***/
    function (module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(46); // `Symbol.matchAll` well-known symbol


      defineWellKnownSymbol('matchAll');
      /***/
    },
    /* 63 */

    /***/
    function (module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(46); // `Symbol.replace` well-known symbol
      // https://tc39.github.io/ecma262/#sec-symbol.replace


      defineWellKnownSymbol('replace');
      /***/
    },
    /* 64 */

    /***/
    function (module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(46); // `Symbol.search` well-known symbol
      // https://tc39.github.io/ecma262/#sec-symbol.search


      defineWellKnownSymbol('search');
      /***/
    },
    /* 65 */

    /***/
    function (module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(46); // `Symbol.species` well-known symbol
      // https://tc39.github.io/ecma262/#sec-symbol.species


      defineWellKnownSymbol('species');
      /***/
    },
    /* 66 */

    /***/
    function (module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(46); // `Symbol.split` well-known symbol
      // https://tc39.github.io/ecma262/#sec-symbol.split


      defineWellKnownSymbol('split');
      /***/
    },
    /* 67 */

    /***/
    function (module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(46); // `Symbol.toPrimitive` well-known symbol
      // https://tc39.github.io/ecma262/#sec-symbol.toprimitive


      defineWellKnownSymbol('toPrimitive');
      /***/
    },
    /* 68 */

    /***/
    function (module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(46); // `Symbol.toStringTag` well-known symbol
      // https://tc39.github.io/ecma262/#sec-symbol.tostringtag


      defineWellKnownSymbol('toStringTag');
      /***/
    },
    /* 69 */

    /***/
    function (module, exports, __webpack_require__) {
      var defineWellKnownSymbol = __webpack_require__(46); // `Symbol.unscopables` well-known symbol
      // https://tc39.github.io/ecma262/#sec-symbol.unscopables


      defineWellKnownSymbol('unscopables');
      /***/
    },
    /* 70 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var fails = __webpack_require__(6);

      var isArray = __webpack_require__(50);

      var isObject = __webpack_require__(14);

      var toObject = __webpack_require__(51);

      var toLength = __webpack_require__(36);

      var createProperty = __webpack_require__(71);

      var arraySpeciesCreate = __webpack_require__(72);

      var arrayMethodHasSpeciesSupport = __webpack_require__(73);

      var wellKnownSymbol = __webpack_require__(44);

      var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
      var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
      var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';
      var IS_CONCAT_SPREADABLE_SUPPORT = !fails(function () {
        var array = [];
        array[IS_CONCAT_SPREADABLE] = false;
        return array.concat()[0] !== array;
      });
      var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

      var isConcatSpreadable = function isConcatSpreadable(O) {
        if (!isObject(O)) return false;
        var spreadable = O[IS_CONCAT_SPREADABLE];
        return spreadable !== undefined$1 ? !!spreadable : isArray(O);
      };

      var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT; // `Array.prototype.concat` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.concat
      // with adding support of @@isConcatSpreadable and @@species

      $({
        target: 'Array',
        proto: true,
        forced: FORCED },
      {
        concat: function concat(arg) {
          // eslint-disable-line no-unused-vars
          var O = toObject(this);
          var A = arraySpeciesCreate(O, 0);
          var n = 0;
          var i, k, length, len, E;

          for (i = -1, length = arguments.length; i < length; i++) {
            E = i === -1 ? O : arguments[i];

            if (isConcatSpreadable(E)) {
              len = toLength(E.length);
              if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);

              for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
            } else {
              if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
              createProperty(A, n++, E);
            }
          }

          A.length = n;
          return A;
        } });

      /***/
    },
    /* 71 */

    /***/
    function (module, exports, __webpack_require__) {
      var toPrimitive = __webpack_require__(13);

      var definePropertyModule = __webpack_require__(19);

      var createPropertyDescriptor = __webpack_require__(8);

      module.exports = function (object, key, value) {
        var propertyKey = toPrimitive(key);
        if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));else object[propertyKey] = value;
      };
      /***/

    },
    /* 72 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(14);

      var isArray = __webpack_require__(50);

      var wellKnownSymbol = __webpack_require__(44);

      var SPECIES = wellKnownSymbol('species'); // `ArraySpeciesCreate` abstract operation
      // https://tc39.github.io/ecma262/#sec-arrayspeciescreate

      module.exports = function (originalArray, length) {
        var C;

        if (isArray(originalArray)) {
          C = originalArray.constructor; // cross-realm fallback

          if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined$1;else if (isObject(C)) {
            C = C[SPECIES];
            if (C === null) C = undefined$1;
          }
        }

        return new (C === undefined$1 ? Array : C)(length === 0 ? 0 : length);
      };
      /***/

    },
    /* 73 */

    /***/
    function (module, exports, __webpack_require__) {
      var fails = __webpack_require__(6);

      var wellKnownSymbol = __webpack_require__(44);

      var SPECIES = wellKnownSymbol('species');

      module.exports = function (METHOD_NAME) {
        return !fails(function () {
          var array = [];
          var constructor = array.constructor = {};

          constructor[SPECIES] = function () {
            return {
              foo: 1 };

          };

          return array[METHOD_NAME](Boolean).foo !== 1;
        });
      };
      /***/

    },
    /* 74 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var copyWithin = __webpack_require__(75);

      var addToUnscopables = __webpack_require__(76); // `Array.prototype.copyWithin` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.copywithin


      $({
        target: 'Array',
        proto: true },
      {
        copyWithin: copyWithin });
      // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables('copyWithin');
      /***/
    },
    /* 75 */

    /***/
    function (module, exports, __webpack_require__) {
      var toObject = __webpack_require__(51);

      var toAbsoluteIndex = __webpack_require__(38);

      var toLength = __webpack_require__(36); // `Array.prototype.copyWithin` method implementation
      // https://tc39.github.io/ecma262/#sec-array.prototype.copywithin


      module.exports = [].copyWithin || function copyWithin(target
      /* = 0 */,
      start
      /* = 0, end = @length */)
      {
        var O = toObject(this);
        var len = toLength(O.length);
        var to = toAbsoluteIndex(target, len);
        var from = toAbsoluteIndex(start, len);
        var end = arguments.length > 2 ? arguments[2] : undefined$1;
        var count = Math.min((end === undefined$1 ? len : toAbsoluteIndex(end, len)) - from, len - to);
        var inc = 1;

        if (from < to && to < from + count) {
          inc = -1;
          from += count - 1;
          to += count - 1;
        }

        while (count-- > 0) {
          if (from in O) O[to] = O[from];else delete O[to];
          to += inc;
          from += inc;
        }

        return O;
      };
      /***/

    },
    /* 76 */

    /***/
    function (module, exports, __webpack_require__) {
      var wellKnownSymbol = __webpack_require__(44);

      var create = __webpack_require__(52);

      var hide = __webpack_require__(18);

      var UNSCOPABLES = wellKnownSymbol('unscopables');
      var ArrayPrototype = Array.prototype; // Array.prototype[@@unscopables]
      // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

      if (ArrayPrototype[UNSCOPABLES] == undefined$1) {
        hide(ArrayPrototype, UNSCOPABLES, create(null));
      } // add a key to Array.prototype[@@unscopables]


      module.exports = function (key) {
        ArrayPrototype[UNSCOPABLES][key] = true;
      };
      /***/

    },
    /* 77 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var arrayMethods = __webpack_require__(78);

      var sloppyArrayMethod = __webpack_require__(81);

      var internalEvery = arrayMethods(4);
      var SLOPPY_METHOD = sloppyArrayMethod('every'); // `Array.prototype.every` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.every

      $({
        target: 'Array',
        proto: true,
        forced: SLOPPY_METHOD },
      {
        every: function every(callbackfn
        /* , thisArg */)
        {
          return internalEvery(this, callbackfn, arguments[1]);
        } });

      /***/
    },
    /* 78 */

    /***/
    function (module, exports, __webpack_require__) {
      var bind = __webpack_require__(79);

      var IndexedObject = __webpack_require__(10);

      var toObject = __webpack_require__(51);

      var toLength = __webpack_require__(36);

      var arraySpeciesCreate = __webpack_require__(72); // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
      // 0 -> Array#forEach
      // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
      // 1 -> Array#map
      // https://tc39.github.io/ecma262/#sec-array.prototype.map
      // 2 -> Array#filter
      // https://tc39.github.io/ecma262/#sec-array.prototype.filter
      // 3 -> Array#some
      // https://tc39.github.io/ecma262/#sec-array.prototype.some
      // 4 -> Array#every
      // https://tc39.github.io/ecma262/#sec-array.prototype.every
      // 5 -> Array#find
      // https://tc39.github.io/ecma262/#sec-array.prototype.find
      // 6 -> Array#findIndex
      // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex


      module.exports = function (TYPE, specificCreate) {
        var IS_MAP = TYPE == 1;
        var IS_FILTER = TYPE == 2;
        var IS_SOME = TYPE == 3;
        var IS_EVERY = TYPE == 4;
        var IS_FIND_INDEX = TYPE == 6;
        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        var create = specificCreate || arraySpeciesCreate;
        return function ($this, callbackfn, that) {
          var O = toObject($this);
          var self = IndexedObject(O);
          var boundFunction = bind(callbackfn, that, 3);
          var length = toLength(self.length);
          var index = 0;
          var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined$1;
          var value, result;

          for (; length > index; index++) if (NO_HOLES || index in self) {
            value = self[index];
            result = boundFunction(value, index, O);

            if (TYPE) {
              if (IS_MAP) target[index] = result; // map
              else if (result) switch (TYPE) {
                  case 3:
                    return true;
                  // some

                  case 5:
                    return value;
                  // find

                  case 6:
                    return index;
                  // findIndex

                  case 2:
                    target.push(value);
                  // filter
                } else if (IS_EVERY) return false; // every
            }
          }

          return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
        };
      };
      /***/

    },
    /* 79 */

    /***/
    function (module, exports, __webpack_require__) {
      var aFunction = __webpack_require__(80); // optional / simple context binding


      module.exports = function (fn, that, length) {
        aFunction(fn);
        if (that === undefined$1) return fn;

        switch (length) {
          case 0:
            return function () {
              return fn.call(that);
            };

          case 1:
            return function (a) {
              return fn.call(that, a);
            };

          case 2:
            return function (a, b) {
              return fn.call(that, a, b);
            };

          case 3:
            return function (a, b, c) {
              return fn.call(that, a, b, c);
            };}


        return function ()
        /* ...args */
        {
          return fn.apply(that, arguments);
        };
      };
      /***/

    },
    /* 80 */

    /***/
    function (module, exports) {
      module.exports = function (it) {
        if (typeof it != 'function') {
          throw TypeError(String(it) + ' is not a function');
        }

        return it;
      };
      /***/

    },
    /* 81 */

    /***/
    function (module, exports, __webpack_require__) {
      var fails = __webpack_require__(6);

      module.exports = function (METHOD_NAME, argument) {
        var method = [][METHOD_NAME];
        return !method || !fails(function () {
          // eslint-disable-next-line no-useless-call,no-throw-literal
          method.call(null, argument || function () {
            throw 1;
          }, 1);
        });
      };
      /***/

    },
    /* 82 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var fill = __webpack_require__(83);

      var addToUnscopables = __webpack_require__(76); // `Array.prototype.fill` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.fill


      $({
        target: 'Array',
        proto: true },
      {
        fill: fill });
      // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables('fill');
      /***/
    },
    /* 83 */

    /***/
    function (module, exports, __webpack_require__) {
      var toObject = __webpack_require__(51);

      var toAbsoluteIndex = __webpack_require__(38);

      var toLength = __webpack_require__(36); // `Array.prototype.fill` method implementation
      // https://tc39.github.io/ecma262/#sec-array.prototype.fill


      module.exports = function fill(value
      /* , start = 0, end = @length */)
      {
        var O = toObject(this);
        var length = toLength(O.length);
        var argumentsLength = arguments.length;
        var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined$1, length);
        var end = argumentsLength > 2 ? arguments[2] : undefined$1;
        var endPos = end === undefined$1 ? length : toAbsoluteIndex(end, length);

        while (endPos > index) O[index++] = value;

        return O;
      };
      /***/

    },
    /* 84 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var arrayMethods = __webpack_require__(78);

      var arrayMethodHasSpeciesSupport = __webpack_require__(73);

      var internalFilter = arrayMethods(2);
      var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter'); // `Array.prototype.filter` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.filter
      // with adding support of @@species

      $({
        target: 'Array',
        proto: true,
        forced: !SPECIES_SUPPORT },
      {
        filter: function filter(callbackfn
        /* , thisArg */)
        {
          return internalFilter(this, callbackfn, arguments[1]);
        } });

      /***/
    },
    /* 85 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var arrayMethods = __webpack_require__(78);

      var addToUnscopables = __webpack_require__(76);

      var internalFind = arrayMethods(5);
      var FIND = 'find';
      var SKIPS_HOLES = true; // Shouldn't skip holes

      if (FIND in []) Array(1)[FIND](function () {
        SKIPS_HOLES = false;
      }); // `Array.prototype.find` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.find

      $({
        target: 'Array',
        proto: true,
        forced: SKIPS_HOLES },
      {
        find: function find(callbackfn
        /* , that = undefined */)
        {
          return internalFind(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined$1);
        } });
      // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables(FIND);
      /***/
    },
    /* 86 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var arrayMethods = __webpack_require__(78);

      var addToUnscopables = __webpack_require__(76);

      var internalFindIndex = arrayMethods(6);
      var FIND_INDEX = 'findIndex';
      var SKIPS_HOLES = true; // Shouldn't skip holes

      if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () {
        SKIPS_HOLES = false;
      }); // `Array.prototype.findIndex` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.findindex

      $({
        target: 'Array',
        proto: true,
        forced: SKIPS_HOLES },
      {
        findIndex: function findIndex(callbackfn
        /* , that = undefined */)
        {
          return internalFindIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined$1);
        } });
      // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables(FIND_INDEX);
      /***/
    },
    /* 87 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var flattenIntoArray = __webpack_require__(88);

      var toObject = __webpack_require__(51);

      var toLength = __webpack_require__(36);

      var toInteger = __webpack_require__(37);

      var arraySpeciesCreate = __webpack_require__(72); // `Array.prototype.flat` method
      // https://github.com/tc39/proposal-flatMap


      $({
        target: 'Array',
        proto: true },
      {
        flat: function flat()
        /* depthArg = 1 */
        {
          var depthArg = arguments[0];
          var O = toObject(this);
          var sourceLen = toLength(O.length);
          var A = arraySpeciesCreate(O, 0);
          A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined$1 ? 1 : toInteger(depthArg));
          return A;
        } });

      /***/
    },
    /* 88 */

    /***/
    function (module, exports, __webpack_require__) {
      var isArray = __webpack_require__(50);

      var toLength = __webpack_require__(36);

      var bind = __webpack_require__(79); // `FlattenIntoArray` abstract operation
      // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray


      var flattenIntoArray = function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
        var targetIndex = start;
        var sourceIndex = 0;
        var mapFn = mapper ? bind(mapper, thisArg, 3) : false;
        var element;

        while (sourceIndex < sourceLen) {
          if (sourceIndex in source) {
            element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

            if (depth > 0 && isArray(element)) {
              targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
            } else {
              if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');
              target[targetIndex] = element;
            }

            targetIndex++;
          }

          sourceIndex++;
        }

        return targetIndex;
      };

      module.exports = flattenIntoArray;
      /***/
    },
    /* 89 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var flattenIntoArray = __webpack_require__(88);

      var toObject = __webpack_require__(51);

      var toLength = __webpack_require__(36);

      var aFunction = __webpack_require__(80);

      var arraySpeciesCreate = __webpack_require__(72); // `Array.prototype.flatMap` method
      // https://github.com/tc39/proposal-flatMap


      $({
        target: 'Array',
        proto: true },
      {
        flatMap: function flatMap(callbackfn
        /* , thisArg */)
        {
          var O = toObject(this);
          var sourceLen = toLength(O.length);
          var A;
          aFunction(callbackfn);
          A = arraySpeciesCreate(O, 0);
          A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
          return A;
        } });

      /***/
    },
    /* 90 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var forEach = __webpack_require__(91); // `Array.prototype.forEach` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.foreach


      $({
        target: 'Array',
        proto: true,
        forced: [].forEach != forEach },
      {
        forEach: forEach });

      /***/
    },
    /* 91 */

    /***/
    function (module, exports, __webpack_require__) {
      var arrayMethods = __webpack_require__(78);

      var sloppyArrayMethod = __webpack_require__(81);

      var internalForEach = arrayMethods(0);
      var SLOPPY_METHOD = sloppyArrayMethod('forEach'); // `Array.prototype.forEach` method implementation
      // https://tc39.github.io/ecma262/#sec-array.prototype.foreach

      module.exports = SLOPPY_METHOD ? function forEach(callbackfn
      /* , thisArg */)
      {
        return internalForEach(this, callbackfn, arguments[1]);
      } : [].forEach;
      /***/
    },
    /* 92 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var from = __webpack_require__(93);

      var checkCorrectnessOfIteration = __webpack_require__(99);

      var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {}); // `Array.from` method
      // https://tc39.github.io/ecma262/#sec-array.from

      $({
        target: 'Array',
        stat: true,
        forced: INCORRECT_ITERATION },
      {
        from: from });

      /***/
    },
    /* 93 */

    /***/
    function (module, exports, __webpack_require__) {
      var bind = __webpack_require__(79);

      var toObject = __webpack_require__(51);

      var callWithSafeIterationClosing = __webpack_require__(94);

      var isArrayIteratorMethod = __webpack_require__(95);

      var toLength = __webpack_require__(36);

      var createProperty = __webpack_require__(71);

      var getIteratorMethod = __webpack_require__(97); // `Array.from` method
      // https://tc39.github.io/ecma262/#sec-array.from


      module.exports = function from(arrayLike
      /* , mapfn = undefined, thisArg = undefined */)
      {
        var O = toObject(arrayLike);
        var C = typeof this == 'function' ? this : Array;
        var argumentsLength = arguments.length;
        var mapfn = argumentsLength > 1 ? arguments[1] : undefined$1;
        var mapping = mapfn !== undefined$1;
        var index = 0;
        var iteratorMethod = getIteratorMethod(O);
        var length, result, step, iterator;
        if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined$1, 2); // if the target is not iterable or it's an array with the default iterator - use a simple case

        if (iteratorMethod != undefined$1 && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
          iterator = iteratorMethod.call(O);
          result = new C();

          for (; !(step = iterator.next()).done; index++) {
            createProperty(result, index, mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value);
          }
        } else {
          length = toLength(O.length);
          result = new C(length);

          for (; length > index; index++) {
            createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
          }
        }

        result.length = index;
        return result;
      };
      /***/

    },
    /* 94 */

    /***/
    function (module, exports, __webpack_require__) {
      var anObject = __webpack_require__(20); // call something on iterator step with safe closing on error


      module.exports = function (iterator, fn, value, ENTRIES) {
        try {
          return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
        } catch (error) {
          var returnMethod = iterator['return'];
          if (returnMethod !== undefined$1) anObject(returnMethod.call(iterator));
          throw error;
        }
      };
      /***/

    },
    /* 95 */

    /***/
    function (module, exports, __webpack_require__) {
      var wellKnownSymbol = __webpack_require__(44);

      var Iterators = __webpack_require__(96);

      var ITERATOR = wellKnownSymbol('iterator');
      var ArrayPrototype = Array.prototype; // check on default Array iterator

      module.exports = function (it) {
        return it !== undefined$1 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
      };
      /***/

    },
    /* 96 */

    /***/
    function (module, exports) {
      module.exports = {};
      /***/
    },
    /* 97 */

    /***/
    function (module, exports, __webpack_require__) {
      var classof = __webpack_require__(98);

      var Iterators = __webpack_require__(96);

      var wellKnownSymbol = __webpack_require__(44);

      var ITERATOR = wellKnownSymbol('iterator');

      module.exports = function (it) {
        if (it != undefined$1) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
      };
      /***/

    },
    /* 98 */

    /***/
    function (module, exports, __webpack_require__) {
      var classofRaw = __webpack_require__(11);

      var wellKnownSymbol = __webpack_require__(44);

      var TO_STRING_TAG = wellKnownSymbol('toStringTag'); // ES3 wrong here

      var CORRECT_ARGUMENTS = classofRaw(function () {
        return arguments;
      }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

      var tryGet = function tryGet(it, key) {
        try {
          return it[key];
        } catch (error) {
          /* empty */
        }
      }; // getting tag from ES6+ `Object.prototype.toString`


      module.exports = function (it) {
        var O, tag, result;
        return it === undefined$1 ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
        : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag // builtinTag case
        : CORRECT_ARGUMENTS ? classofRaw(O) // ES3 arguments fallback
        : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
      };
      /***/

    },
    /* 99 */

    /***/
    function (module, exports, __webpack_require__) {
      var wellKnownSymbol = __webpack_require__(44);

      var ITERATOR = wellKnownSymbol('iterator');
      var SAFE_CLOSING = false;

      try {
        var called = 0;
        var iteratorWithReturn = {
          next: function () {
            return {
              done: !!called++ };

          },
          'return': function () {
            SAFE_CLOSING = true;
          } };


        iteratorWithReturn[ITERATOR] = function () {
          return this;
        }; // eslint-disable-next-line no-throw-literal


        Array.from(iteratorWithReturn, function () {
          throw 2;
        });
      } catch (error) {
        /* empty */
      }

      module.exports = function (exec, SKIP_CLOSING) {
        if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
        var ITERATION_SUPPORT = false;

        try {
          var object = {};

          object[ITERATOR] = function () {
            return {
              next: function () {
                return {
                  done: ITERATION_SUPPORT = true };

              } };

          };

          exec(object);
        } catch (error) {
          /* empty */
        }

        return ITERATION_SUPPORT;
      };
      /***/

    },
    /* 100 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var arrayIncludes = __webpack_require__(35);

      var addToUnscopables = __webpack_require__(76);

      var internalIncludes = arrayIncludes(true); // `Array.prototype.includes` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.includes

      $({
        target: 'Array',
        proto: true },
      {
        includes: function includes(el
        /* , fromIndex = 0 */)
        {
          return internalIncludes(this, el, arguments.length > 1 ? arguments[1] : undefined$1);
        } });
      // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables('includes');
      /***/
    },
    /* 101 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var sloppyArrayMethod = __webpack_require__(81);

      var arrayIncludes = __webpack_require__(35);

      var internalIndexOf = arrayIncludes(false);
      var nativeIndexOf = [].indexOf;
      var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
      var SLOPPY_METHOD = sloppyArrayMethod('indexOf'); // `Array.prototype.indexOf` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.indexof

      $({
        target: 'Array',
        proto: true,
        forced: NEGATIVE_ZERO || SLOPPY_METHOD },
      {
        indexOf: function indexOf(searchElement
        /* , fromIndex = 0 */)
        {
          return NEGATIVE_ZERO // convert -0 to +0
          ? nativeIndexOf.apply(this, arguments) || 0 : internalIndexOf(this, searchElement, arguments[1]);
        } });

      /***/
    },
    /* 102 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var isArray = __webpack_require__(50); // `Array.isArray` method
      // https://tc39.github.io/ecma262/#sec-array.isarray


      $({
        target: 'Array',
        stat: true },
      {
        isArray: isArray });

      /***/
    },
    /* 103 */

    /***/
    function (module, exports, __webpack_require__) {
      var toIndexedObject = __webpack_require__(9);

      var addToUnscopables = __webpack_require__(76);

      var Iterators = __webpack_require__(96);

      var InternalStateModule = __webpack_require__(26);

      var defineIterator = __webpack_require__(104);

      var ARRAY_ITERATOR = 'Array Iterator';
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR); // `Array.prototype.entries` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.entries
      // `Array.prototype.keys` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.keys
      // `Array.prototype.values` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.values
      // `Array.prototype[@@iterator]` method
      // https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
      // `CreateArrayIterator` internal method
      // https://tc39.github.io/ecma262/#sec-createarrayiterator

      module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
        setInternalState(this, {
          type: ARRAY_ITERATOR,
          target: toIndexedObject(iterated),
          // target
          index: 0,
          // next index
          kind: kind // kind
        });
        // `%ArrayIteratorPrototype%.next` method
        // https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
      }, function () {
        var state = getInternalState(this);
        var target = state.target;
        var kind = state.kind;
        var index = state.index++;

        if (!target || index >= target.length) {
          state.target = undefined$1;
          return {
            value: undefined$1,
            done: true };

        }

        if (kind == 'keys') return {
          value: index,
          done: false };

        if (kind == 'values') return {
          value: target[index],
          done: false };

        return {
          value: [index, target[index]],
          done: false };

      }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values%
      // https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
      // https://tc39.github.io/ecma262/#sec-createmappedargumentsobject

      Iterators.Arguments = Iterators.Array; // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables('keys');
      addToUnscopables('values');
      addToUnscopables('entries');
      /***/
    },
    /* 104 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var createIteratorConstructor = __webpack_require__(105);

      var getPrototypeOf = __webpack_require__(107);

      var setPrototypeOf = __webpack_require__(109);

      var setToStringTag = __webpack_require__(43);

      var hide = __webpack_require__(18);

      var redefine = __webpack_require__(21);

      var wellKnownSymbol = __webpack_require__(44);

      var IS_PURE = __webpack_require__(24);

      var Iterators = __webpack_require__(96);

      var IteratorsCore = __webpack_require__(106);

      var IteratorPrototype = IteratorsCore.IteratorPrototype;
      var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
      var ITERATOR = wellKnownSymbol('iterator');
      var KEYS = 'keys';
      var VALUES = 'values';
      var ENTRIES = 'entries';

      var returnThis = function returnThis() {
        return this;
      };

      module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
        createIteratorConstructor(IteratorConstructor, NAME, next);

        var getIterationMethod = function getIterationMethod(KIND) {
          if (KIND === DEFAULT && defaultIterator) return defaultIterator;
          if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];

          switch (KIND) {
            case KEYS:
              return function keys() {
                return new IteratorConstructor(this, KIND);
              };

            case VALUES:
              return function values() {
                return new IteratorConstructor(this, KIND);
              };

            case ENTRIES:
              return function entries() {
                return new IteratorConstructor(this, KIND);
              };}


          return function () {
            return new IteratorConstructor(this);
          };
        };

        var TO_STRING_TAG = NAME + ' Iterator';
        var INCORRECT_VALUES_NAME = false;
        var IterablePrototype = Iterable.prototype;
        var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];
        var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
        var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
        var CurrentIteratorPrototype, methods, KEY; // fix native

        if (anyNativeIterator) {
          CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));

          if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
            if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
              if (setPrototypeOf) {
                setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
              } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
                hide(CurrentIteratorPrototype, ITERATOR, returnThis);
              }
            } // Set @@toStringTag to native iterators


            setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
            if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
          }
        } // fix Array#{values, @@iterator}.name in V8 / FF


        if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
          INCORRECT_VALUES_NAME = true;

          defaultIterator = function values() {
            return nativeIterator.call(this);
          };
        } // define iterator


        if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
          hide(IterablePrototype, ITERATOR, defaultIterator);
        }

        Iterators[NAME] = defaultIterator; // export additional methods

        if (DEFAULT) {
          methods = {
            values: getIterationMethod(VALUES),
            keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
            entries: getIterationMethod(ENTRIES) };

          if (FORCED) for (KEY in methods) {
            if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
              redefine(IterablePrototype, KEY, methods[KEY]);
            }
          } else $({
            target: NAME,
            proto: true,
            forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME },
          methods);
        }

        return methods;
      };
      /***/

    },
    /* 105 */

    /***/
    function (module, exports, __webpack_require__) {
      var IteratorPrototype = __webpack_require__(106).IteratorPrototype;

      var create = __webpack_require__(52);

      var createPropertyDescriptor = __webpack_require__(8);

      var setToStringTag = __webpack_require__(43);

      var Iterators = __webpack_require__(96);

      var returnThis = function returnThis() {
        return this;
      };

      module.exports = function (IteratorConstructor, NAME, next) {
        var TO_STRING_TAG = NAME + ' Iterator';
        IteratorConstructor.prototype = create(IteratorPrototype, {
          next: createPropertyDescriptor(1, next) });

        setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
        Iterators[TO_STRING_TAG] = returnThis;
        return IteratorConstructor;
      };
      /***/

    },
    /* 106 */

    /***/
    function (module, exports, __webpack_require__) {
      var getPrototypeOf = __webpack_require__(107);

      var hide = __webpack_require__(18);

      var has = __webpack_require__(15);

      var wellKnownSymbol = __webpack_require__(44);

      var IS_PURE = __webpack_require__(24);

      var ITERATOR = wellKnownSymbol('iterator');
      var BUGGY_SAFARI_ITERATORS = false;

      var returnThis = function returnThis() {
        return this;
      }; // `%IteratorPrototype%` object
      // https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object


      var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

      if ([].keys) {
        arrayIterator = [].keys(); // Safari 8 has buggy iterators w/o `next`

        if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;else {
          PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
          if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
        }
      }

      if (IteratorPrototype == undefined$1) IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

      if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
      module.exports = {
        IteratorPrototype: IteratorPrototype,
        BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS };

      /***/
    },
    /* 107 */

    /***/
    function (module, exports, __webpack_require__) {
      var has = __webpack_require__(15);

      var toObject = __webpack_require__(51);

      var sharedKey = __webpack_require__(28);

      var CORRECT_PROTOTYPE_GETTER = __webpack_require__(108);

      var IE_PROTO = sharedKey('IE_PROTO');
      var ObjectPrototype = Object.prototype; // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)

      module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
        O = toObject(O);
        if (has(O, IE_PROTO)) return O[IE_PROTO];

        if (typeof O.constructor == 'function' && O instanceof O.constructor) {
          return O.constructor.prototype;
        }

        return O instanceof Object ? ObjectPrototype : null;
      };
      /***/
    },
    /* 108 */

    /***/
    function (module, exports, __webpack_require__) {
      var fails = __webpack_require__(6);

      module.exports = !fails(function () {
        function F() {
          /* empty */
        }

        F.prototype.constructor = null;
        return Object.getPrototypeOf(new F()) !== F.prototype;
      });
      /***/
    },
    /* 109 */

    /***/
    function (module, exports, __webpack_require__) {
      var validateSetPrototypeOfArguments = __webpack_require__(110); // Works with __proto__ only. Old v8 can't work with null proto objects.

      /* eslint-disable no-proto */


      module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
        var correctSetter = false;
        var test = {};
        var setter;

        try {
          setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
          setter.call(test, []);
          correctSetter = test instanceof Array;
        } catch (error) {
          /* empty */
        }

        return function setPrototypeOf(O, proto) {
          validateSetPrototypeOfArguments(O, proto);
          if (correctSetter) setter.call(O, proto);else O.__proto__ = proto;
          return O;
        };
      }() : undefined$1);
      /***/
    },
    /* 110 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(14);

      var anObject = __webpack_require__(20);

      module.exports = function (O, proto) {
        anObject(O);

        if (!isObject(proto) && proto !== null) {
          throw TypeError("Can't set " + String(proto) + ' as a prototype');
        }
      };
      /***/

    },
    /* 111 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var IndexedObject = __webpack_require__(10);

      var toIndexedObject = __webpack_require__(9);

      var sloppyArrayMethod = __webpack_require__(81);

      var nativeJoin = [].join;
      var ES3_STRINGS = IndexedObject != Object;
      var SLOPPY_METHOD = sloppyArrayMethod('join', ','); // `Array.prototype.join` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.join

      $({
        target: 'Array',
        proto: true,
        forced: ES3_STRINGS || SLOPPY_METHOD },
      {
        join: function join(separator) {
          return nativeJoin.call(toIndexedObject(this), separator === undefined$1 ? ',' : separator);
        } });

      /***/
    },
    /* 112 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var lastIndexOf = __webpack_require__(113); // `Array.prototype.lastIndexOf` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof


      $({
        target: 'Array',
        proto: true,
        forced: lastIndexOf !== [].lastIndexOf },
      {
        lastIndexOf: lastIndexOf });

      /***/
    },
    /* 113 */

    /***/
    function (module, exports, __webpack_require__) {
      var toIndexedObject = __webpack_require__(9);

      var toInteger = __webpack_require__(37);

      var toLength = __webpack_require__(36);

      var sloppyArrayMethod = __webpack_require__(81);

      var nativeLastIndexOf = [].lastIndexOf;
      var NEGATIVE_ZERO = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
      var SLOPPY_METHOD = sloppyArrayMethod('lastIndexOf'); // `Array.prototype.lastIndexOf` method implementation
      // https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof

      module.exports = NEGATIVE_ZERO || SLOPPY_METHOD ? function lastIndexOf(searchElement
      /* , fromIndex = @[*-1] */)
      {
        // convert -0 to +0
        if (NEGATIVE_ZERO) return nativeLastIndexOf.apply(this, arguments) || 0;
        var O = toIndexedObject(this);
        var length = toLength(O.length);
        var index = length - 1;
        if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
        if (index < 0) index = length + index;

        for (; index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;

        return -1;
      } : nativeLastIndexOf;
      /***/
    },
    /* 114 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var arrayMethods = __webpack_require__(78);

      var arrayMethodHasSpeciesSupport = __webpack_require__(73);

      var internalMap = arrayMethods(1);
      var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map'); // `Array.prototype.map` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.map
      // with adding support of @@species

      $({
        target: 'Array',
        proto: true,
        forced: !SPECIES_SUPPORT },
      {
        map: function map(callbackfn
        /* , thisArg */)
        {
          return internalMap(this, callbackfn, arguments[1]);
        } });

      /***/
    },
    /* 115 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var fails = __webpack_require__(6);

      var createProperty = __webpack_require__(71);

      var ISNT_GENERIC = fails(function () {
        function F() {
          /* empty */
        }

        return !(Array.of.call(F) instanceof F);
      }); // `Array.of` method
      // https://tc39.github.io/ecma262/#sec-array.of
      // WebKit Array.of isn't generic

      $({
        target: 'Array',
        stat: true,
        forced: ISNT_GENERIC },
      {
        of: function of()
        /* ...args */
        {
          var index = 0;
          var argumentsLength = arguments.length;
          var result = new (typeof this == 'function' ? this : Array)(argumentsLength);

          while (argumentsLength > index) createProperty(result, index, arguments[index++]);

          result.length = argumentsLength;
          return result;
        } });

      /***/
    },
    /* 116 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var internalReduce = __webpack_require__(117);

      var sloppyArrayMethod = __webpack_require__(81);

      var SLOPPY_METHOD = sloppyArrayMethod('reduce'); // `Array.prototype.reduce` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.reduce

      $({
        target: 'Array',
        proto: true,
        forced: SLOPPY_METHOD },
      {
        reduce: function reduce(callbackfn
        /* , initialValue */)
        {
          return internalReduce(this, callbackfn, arguments.length, arguments[1], false);
        } });

      /***/
    },
    /* 117 */

    /***/
    function (module, exports, __webpack_require__) {
      var aFunction = __webpack_require__(80);

      var toObject = __webpack_require__(51);

      var IndexedObject = __webpack_require__(10);

      var toLength = __webpack_require__(36); // `Array.prototype.{ reduce, reduceRight }` methods implementation
      // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
      // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright


      module.exports = function (that, callbackfn, argumentsLength, memo, isRight) {
        aFunction(callbackfn);
        var O = toObject(that);
        var self = IndexedObject(O);
        var length = toLength(O.length);
        var index = isRight ? length - 1 : 0;
        var i = isRight ? -1 : 1;
        if (argumentsLength < 2) while (true) {
          if (index in self) {
            memo = self[index];
            index += i;
            break;
          }

          index += i;

          if (isRight ? index < 0 : length <= index) {
            throw TypeError('Reduce of empty array with no initial value');
          }
        }

        for (; isRight ? index >= 0 : length > index; index += i) if (index in self) {
          memo = callbackfn(memo, self[index], index, O);
        }

        return memo;
      };
      /***/

    },
    /* 118 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var internalReduce = __webpack_require__(117);

      var sloppyArrayMethod = __webpack_require__(81);

      var SLOPPY_METHOD = sloppyArrayMethod('reduceRight'); // `Array.prototype.reduceRight` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright

      $({
        target: 'Array',
        proto: true,
        forced: SLOPPY_METHOD },
      {
        reduceRight: function reduceRight(callbackfn
        /* , initialValue */)
        {
          return internalReduce(this, callbackfn, arguments.length, arguments[1], true);
        } });

      /***/
    },
    /* 119 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var isArray = __webpack_require__(50);

      var nativeReverse = [].reverse;
      var test = [1, 2]; // `Array.prototype.reverse` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.reverse
      // fix for Safari 12.0 bug
      // https://bugs.webkit.org/show_bug.cgi?id=188794

      $({
        target: 'Array',
        proto: true,
        forced: String(test) === String(test.reverse()) },
      {
        reverse: function reverse() {
          if (isArray(this)) this.length = this.length;
          return nativeReverse.call(this);
        } });

      /***/
    },
    /* 120 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var isObject = __webpack_require__(14);

      var isArray = __webpack_require__(50);

      var toAbsoluteIndex = __webpack_require__(38);

      var toLength = __webpack_require__(36);

      var toIndexedObject = __webpack_require__(9);

      var createProperty = __webpack_require__(71);

      var arrayMethodHasSpeciesSupport = __webpack_require__(73);

      var wellKnownSymbol = __webpack_require__(44);

      var SPECIES = wellKnownSymbol('species');
      var nativeSlice = [].slice;
      var max = Math.max;
      var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice'); // `Array.prototype.slice` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.slice
      // fallback for not array-like ES3 strings and DOM objects

      $({
        target: 'Array',
        proto: true,
        forced: !SPECIES_SUPPORT },
      {
        slice: function slice(start, end) {
          var O = toIndexedObject(this);
          var length = toLength(O.length);
          var k = toAbsoluteIndex(start, length);
          var fin = toAbsoluteIndex(end === undefined$1 ? length : end, length); // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible

          var Constructor, result, n;

          if (isArray(O)) {
            Constructor = O.constructor; // cross-realm fallback

            if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
              Constructor = undefined$1;
            } else if (isObject(Constructor)) {
              Constructor = Constructor[SPECIES];
              if (Constructor === null) Constructor = undefined$1;
            }

            if (Constructor === Array || Constructor === undefined$1) {
              return nativeSlice.call(O, k, fin);
            }
          }

          result = new (Constructor === undefined$1 ? Array : Constructor)(max(fin - k, 0));

          for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);

          result.length = n;
          return result;
        } });

      /***/
    },
    /* 121 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var arrayMethods = __webpack_require__(78);

      var sloppyArrayMethod = __webpack_require__(81);

      var internalSome = arrayMethods(3);
      var SLOPPY_METHOD = sloppyArrayMethod('some'); // `Array.prototype.some` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.some

      $({
        target: 'Array',
        proto: true,
        forced: SLOPPY_METHOD },
      {
        some: function some(callbackfn
        /* , thisArg */)
        {
          return internalSome(this, callbackfn, arguments[1]);
        } });

      /***/
    },
    /* 122 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var aFunction = __webpack_require__(80);

      var toObject = __webpack_require__(51);

      var fails = __webpack_require__(6);

      var sloppyArrayMethod = __webpack_require__(81);

      var nativeSort = [].sort;
      var test = [1, 2, 3]; // IE8-

      var FAILS_ON_UNDEFINED = fails(function () {
        test.sort(undefined$1);
      }); // V8 bug

      var FAILS_ON_NULL = fails(function () {
        test.sort(null);
      }); // Old WebKit

      var SLOPPY_METHOD = sloppyArrayMethod('sort');
      var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || SLOPPY_METHOD; // `Array.prototype.sort` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.sort

      $({
        target: 'Array',
        proto: true,
        forced: FORCED },
      {
        sort: function sort(comparefn) {
          return comparefn === undefined$1 ? nativeSort.call(toObject(this)) : nativeSort.call(toObject(this), aFunction(comparefn));
        } });

      /***/
    },
    /* 123 */

    /***/
    function (module, exports, __webpack_require__) {
      var setSpecies = __webpack_require__(124); // `Array[@@species]` getter
      // https://tc39.github.io/ecma262/#sec-get-array-@@species


      setSpecies('Array');
      /***/
    },
    /* 124 */

    /***/
    function (module, exports, __webpack_require__) {
      var getBuiltIn = __webpack_require__(125);

      var definePropertyModule = __webpack_require__(19);

      var wellKnownSymbol = __webpack_require__(44);

      var DESCRIPTORS = __webpack_require__(5);

      var SPECIES = wellKnownSymbol('species');

      module.exports = function (CONSTRUCTOR_NAME) {
        var C = getBuiltIn(CONSTRUCTOR_NAME);
        var defineProperty = definePropertyModule.f;
        if (DESCRIPTORS && C && !C[SPECIES]) defineProperty(C, SPECIES, {
          configurable: true,
          get: function () {
            return this;
          } });

      };
      /***/

    },
    /* 125 */

    /***/
    function (module, exports, __webpack_require__) {
      var path = __webpack_require__(47);

      var global = __webpack_require__(3);

      var aFunction = function aFunction(variable) {
        return typeof variable == 'function' ? variable : undefined$1;
      };

      module.exports = function (namespace, method) {
        return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace]) : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
      };
      /***/

    },
    /* 126 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var toAbsoluteIndex = __webpack_require__(38);

      var toInteger = __webpack_require__(37);

      var toLength = __webpack_require__(36);

      var toObject = __webpack_require__(51);

      var arraySpeciesCreate = __webpack_require__(72);

      var createProperty = __webpack_require__(71);

      var arrayMethodHasSpeciesSupport = __webpack_require__(73);

      var max = Math.max;
      var min = Math.min;
      var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
      var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';
      var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice'); // `Array.prototype.splice` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.splice
      // with adding support of @@species

      $({
        target: 'Array',
        proto: true,
        forced: !SPECIES_SUPPORT },
      {
        splice: function splice(start, deleteCount
        /* , ...items */)
        {
          var O = toObject(this);
          var len = toLength(O.length);
          var actualStart = toAbsoluteIndex(start, len);
          var argumentsLength = arguments.length;
          var insertCount, actualDeleteCount, A, k, from, to;

          if (argumentsLength === 0) {
            insertCount = actualDeleteCount = 0;
          } else if (argumentsLength === 1) {
            insertCount = 0;
            actualDeleteCount = len - actualStart;
          } else {
            insertCount = argumentsLength - 2;
            actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);
          }

          if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
            throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
          }

          A = arraySpeciesCreate(O, actualDeleteCount);

          for (k = 0; k < actualDeleteCount; k++) {
            from = actualStart + k;
            if (from in O) createProperty(A, k, O[from]);
          }

          A.length = actualDeleteCount;

          if (insertCount < actualDeleteCount) {
            for (k = actualStart; k < len - actualDeleteCount; k++) {
              from = k + actualDeleteCount;
              to = k + insertCount;
              if (from in O) O[to] = O[from];else delete O[to];
            }

            for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
          } else if (insertCount > actualDeleteCount) {
            for (k = len - actualDeleteCount; k > actualStart; k--) {
              from = k + actualDeleteCount - 1;
              to = k + insertCount - 1;
              if (from in O) O[to] = O[from];else delete O[to];
            }
          }

          for (k = 0; k < insertCount; k++) {
            O[k + actualStart] = arguments[k + 2];
          }

          O.length = len - actualDeleteCount + insertCount;
          return A;
        } });

      /***/
    },
    /* 127 */

    /***/
    function (module, exports, __webpack_require__) {
      // this method was added to unscopables after implementation
      // in popular engines, so it's moved to a separate module
      var addToUnscopables = __webpack_require__(76);

      addToUnscopables('flat');
      /***/
    },
    /* 128 */

    /***/
    function (module, exports, __webpack_require__) {
      // this method was added to unscopables after implementation
      // in popular engines, so it's moved to a separate module
      var addToUnscopables = __webpack_require__(76);

      addToUnscopables('flatMap');
      /***/
    },
    /* 129 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var global = __webpack_require__(3);

      var arrayBufferModule = __webpack_require__(130);

      var setSpecies = __webpack_require__(124);

      var ARRAY_BUFFER = 'ArrayBuffer';
      var ArrayBuffer = arrayBufferModule[ARRAY_BUFFER];
      var NativeArrayBuffer = global[ARRAY_BUFFER]; // `ArrayBuffer` constructor
      // https://tc39.github.io/ecma262/#sec-arraybuffer-constructor

      $({
        global: true,
        forced: NativeArrayBuffer !== ArrayBuffer },
      {
        ArrayBuffer: ArrayBuffer });

      setSpecies(ARRAY_BUFFER);
      /***/
    },
    /* 130 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var DESCRIPTORS = __webpack_require__(5);

      var NATIVE_ARRAY_BUFFER = __webpack_require__(131).NATIVE_ARRAY_BUFFER;

      var hide = __webpack_require__(18);

      var redefineAll = __webpack_require__(132);

      var fails = __webpack_require__(6);

      var anInstance = __webpack_require__(133);

      var toInteger = __webpack_require__(37);

      var toLength = __webpack_require__(36);

      var toIndex = __webpack_require__(134);

      var getOwnPropertyNames = __webpack_require__(33).f;

      var defineProperty = __webpack_require__(19).f;

      var arrayFill = __webpack_require__(83);

      var setToStringTag = __webpack_require__(43);

      var InternalStateModule = __webpack_require__(26);

      var getInternalState = InternalStateModule.get;
      var setInternalState = InternalStateModule.set;
      var ARRAY_BUFFER = 'ArrayBuffer';
      var DATA_VIEW = 'DataView';
      var PROTOTYPE = 'prototype';
      var WRONG_LENGTH = 'Wrong length';
      var WRONG_INDEX = 'Wrong index';
      var NativeArrayBuffer = global[ARRAY_BUFFER];
      var $ArrayBuffer = NativeArrayBuffer;
      var $DataView = global[DATA_VIEW];
      var Math = global.Math;
      var RangeError = global.RangeError; // eslint-disable-next-line no-shadow-restricted-names

      var Infinity = 1 / 0;
      var abs = Math.abs;
      var pow = Math.pow;
      var floor = Math.floor;
      var log = Math.log;
      var LN2 = Math.LN2; // IEEE754 conversions based on https://github.com/feross/ieee754

      var packIEEE754 = function packIEEE754(number, mantissaLength, bytes) {
        var buffer = new Array(bytes);
        var exponentLength = bytes * 8 - mantissaLength - 1;
        var eMax = (1 << exponentLength) - 1;
        var eBias = eMax >> 1;
        var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
        var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
        var index = 0;
        var exponent, mantissa, c;
        number = abs(number); // eslint-disable-next-line no-self-compare

        if (number != number || number === Infinity) {
          // eslint-disable-next-line no-self-compare
          mantissa = number != number ? 1 : 0;
          exponent = eMax;
        } else {
          exponent = floor(log(number) / LN2);

          if (number * (c = pow(2, -exponent)) < 1) {
            exponent--;
            c *= 2;
          }

          if (exponent + eBias >= 1) {
            number += rt / c;
          } else {
            number += rt * pow(2, 1 - eBias);
          }

          if (number * c >= 2) {
            exponent++;
            c /= 2;
          }

          if (exponent + eBias >= eMax) {
            mantissa = 0;
            exponent = eMax;
          } else if (exponent + eBias >= 1) {
            mantissa = (number * c - 1) * pow(2, mantissaLength);
            exponent = exponent + eBias;
          } else {
            mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
            exponent = 0;
          }
        }

        for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);

        exponent = exponent << mantissaLength | mantissa;
        exponentLength += mantissaLength;

        for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);

        buffer[--index] |= sign * 128;
        return buffer;
      };

      var unpackIEEE754 = function unpackIEEE754(buffer, mantissaLength) {
        var bytes = buffer.length;
        var exponentLength = bytes * 8 - mantissaLength - 1;
        var eMax = (1 << exponentLength) - 1;
        var eBias = eMax >> 1;
        var nBits = exponentLength - 7;
        var index = bytes - 1;
        var sign = buffer[index--];
        var exponent = sign & 127;
        var mantissa;
        sign >>= 7;

        for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);

        mantissa = exponent & (1 << -nBits) - 1;
        exponent >>= -nBits;
        nBits += mantissaLength;

        for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);

        if (exponent === 0) {
          exponent = 1 - eBias;
        } else if (exponent === eMax) {
          return mantissa ? NaN : sign ? -Infinity : Infinity;
        } else {
          mantissa = mantissa + pow(2, mantissaLength);
          exponent = exponent - eBias;
        }

        return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
      };

      var unpackInt32 = function unpackInt32(buffer) {
        return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
      };

      var packInt8 = function packInt8(number) {
        return [number & 0xFF];
      };

      var packInt16 = function packInt16(number) {
        return [number & 0xFF, number >> 8 & 0xFF];
      };

      var packInt32 = function packInt32(number) {
        return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
      };

      var packFloat32 = function packFloat32(number) {
        return packIEEE754(number, 23, 4);
      };

      var packFloat64 = function packFloat64(number) {
        return packIEEE754(number, 52, 8);
      };

      var addGetter = function addGetter(Constructor, key) {
        defineProperty(Constructor[PROTOTYPE], key, {
          get: function () {
            return getInternalState(this)[key];
          } });

      };

      var get = function get(view, count, index, isLittleEndian) {
        var numIndex = +index;
        var intIndex = toIndex(numIndex);
        var store = getInternalState(view);
        if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
        var bytes = getInternalState(store.buffer).bytes;
        var start = intIndex + store.byteOffset;
        var pack = bytes.slice(start, start + count);
        return isLittleEndian ? pack : pack.reverse();
      };

      var set = function set(view, count, index, conversion, value, isLittleEndian) {
        var numIndex = +index;
        var intIndex = toIndex(numIndex);
        var store = getInternalState(view);
        if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
        var bytes = getInternalState(store.buffer).bytes;
        var start = intIndex + store.byteOffset;
        var pack = conversion(+value);

        for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
      };

      if (!NATIVE_ARRAY_BUFFER) {
        $ArrayBuffer = function ArrayBuffer(length) {
          anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
          var byteLength = toIndex(length);
          setInternalState(this, {
            bytes: arrayFill.call(new Array(byteLength), 0),
            byteLength: byteLength });

          if (!DESCRIPTORS) this.byteLength = byteLength;
        };

        $DataView = function DataView(buffer, byteOffset, byteLength) {
          anInstance(this, $DataView, DATA_VIEW);
          anInstance(buffer, $ArrayBuffer, DATA_VIEW);
          var bufferLength = getInternalState(buffer).byteLength;
          var offset = toInteger(byteOffset);
          if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset');
          byteLength = byteLength === undefined$1 ? bufferLength - offset : toLength(byteLength);
          if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
          setInternalState(this, {
            buffer: buffer,
            byteLength: byteLength,
            byteOffset: offset });


          if (!DESCRIPTORS) {
            this.buffer = buffer;
            this.byteLength = byteLength;
            this.byteOffset = offset;
          }
        };

        if (DESCRIPTORS) {
          addGetter($ArrayBuffer, 'byteLength');
          addGetter($DataView, 'buffer');
          addGetter($DataView, 'byteLength');
          addGetter($DataView, 'byteOffset');
        }

        redefineAll($DataView[PROTOTYPE], {
          getInt8: function getInt8(byteOffset) {
            return get(this, 1, byteOffset)[0] << 24 >> 24;
          },
          getUint8: function getUint8(byteOffset) {
            return get(this, 1, byteOffset)[0];
          },
          getInt16: function getInt16(byteOffset
          /* , littleEndian */)
          {
            var bytes = get(this, 2, byteOffset, arguments[1]);
            return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
          },
          getUint16: function getUint16(byteOffset
          /* , littleEndian */)
          {
            var bytes = get(this, 2, byteOffset, arguments[1]);
            return bytes[1] << 8 | bytes[0];
          },
          getInt32: function getInt32(byteOffset
          /* , littleEndian */)
          {
            return unpackInt32(get(this, 4, byteOffset, arguments[1]));
          },
          getUint32: function getUint32(byteOffset
          /* , littleEndian */)
          {
            return unpackInt32(get(this, 4, byteOffset, arguments[1])) >>> 0;
          },
          getFloat32: function getFloat32(byteOffset
          /* , littleEndian */)
          {
            return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23);
          },
          getFloat64: function getFloat64(byteOffset
          /* , littleEndian */)
          {
            return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52);
          },
          setInt8: function setInt8(byteOffset, value) {
            set(this, 1, byteOffset, packInt8, value);
          },
          setUint8: function setUint8(byteOffset, value) {
            set(this, 1, byteOffset, packInt8, value);
          },
          setInt16: function setInt16(byteOffset, value
          /* , littleEndian */)
          {
            set(this, 2, byteOffset, packInt16, value, arguments[2]);
          },
          setUint16: function setUint16(byteOffset, value
          /* , littleEndian */)
          {
            set(this, 2, byteOffset, packInt16, value, arguments[2]);
          },
          setInt32: function setInt32(byteOffset, value
          /* , littleEndian */)
          {
            set(this, 4, byteOffset, packInt32, value, arguments[2]);
          },
          setUint32: function setUint32(byteOffset, value
          /* , littleEndian */)
          {
            set(this, 4, byteOffset, packInt32, value, arguments[2]);
          },
          setFloat32: function setFloat32(byteOffset, value
          /* , littleEndian */)
          {
            set(this, 4, byteOffset, packFloat32, value, arguments[2]);
          },
          setFloat64: function setFloat64(byteOffset, value
          /* , littleEndian */)
          {
            set(this, 8, byteOffset, packFloat64, value, arguments[2]);
          } });

      } else {
        if (!fails(function () {
          NativeArrayBuffer(1);
        }) || !fails(function () {
          new NativeArrayBuffer(-1); // eslint-disable-line no-new
        }) || fails(function () {
          new NativeArrayBuffer(); // eslint-disable-line no-new

          new NativeArrayBuffer(1.5); // eslint-disable-line no-new

          new NativeArrayBuffer(NaN); // eslint-disable-line no-new

          return NativeArrayBuffer.name != ARRAY_BUFFER;
        })) {
          $ArrayBuffer = function ArrayBuffer(length) {
            anInstance(this, $ArrayBuffer);
            return new NativeArrayBuffer(toIndex(length));
          };

          var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE] = NativeArrayBuffer[PROTOTYPE];

          for (var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key; keys.length > j;) {
            if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, NativeArrayBuffer[key]);
          }

          ArrayBufferPrototype.constructor = $ArrayBuffer;
        } // iOS Safari 7.x bug


        var testView = new $DataView(new $ArrayBuffer(2));
        var nativeSetInt8 = $DataView[PROTOTYPE].setInt8;
        testView.setInt8(0, 2147483648);
        testView.setInt8(1, 2147483649);
        if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
          setInt8: function setInt8(byteOffset, value) {
            nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
          },
          setUint8: function setUint8(byteOffset, value) {
            nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
          } },
        {
          unsafe: true });

      }

      setToStringTag($ArrayBuffer, ARRAY_BUFFER);
      setToStringTag($DataView, DATA_VIEW);
      exports[ARRAY_BUFFER] = $ArrayBuffer;
      exports[DATA_VIEW] = $DataView;
      /***/
    },
    /* 131 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(5);

      var global = __webpack_require__(3);

      var isObject = __webpack_require__(14);

      var has = __webpack_require__(15);

      var classof = __webpack_require__(98);

      var hide = __webpack_require__(18);

      var redefine = __webpack_require__(21);

      var defineProperty = __webpack_require__(19).f;

      var getPrototypeOf = __webpack_require__(107);

      var setPrototypeOf = __webpack_require__(109);

      var wellKnownSymbol = __webpack_require__(44);

      var uid = __webpack_require__(29);

      var DataView = global.DataView;
      var DataViewPrototype = DataView && DataView.prototype;
      var Int8Array = global.Int8Array;
      var Int8ArrayPrototype = Int8Array && Int8Array.prototype;
      var Uint8ClampedArray = global.Uint8ClampedArray;
      var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
      var TypedArray = Int8Array && getPrototypeOf(Int8Array);
      var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
      var ObjectPrototype = Object.prototype;
      var isPrototypeOf = ObjectPrototype.isPrototypeOf;
      var TO_STRING_TAG = wellKnownSymbol('toStringTag');
      var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
      var NATIVE_ARRAY_BUFFER = !!(global.ArrayBuffer && global.DataView);
      var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf;
      var TYPED_ARRAY_TAG_REQIRED = false;
      var NAME;
      var TypedArrayConstructorsList = {
        Int8Array: 1,
        Uint8Array: 1,
        Uint8ClampedArray: 1,
        Int16Array: 2,
        Uint16Array: 2,
        Int32Array: 4,
        Uint32Array: 4,
        Float32Array: 4,
        Float64Array: 8 };


      var isView = function isView(it) {
        var klass = classof(it);
        return klass === 'DataView' || has(TypedArrayConstructorsList, klass);
      };

      var isTypedArray = function isTypedArray(it) {
        return isObject(it) && has(TypedArrayConstructorsList, classof(it));
      };

      var aTypedArray = function aTypedArray(it) {
        if (isTypedArray(it)) return it;
        throw TypeError('Target is not a typed array');
      };

      var aTypedArrayConstructor = function aTypedArrayConstructor(C) {
        if (setPrototypeOf) {
          if (isPrototypeOf.call(TypedArray, C)) return C;
        } else for (var ARRAY in TypedArrayConstructorsList) if (has(TypedArrayConstructorsList, NAME)) {
          var TypedArrayConstructor = global[ARRAY];

          if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {
            return C;
          }
        }

        throw TypeError('Target is not a typed array constructor');
      };

      var exportProto = function exportProto(KEY, property, forced) {
        if (!DESCRIPTORS) return;
        if (forced) for (var ARRAY in TypedArrayConstructorsList) {
          var TypedArrayConstructor = global[ARRAY];

          if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {
            delete TypedArrayConstructor.prototype[KEY];
          }
        }

        if (!TypedArrayPrototype[KEY] || forced) {
          redefine(TypedArrayPrototype, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
        }
      };

      var exportStatic = function exportStatic(KEY, property, forced) {
        var ARRAY, TypedArrayConstructor;
        if (!DESCRIPTORS) return;

        if (setPrototypeOf) {
          if (forced) for (ARRAY in TypedArrayConstructorsList) {
            TypedArrayConstructor = global[ARRAY];

            if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {
              delete TypedArrayConstructor[KEY];
            }
          }

          if (!TypedArray[KEY] || forced) {
            // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
            try {
              return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array[KEY] || property);
            } catch (error) {
              /* empty */
            }
          } else return;
        }

        for (ARRAY in TypedArrayConstructorsList) {
          TypedArrayConstructor = global[ARRAY];

          if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
            redefine(TypedArrayConstructor, KEY, property);
          }
        }
      };

      for (NAME in TypedArrayConstructorsList) {
        if (!global[NAME]) NATIVE_ARRAY_BUFFER_VIEWS = false;
      } // WebKit bug - typed arrays constructors prototype is Object.prototype


      if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {
        // eslint-disable-next-line no-shadow
        TypedArray = function TypedArray() {
          throw TypeError('Incorrect invocation');
        };

        if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
          if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);
        }
      }

      if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
        TypedArrayPrototype = TypedArray.prototype;
        if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
          if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);
        }
      } // WebKit bug - one more object in Uint8ClampedArray prototype chain


      if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
        setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
      }

      if (DESCRIPTORS && !has(TypedArrayPrototype, TO_STRING_TAG)) {
        TYPED_ARRAY_TAG_REQIRED = true;
        defineProperty(TypedArrayPrototype, TO_STRING_TAG, {
          get: function () {
            return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined$1;
          } });


        for (NAME in TypedArrayConstructorsList) if (global[NAME]) {
          hide(global[NAME], TYPED_ARRAY_TAG, NAME);
        }
      } // WebKit bug - the same parent prototype for typed arrays and data view


      if (NATIVE_ARRAY_BUFFER && setPrototypeOf && getPrototypeOf(DataViewPrototype) !== ObjectPrototype) {
        setPrototypeOf(DataViewPrototype, ObjectPrototype);
      }

      module.exports = {
        NATIVE_ARRAY_BUFFER: NATIVE_ARRAY_BUFFER,
        NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
        TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
        aTypedArray: aTypedArray,
        aTypedArrayConstructor: aTypedArrayConstructor,
        exportProto: exportProto,
        exportStatic: exportStatic,
        isView: isView,
        isTypedArray: isTypedArray,
        TypedArray: TypedArray,
        TypedArrayPrototype: TypedArrayPrototype };

      /***/
    },
    /* 132 */

    /***/
    function (module, exports, __webpack_require__) {
      var redefine = __webpack_require__(21);

      module.exports = function (target, src, options) {
        for (var key in src) redefine(target, key, src[key], options);

        return target;
      };
      /***/

    },
    /* 133 */

    /***/
    function (module, exports) {
      module.exports = function (it, Constructor, name) {
        if (!(it instanceof Constructor)) {
          throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
        }

        return it;
      };
      /***/

    },
    /* 134 */

    /***/
    function (module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(37);

      var toLength = __webpack_require__(36); // `ToIndex` abstract operation
      // https://tc39.github.io/ecma262/#sec-toindex


      module.exports = function (it) {
        if (it === undefined$1) return 0;
        var number = toInteger(it);
        var length = toLength(number);
        if (number !== length) throw RangeError('Wrong length or index');
        return length;
      };
      /***/

    },
    /* 135 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var ArrayBufferViewCore = __webpack_require__(131);

      var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS; // `ArrayBuffer.isView` method
      // https://tc39.github.io/ecma262/#sec-arraybuffer.isview

      $({
        target: 'ArrayBuffer',
        stat: true,
        forced: !NATIVE_ARRAY_BUFFER_VIEWS },
      {
        isView: ArrayBufferViewCore.isView });

      /***/
    },
    /* 136 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var fails = __webpack_require__(6);

      var ArrayBufferModule = __webpack_require__(130);

      var anObject = __webpack_require__(20);

      var toAbsoluteIndex = __webpack_require__(38);

      var toLength = __webpack_require__(36);

      var speciesConstructor = __webpack_require__(137);

      var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
      var DataView = ArrayBufferModule.DataView;
      var nativeArrayBufferSlice = ArrayBuffer.prototype.slice;
      var INCORRECT_SLICE = fails(function () {
        return !new ArrayBuffer(2).slice(1, undefined$1).byteLength;
      }); // `ArrayBuffer.prototype.slice` method
      // https://tc39.github.io/ecma262/#sec-arraybuffer.prototype.slice

      $({
        target: 'ArrayBuffer',
        proto: true,
        unsafe: true,
        forced: INCORRECT_SLICE },
      {
        slice: function slice(start, end) {
          if (nativeArrayBufferSlice !== undefined$1 && end === undefined$1) {
            return nativeArrayBufferSlice.call(anObject(this), start); // FF fix
          }

          var length = anObject(this).byteLength;
          var first = toAbsoluteIndex(start, length);
          var fin = toAbsoluteIndex(end === undefined$1 ? length : end, length);
          var result = new (speciesConstructor(this, ArrayBuffer))(toLength(fin - first));
          var viewSource = new DataView(this);
          var viewTarget = new DataView(result);
          var index = 0;

          while (first < fin) {
            viewTarget.setUint8(index++, viewSource.getUint8(first++));
          }

          return result;
        } });

      /***/
    },
    /* 137 */

    /***/
    function (module, exports, __webpack_require__) {
      var anObject = __webpack_require__(20);

      var aFunction = __webpack_require__(80);

      var wellKnownSymbol = __webpack_require__(44);

      var SPECIES = wellKnownSymbol('species'); // `SpeciesConstructor` abstract operation
      // https://tc39.github.io/ecma262/#sec-speciesconstructor

      module.exports = function (O, defaultConstructor) {
        var C = anObject(O).constructor;
        var S;
        return C === undefined$1 || (S = anObject(C)[SPECIES]) == undefined$1 ? defaultConstructor : aFunction(S);
      };
      /***/

    },
    /* 138 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var ArrayBufferModule = __webpack_require__(130);

      var NATIVE_ARRAY_BUFFER = __webpack_require__(131).NATIVE_ARRAY_BUFFER; // `DataView` constructor
      // https://tc39.github.io/ecma262/#sec-dataview-constructor


      $({
        global: true,
        forced: !NATIVE_ARRAY_BUFFER },
      {
        DataView: ArrayBufferModule.DataView });

      /***/
    },
    /* 139 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2); // `Date.now` method
      // https://tc39.github.io/ecma262/#sec-date.now


      $({
        target: 'Date',
        stat: true },
      {
        now: function now() {
          return new Date().getTime();
        } });

      /***/
    },
    /* 140 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var toISOString = __webpack_require__(141); // `Date.prototype.toISOString` method
      // https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
      // PhantomJS / old WebKit has a broken implementations


      $({
        target: 'Date',
        proto: true,
        forced: Date.prototype.toISOString !== toISOString },
      {
        toISOString: toISOString });

      /***/
    },
    /* 141 */

    /***/
    function (module, exports, __webpack_require__) {
      var fails = __webpack_require__(6);

      var prototype = Date.prototype;
      var getTime = prototype.getTime;
      var nativeDateToISOString = prototype.toISOString;

      var leadingZero = function leadingZero(number) {
        return number > 9 ? number : '0' + number;
      }; // `Date.prototype.toISOString` method implementation
      // https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
      // PhantomJS / old WebKit fails here:


      module.exports = fails(function () {
        return nativeDateToISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
      }) || !fails(function () {
        nativeDateToISOString.call(new Date(NaN));
      }) ? function toISOString() {
        if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
        var date = this;
        var year = date.getUTCFullYear();
        var milliseconds = date.getUTCMilliseconds();
        var sign = year < 0 ? '-' : year > 9999 ? '+' : '';
        return sign + ('00000' + Math.abs(year)).slice(sign ? -6 : -4) + '-' + leadingZero(date.getUTCMonth() + 1) + '-' + leadingZero(date.getUTCDate()) + 'T' + leadingZero(date.getUTCHours()) + ':' + leadingZero(date.getUTCMinutes()) + ':' + leadingZero(date.getUTCSeconds()) + '.' + (milliseconds > 99 ? milliseconds : '0' + leadingZero(milliseconds)) + 'Z';
      } : nativeDateToISOString;
      /***/
    },
    /* 142 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var fails = __webpack_require__(6);

      var toObject = __webpack_require__(51);

      var toPrimitive = __webpack_require__(13);

      var FORCED = fails(function () {
        return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({
          toISOString: function () {
            return 1;
          } }) !==
        1;
      }); // `Date.prototype.toJSON` method
      // https://tc39.github.io/ecma262/#sec-date.prototype.tojson

      $({
        target: 'Date',
        proto: true,
        forced: FORCED },
      {
        // eslint-disable-next-line no-unused-vars
        toJSON: function toJSON(key) {
          var O = toObject(this);
          var pv = toPrimitive(O);
          return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
        } });

      /***/
    },
    /* 143 */

    /***/
    function (module, exports, __webpack_require__) {
      var hide = __webpack_require__(18);

      var dateToPrimitive = __webpack_require__(144);

      var wellKnownSymbol = __webpack_require__(44);

      var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
      var DatePrototype = Date.prototype; // `Date.prototype[@@toPrimitive]` method
      // https://tc39.github.io/ecma262/#sec-date.prototype-@@toprimitive

      if (!(TO_PRIMITIVE in DatePrototype)) hide(DatePrototype, TO_PRIMITIVE, dateToPrimitive);
      /***/
    },
    /* 144 */

    /***/
    function (module, exports, __webpack_require__) {
      var anObject = __webpack_require__(20);

      var toPrimitive = __webpack_require__(13);

      module.exports = function (hint) {
        if (hint !== 'string' && hint !== 'number' && hint !== 'default') {
          throw TypeError('Incorrect hint');
        }

        return toPrimitive(anObject(this), hint !== 'number');
      };
      /***/

    },
    /* 145 */

    /***/
    function (module, exports, __webpack_require__) {
      var redefine = __webpack_require__(21);

      var DatePrototype = Date.prototype;
      var INVALID_DATE = 'Invalid Date';
      var TO_STRING = 'toString';
      var nativeDateToString = DatePrototype[TO_STRING];
      var getTime = DatePrototype.getTime; // `Date.prototype.toString` method
      // https://tc39.github.io/ecma262/#sec-date.prototype.tostring

      if (new Date(NaN) + '' != INVALID_DATE) {
        redefine(DatePrototype, TO_STRING, function toString() {
          var value = getTime.call(this); // eslint-disable-next-line no-self-compare

          return value === value ? nativeDateToString.call(this) : INVALID_DATE;
        });
      }
      /***/

    },
    /* 146 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var bind = __webpack_require__(147); // `Function.prototype.bind` method
      // https://tc39.github.io/ecma262/#sec-function.prototype.bind


      $({
        target: 'Function',
        proto: true },
      {
        bind: bind });

      /***/
    },
    /* 147 */

    /***/
    function (module, exports, __webpack_require__) {
      var aFunction = __webpack_require__(80);

      var isObject = __webpack_require__(14);

      var arraySlice = [].slice;
      var factories = {};

      var construct = function construct(C, argsLength, args) {
        if (!(argsLength in factories)) {
          for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']'; // eslint-disable-next-line no-new-func


          factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
        }

        return factories[argsLength](C, args);
      }; // `Function.prototype.bind` method implementation
      // https://tc39.github.io/ecma262/#sec-function.prototype.bind


      module.exports = Function.bind || function bind(that
      /* , ...args */)
      {
        var fn = aFunction(this);
        var partArgs = arraySlice.call(arguments, 1);

        var boundFunction = function bound()
        /* args... */
        {
          var args = partArgs.concat(arraySlice.call(arguments));
          return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
        };

        if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
        return boundFunction;
      };
      /***/

    },
    /* 148 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(14);

      var definePropertyModule = __webpack_require__(19);

      var getPrototypeOf = __webpack_require__(107);

      var wellKnownSymbol = __webpack_require__(44);

      var HAS_INSTANCE = wellKnownSymbol('hasInstance');
      var FunctionPrototype = Function.prototype; // `Function.prototype[@@hasInstance]` method
      // https://tc39.github.io/ecma262/#sec-function.prototype-@@hasinstance

      if (!(HAS_INSTANCE in FunctionPrototype)) {
        definePropertyModule.f(FunctionPrototype, HAS_INSTANCE, {
          value: function (O) {
            if (typeof this != 'function' || !isObject(O)) return false;
            if (!isObject(this.prototype)) return O instanceof this; // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

            while (O = getPrototypeOf(O)) if (this.prototype === O) return true;

            return false;
          } });

      }
      /***/

    },
    /* 149 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(5);

      var defineProperty = __webpack_require__(19).f;

      var FunctionPrototype = Function.prototype;
      var FunctionPrototypeToString = FunctionPrototype.toString;
      var nameRE = /^\s*function ([^ (]*)/;
      var NAME = 'name'; // Function instances `.name` property
      // https://tc39.github.io/ecma262/#sec-function-instances-name

      if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
        defineProperty(FunctionPrototype, NAME, {
          configurable: true,
          get: function () {
            try {
              return FunctionPrototypeToString.call(this).match(nameRE)[1];
            } catch (error) {
              return '';
            }
          } });

      }
      /***/

    },
    /* 150 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var setToStringTag = __webpack_require__(43); // JSON[@@toStringTag] property
      // https://tc39.github.io/ecma262/#sec-json-@@tostringtag


      setToStringTag(global.JSON, 'JSON', true);
      /***/
    },
    /* 151 */

    /***/
    function (module, exports, __webpack_require__) {
      var collection = __webpack_require__(152);

      var collectionStrong = __webpack_require__(157); // `Map` constructor
      // https://tc39.github.io/ecma262/#sec-map-objects


      module.exports = collection('Map', function (get) {
        return function Map() {
          return get(this, arguments.length > 0 ? arguments[0] : undefined$1);
        };
      }, collectionStrong, true);
      /***/
    },
    /* 152 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var global = __webpack_require__(3);

      var isForced = __webpack_require__(41);

      var redefine = __webpack_require__(21);

      var InternalMetadataModule = __webpack_require__(153);

      var iterate = __webpack_require__(155);

      var anInstance = __webpack_require__(133);

      var isObject = __webpack_require__(14);

      var fails = __webpack_require__(6);

      var checkCorrectnessOfIteration = __webpack_require__(99);

      var setToStringTag = __webpack_require__(43);

      var inheritIfRequired = __webpack_require__(156);

      module.exports = function (CONSTRUCTOR_NAME, wrapper, common, IS_MAP, IS_WEAK) {
        var NativeConstructor = global[CONSTRUCTOR_NAME];
        var NativePrototype = NativeConstructor && NativeConstructor.prototype;
        var Constructor = NativeConstructor;
        var ADDER = IS_MAP ? 'set' : 'add';
        var exported = {};

        var fixMethod = function fixMethod(KEY) {
          var nativeMethod = NativePrototype[KEY];
          redefine(NativePrototype, KEY, KEY == 'add' ? function add(a) {
            nativeMethod.call(this, a === 0 ? 0 : a);
            return this;
          } : KEY == 'delete' ? function (a) {
            return IS_WEAK && !isObject(a) ? false : nativeMethod.call(this, a === 0 ? 0 : a);
          } : KEY == 'get' ? function get(a) {
            return IS_WEAK && !isObject(a) ? undefined$1 : nativeMethod.call(this, a === 0 ? 0 : a);
          } : KEY == 'has' ? function has(a) {
            return IS_WEAK && !isObject(a) ? false : nativeMethod.call(this, a === 0 ? 0 : a);
          } : function set(a, b) {
            nativeMethod.call(this, a === 0 ? 0 : a, b);
            return this;
          });
        }; // eslint-disable-next-line max-len


        if (isForced(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
          new NativeConstructor().entries().next();
        })))) {
          // create collection constructor
          Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
          InternalMetadataModule.REQUIRED = true;
        } else if (isForced(CONSTRUCTOR_NAME, true)) {
          var instance = new Constructor(); // early implementations not supports chaining

          var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance; // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false

          var THROWS_ON_PRIMITIVES = fails(function () {
            instance.has(1);
          }); // most early implementations doesn't supports iterables, most modern - not close it correctly
          // eslint-disable-next-line no-new

          var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) {
            new NativeConstructor(iterable);
          }); // for early implementations -0 and +0 not the same

          var BUGGY_ZERO = !IS_WEAK && fails(function () {
            // V8 ~ Chromium 42- fails only with 5+ elements
            var $instance = new NativeConstructor();
            var index = 5;

            while (index--) $instance[ADDER](index, index);

            return !$instance.has(-0);
          });

          if (!ACCEPT_ITERABLES) {
            Constructor = wrapper(function (target, iterable) {
              anInstance(target, Constructor, CONSTRUCTOR_NAME);
              var that = inheritIfRequired(new NativeConstructor(), target, Constructor);
              if (iterable != undefined$1) iterate(iterable, that[ADDER], that, IS_MAP);
              return that;
            });
            Constructor.prototype = NativePrototype;
            NativePrototype.constructor = Constructor;
          }

          if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
            fixMethod('delete');
            fixMethod('has');
            IS_MAP && fixMethod('get');
          }

          if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // weak collections should not contains .clear method

          if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
        }

        exported[CONSTRUCTOR_NAME] = Constructor;
        $({
          global: true,
          forced: Constructor != NativeConstructor },
        exported);
        setToStringTag(Constructor, CONSTRUCTOR_NAME);
        if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
        return Constructor;
      };
      /***/

    },
    /* 153 */

    /***/
    function (module, exports, __webpack_require__) {
      var hiddenKeys = __webpack_require__(30);

      var isObject = __webpack_require__(14);

      var has = __webpack_require__(15);

      var defineProperty = __webpack_require__(19).f;

      var uid = __webpack_require__(29);

      var FREEZING = __webpack_require__(154);

      var METADATA = uid('meta');
      var id = 0;

      var isExtensible = Object.isExtensible || function () {
        return true;
      };

      var setMetadata = function setMetadata(it) {
        defineProperty(it, METADATA, {
          value: {
            objectID: 'O' + ++id,
            // object ID
            weakData: {} // weak collections IDs
          } });


      };

      var fastKey = function fastKey(it, create) {
        // return a primitive with prefix
        if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

        if (!has(it, METADATA)) {
          // can't set metadata to uncaught frozen object
          if (!isExtensible(it)) return 'F'; // not necessary to add metadata

          if (!create) return 'E'; // add missing metadata

          setMetadata(it); // return object ID
        }

        return it[METADATA].objectID;
      };

      var getWeakData = function getWeakData(it, create) {
        if (!has(it, METADATA)) {
          // can't set metadata to uncaught frozen object
          if (!isExtensible(it)) return true; // not necessary to add metadata

          if (!create) return false; // add missing metadata

          setMetadata(it); // return the store of weak collections IDs
        }

        return it[METADATA].weakData;
      }; // add metadata on freeze-family methods calling


      var onFreeze = function onFreeze(it) {
        if (FREEZING && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
        return it;
      };

      var meta = module.exports = {
        REQUIRED: false,
        fastKey: fastKey,
        getWeakData: getWeakData,
        onFreeze: onFreeze };

      hiddenKeys[METADATA] = true;
      /***/
    },
    /* 154 */

    /***/
    function (module, exports, __webpack_require__) {
      var fails = __webpack_require__(6);

      module.exports = !fails(function () {
        return Object.isExtensible(Object.preventExtensions({}));
      });
      /***/
    },
    /* 155 */

    /***/
    function (module, exports, __webpack_require__) {
      var anObject = __webpack_require__(20);

      var isArrayIteratorMethod = __webpack_require__(95);

      var toLength = __webpack_require__(36);

      var bind = __webpack_require__(79);

      var getIteratorMethod = __webpack_require__(97);

      var callWithSafeIterationClosing = __webpack_require__(94);

      var BREAK = {};

      var exports = module.exports = function (iterable, fn, that, ENTRIES, ITERATOR) {
        var boundFunction = bind(fn, that, ENTRIES ? 2 : 1);
        var iterator, iterFn, index, length, result, step;

        if (ITERATOR) {
          iterator = iterable;
        } else {
          iterFn = getIteratorMethod(iterable);
          if (typeof iterFn != 'function') throw TypeError('Target is not iterable'); // optimisation for array iterators

          if (isArrayIteratorMethod(iterFn)) {
            for (index = 0, length = toLength(iterable.length); length > index; index++) {
              result = ENTRIES ? boundFunction(anObject(step = iterable[index])[0], step[1]) : boundFunction(iterable[index]);
              if (result === BREAK) return BREAK;
            }

            return;
          }

          iterator = iterFn.call(iterable);
        }

        while (!(step = iterator.next()).done) {
          if (callWithSafeIterationClosing(iterator, boundFunction, step.value, ENTRIES) === BREAK) return BREAK;
        }
      };

      exports.BREAK = BREAK;
      /***/
    },
    /* 156 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(14);

      var setPrototypeOf = __webpack_require__(109);

      module.exports = function (that, target, C) {
        var S = target.constructor;
        var P;

        if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
          setPrototypeOf(that, P);
        }

        return that;
      };
      /***/

    },
    /* 157 */

    /***/
    function (module, exports, __webpack_require__) {
      var defineProperty = __webpack_require__(19).f;

      var create = __webpack_require__(52);

      var redefineAll = __webpack_require__(132);

      var bind = __webpack_require__(79);

      var anInstance = __webpack_require__(133);

      var iterate = __webpack_require__(155);

      var defineIterator = __webpack_require__(104);

      var setSpecies = __webpack_require__(124);

      var DESCRIPTORS = __webpack_require__(5);

      var fastKey = __webpack_require__(153).fastKey;

      var InternalStateModule = __webpack_require__(26);

      var setInternalState = InternalStateModule.set;
      var internalStateGetterFor = InternalStateModule.getterFor;
      module.exports = {
        getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
          var C = wrapper(function (that, iterable) {
            anInstance(that, C, CONSTRUCTOR_NAME);
            setInternalState(that, {
              type: CONSTRUCTOR_NAME,
              index: create(null),
              first: undefined$1,
              last: undefined$1,
              size: 0 });

            if (!DESCRIPTORS) that.size = 0;
            if (iterable != undefined$1) iterate(iterable, that[ADDER], that, IS_MAP);
          });
          var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

          var define = function define(that, key, value) {
            var state = getInternalState(that);
            var entry = getEntry(that, key);
            var previous, index; // change existing entry

            if (entry) {
              entry.value = value; // create new entry
            } else {
              state.last = entry = {
                index: index = fastKey(key, true),
                key: key,
                value: value,
                previous: previous = state.last,
                next: undefined$1,
                removed: false };

              if (!state.first) state.first = entry;
              if (previous) previous.next = entry;
              if (DESCRIPTORS) state.size++;else that.size++; // add to index

              if (index !== 'F') state.index[index] = entry;
            }

            return that;
          };

          var getEntry = function getEntry(that, key) {
            var state = getInternalState(that); // fast case

            var index = fastKey(key);
            var entry;
            if (index !== 'F') return state.index[index]; // frozen object case

            for (entry = state.first; entry; entry = entry.next) {
              if (entry.key == key) return entry;
            }
          };

          redefineAll(C.prototype, {
            // 23.1.3.1 Map.prototype.clear()
            // 23.2.3.2 Set.prototype.clear()
            clear: function clear() {
              var that = this;
              var state = getInternalState(that);
              var data = state.index;
              var entry = state.first;

              while (entry) {
                entry.removed = true;
                if (entry.previous) entry.previous = entry.previous.next = undefined$1;
                delete data[entry.index];
                entry = entry.next;
              }

              state.first = state.last = undefined$1;
              if (DESCRIPTORS) state.size = 0;else that.size = 0;
            },
            // 23.1.3.3 Map.prototype.delete(key)
            // 23.2.3.4 Set.prototype.delete(value)
            'delete': function (key) {
              var that = this;
              var state = getInternalState(that);
              var entry = getEntry(that, key);

              if (entry) {
                var next = entry.next;
                var prev = entry.previous;
                delete state.index[entry.index];
                entry.removed = true;
                if (prev) prev.next = next;
                if (next) next.previous = prev;
                if (state.first == entry) state.first = next;
                if (state.last == entry) state.last = prev;
                if (DESCRIPTORS) state.size--;else that.size--;
              }

              return !!entry;
            },
            // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
            // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
            forEach: function forEach(callbackfn
            /* , that = undefined */)
            {
              var state = getInternalState(this);
              var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined$1, 3);
              var entry;

              while (entry = entry ? entry.next : state.first) {
                boundFunction(entry.value, entry.key, this); // revert to the last existing entry

                while (entry && entry.removed) entry = entry.previous;
              }
            },
            // 23.1.3.7 Map.prototype.has(key)
            // 23.2.3.7 Set.prototype.has(value)
            has: function has(key) {
              return !!getEntry(this, key);
            } });

          redefineAll(C.prototype, IS_MAP ? {
            // 23.1.3.6 Map.prototype.get(key)
            get: function get(key) {
              var entry = getEntry(this, key);
              return entry && entry.value;
            },
            // 23.1.3.9 Map.prototype.set(key, value)
            set: function set(key, value) {
              return define(this, key === 0 ? 0 : key, value);
            } } :
          {
            // 23.2.3.1 Set.prototype.add(value)
            add: function add(value) {
              return define(this, value = value === 0 ? 0 : value, value);
            } });

          if (DESCRIPTORS) defineProperty(C.prototype, 'size', {
            get: function () {
              return getInternalState(this).size;
            } });

          return C;
        },
        setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
          var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
          var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
          var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME); // add .keys, .values, .entries, [@@iterator]
          // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11

          defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
            setInternalState(this, {
              type: ITERATOR_NAME,
              target: iterated,
              state: getInternalCollectionState(iterated),
              kind: kind,
              last: undefined$1 });

          }, function () {
            var state = getInternalIteratorState(this);
            var kind = state.kind;
            var entry = state.last; // revert to the last existing entry

            while (entry && entry.removed) entry = entry.previous; // get next entry


            if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
              // or finish the iteration
              state.target = undefined$1;
              return {
                value: undefined$1,
                done: true };

            } // return step by kind


            if (kind == 'keys') return {
              value: entry.key,
              done: false };

            if (kind == 'values') return {
              value: entry.value,
              done: false };

            return {
              value: [entry.key, entry.value],
              done: false };

          }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // add [@@species], 23.1.2.2, 23.2.2.2

          setSpecies(CONSTRUCTOR_NAME);
        } };

      /***/
    },
    /* 158 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var log1p = __webpack_require__(159);

      var nativeAcosh = Math.acosh;
      var log = Math.log;
      var sqrt = Math.sqrt;
      var LN2 = Math.LN2;
      var FORCED = !nativeAcosh // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
      || Math.floor(nativeAcosh(Number.MAX_VALUE)) != 710 // Tor Browser bug: Math.acosh(Infinity) -> NaN
      || nativeAcosh(Infinity) != Infinity; // `Math.acosh` method
      // https://tc39.github.io/ecma262/#sec-math.acosh

      $({
        target: 'Math',
        stat: true,
        forced: FORCED },
      {
        acosh: function acosh(x) {
          return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? log(x) + LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
        } });

      /***/
    },
    /* 159 */

    /***/
    function (module, exports) {
      // `Math.log1p` method implementation
      // https://tc39.github.io/ecma262/#sec-math.log1p
      module.exports = Math.log1p || function log1p(x) {
        return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
      };
      /***/

    },
    /* 160 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var nativeAsinh = Math.asinh;
      var log = Math.log;
      var sqrt = Math.sqrt;

      function asinh(x) {
        return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log(x + sqrt(x * x + 1));
      } // `Math.asinh` method
      // https://tc39.github.io/ecma262/#sec-math.asinh
      // Tor Browser bug: Math.asinh(0) -> -0


      $({
        target: 'Math',
        stat: true,
        forced: !(nativeAsinh && 1 / nativeAsinh(0) > 0) },
      {
        asinh: asinh });

      /***/
    },
    /* 161 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var nativeAtanh = Math.atanh;
      var log = Math.log; // `Math.atanh` method
      // https://tc39.github.io/ecma262/#sec-math.atanh
      // Tor Browser bug: Math.atanh(-0) -> 0

      $({
        target: 'Math',
        stat: true,
        forced: !(nativeAtanh && 1 / nativeAtanh(-0) < 0) },
      {
        atanh: function atanh(x) {
          return (x = +x) == 0 ? x : log((1 + x) / (1 - x)) / 2;
        } });

      /***/
    },
    /* 162 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var sign = __webpack_require__(163);

      var abs = Math.abs;
      var pow = Math.pow; // `Math.cbrt` method
      // https://tc39.github.io/ecma262/#sec-math.cbrt

      $({
        target: 'Math',
        stat: true },
      {
        cbrt: function cbrt(x) {
          return sign(x = +x) * pow(abs(x), 1 / 3);
        } });

      /***/
    },
    /* 163 */

    /***/
    function (module, exports) {
      // `Math.sign` method implementation
      // https://tc39.github.io/ecma262/#sec-math.sign
      module.exports = Math.sign || function sign(x) {
        // eslint-disable-next-line no-self-compare
        return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
      };
      /***/

    },
    /* 164 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var floor = Math.floor;
      var log = Math.log;
      var LOG2E = Math.LOG2E; // `Math.clz32` method
      // https://tc39.github.io/ecma262/#sec-math.clz32

      $({
        target: 'Math',
        stat: true },
      {
        clz32: function clz32(x) {
          return (x >>>= 0) ? 31 - floor(log(x + 0.5) * LOG2E) : 32;
        } });

      /***/
    },
    /* 165 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var expm1 = __webpack_require__(166);

      var nativeCosh = Math.cosh;
      var abs = Math.abs;
      var E = Math.E; // `Math.cosh` method
      // https://tc39.github.io/ecma262/#sec-math.cosh

      $({
        target: 'Math',
        stat: true,
        forced: !nativeCosh || nativeCosh(710) === Infinity },
      {
        cosh: function cosh(x) {
          var t = expm1(abs(x) - 1) + 1;
          return (t + 1 / (t * E * E)) * (E / 2);
        } });

      /***/
    },
    /* 166 */

    /***/
    function (module, exports) {
      var nativeExpm1 = Math.expm1; // `Math.expm1` method implementation
      // https://tc39.github.io/ecma262/#sec-math.expm1

      module.exports = !nativeExpm1 // Old FF bug
      || nativeExpm1(10) > 22025.465794806719 || nativeExpm1(10) < 22025.4657948067165168 // Tor Browser bug
      || nativeExpm1(-2e-17) != -2e-17 ? function expm1(x) {
        return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
      } : nativeExpm1;
      /***/
    },
    /* 167 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var expm1 = __webpack_require__(166); // `Math.expm1` method
      // https://tc39.github.io/ecma262/#sec-math.expm1


      $({
        target: 'Math',
        stat: true,
        forced: expm1 != Math.expm1 },
      {
        expm1: expm1 });

      /***/
    },
    /* 168 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var fround = __webpack_require__(169); // `Math.fround` method
      // https://tc39.github.io/ecma262/#sec-math.fround


      $({
        target: 'Math',
        stat: true },
      {
        fround: fround });

      /***/
    },
    /* 169 */

    /***/
    function (module, exports, __webpack_require__) {
      var sign = __webpack_require__(163);

      var pow = Math.pow;
      var EPSILON = pow(2, -52);
      var EPSILON32 = pow(2, -23);
      var MAX32 = pow(2, 127) * (2 - EPSILON32);
      var MIN32 = pow(2, -126);

      var roundTiesToEven = function roundTiesToEven(n) {
        return n + 1 / EPSILON - 1 / EPSILON;
      }; // `Math.fround` method implementation
      // https://tc39.github.io/ecma262/#sec-math.fround


      module.exports = Math.fround || function fround(x) {
        var $abs = Math.abs(x);
        var $sign = sign(x);
        var a, result;
        if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
        a = (1 + EPSILON32 / EPSILON) * $abs;
        result = a - (a - $abs); // eslint-disable-next-line no-self-compare

        if (result > MAX32 || result != result) return $sign * Infinity;
        return $sign * result;
      };
      /***/

    },
    /* 170 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var abs = Math.abs;
      var sqrt = Math.sqrt; // `Math.hypot` method
      // https://tc39.github.io/ecma262/#sec-math.hypot

      $({
        target: 'Math',
        stat: true },
      {
        hypot: function hypot(value1, value2) {
          // eslint-disable-line no-unused-vars
          var sum = 0;
          var i = 0;
          var aLen = arguments.length;
          var larg = 0;
          var arg, div;

          while (i < aLen) {
            arg = abs(arguments[i++]);

            if (larg < arg) {
              div = larg / arg;
              sum = sum * div * div + 1;
              larg = arg;
            } else if (arg > 0) {
              div = arg / larg;
              sum += div * div;
            } else sum += arg;
          }

          return larg === Infinity ? Infinity : larg * sqrt(sum);
        } });

      /***/
    },
    /* 171 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var fails = __webpack_require__(6);

      var nativeImul = Math.imul;
      var FORCED = fails(function () {
        return nativeImul(0xFFFFFFFF, 5) != -5 || nativeImul.length != 2;
      }); // `Math.imul` method
      // https://tc39.github.io/ecma262/#sec-math.imul
      // some WebKit versions fails with big numbers, some has wrong arity

      $({
        target: 'Math',
        stat: true,
        forced: FORCED },
      {
        imul: function imul(x, y) {
          var UINT16 = 0xFFFF;
          var xn = +x;
          var yn = +y;
          var xl = UINT16 & xn;
          var yl = UINT16 & yn;
          return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
        } });

      /***/
    },
    /* 172 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var log = Math.log;
      var LOG10E = Math.LOG10E; // `Math.log10` method
      // https://tc39.github.io/ecma262/#sec-math.log10

      $({
        target: 'Math',
        stat: true },
      {
        log10: function log10(x) {
          return log(x) * LOG10E;
        } });

      /***/
    },
    /* 173 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var log1p = __webpack_require__(159); // `Math.log1p` method
      // https://tc39.github.io/ecma262/#sec-math.log1p


      $({
        target: 'Math',
        stat: true },
      {
        log1p: log1p });

      /***/
    },
    /* 174 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var log = Math.log;
      var LN2 = Math.LN2; // `Math.log2` method
      // https://tc39.github.io/ecma262/#sec-math.log2

      $({
        target: 'Math',
        stat: true },
      {
        log2: function log2(x) {
          return log(x) / LN2;
        } });

      /***/
    },
    /* 175 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var sign = __webpack_require__(163); // `Math.sign` method
      // https://tc39.github.io/ecma262/#sec-math.sign


      $({
        target: 'Math',
        stat: true },
      {
        sign: sign });

      /***/
    },
    /* 176 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var fails = __webpack_require__(6);

      var expm1 = __webpack_require__(166);

      var abs = Math.abs;
      var exp = Math.exp;
      var E = Math.E;
      var FORCED = fails(function () {
        return Math.sinh(-2e-17) != -2e-17;
      }); // `Math.sinh` method
      // https://tc39.github.io/ecma262/#sec-math.sinh
      // V8 near Chromium 38 has a problem with very small numbers

      $({
        target: 'Math',
        stat: true,
        forced: FORCED },
      {
        sinh: function sinh(x) {
          return abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (E / 2);
        } });

      /***/
    },
    /* 177 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var expm1 = __webpack_require__(166);

      var exp = Math.exp; // `Math.tanh` method
      // https://tc39.github.io/ecma262/#sec-math.tanh

      $({
        target: 'Math',
        stat: true },
      {
        tanh: function tanh(x) {
          var a = expm1(x = +x);
          var b = expm1(-x);
          return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
        } });

      /***/
    },
    /* 178 */

    /***/
    function (module, exports, __webpack_require__) {
      var setToStringTag = __webpack_require__(43); // Math[@@toStringTag] property
      // https://tc39.github.io/ecma262/#sec-math-@@tostringtag


      setToStringTag(Math, 'Math', true);
      /***/
    },
    /* 179 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var ceil = Math.ceil;
      var floor = Math.floor; // `Math.trunc` method
      // https://tc39.github.io/ecma262/#sec-math.trunc

      $({
        target: 'Math',
        stat: true },
      {
        trunc: function trunc(it) {
          return (it > 0 ? floor : ceil)(it);
        } });

      /***/
    },
    /* 180 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(5);

      var global = __webpack_require__(3);

      var isForced = __webpack_require__(41);

      var redefine = __webpack_require__(21);

      var has = __webpack_require__(15);

      var classof = __webpack_require__(11);

      var inheritIfRequired = __webpack_require__(156);

      var toPrimitive = __webpack_require__(13);

      var fails = __webpack_require__(6);

      var create = __webpack_require__(52);

      var getOwnPropertyNames = __webpack_require__(33).f;

      var getOwnPropertyDescriptor = __webpack_require__(4).f;

      var defineProperty = __webpack_require__(19).f;

      var internalStringTrim = __webpack_require__(181);

      var NUMBER = 'Number';
      var NativeNumber = global[NUMBER];
      var NumberPrototype = NativeNumber.prototype; // Opera ~12 has broken Object#toString

      var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;
      var NATIVE_TRIM = ('trim' in String.prototype); // `ToNumber` abstract operation
      // https://tc39.github.io/ecma262/#sec-tonumber

      var toNumber = function toNumber(argument) {
        var it = toPrimitive(argument, false);
        var first, third, radix, maxCode, digits, length, i, code;

        if (typeof it == 'string' && it.length > 2) {
          it = NATIVE_TRIM ? it.trim() : internalStringTrim(it, 3);
          first = it.charCodeAt(0);

          if (first === 43 || first === 45) {
            third = it.charCodeAt(2);
            if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
          } else if (first === 48) {
            switch (it.charCodeAt(1)) {
              case 66:
              case 98:
                radix = 2;
                maxCode = 49;
                break;
              // fast equal of /^0b[01]+$/i

              case 79:
              case 111:
                radix = 8;
                maxCode = 55;
                break;
              // fast equal of /^0o[0-7]+$/i

              default:
                return +it;}


            digits = it.slice(2);
            length = digits.length;

            for (i = 0; i < length; i++) {
              code = digits.charCodeAt(i); // parseInt parses a string to a first unavailable symbol
              // but ToNumber should return NaN if a string contains unavailable symbols

              if (code < 48 || code > maxCode) return NaN;
            }

            return parseInt(digits, radix);
          }
        }

        return +it;
      }; // `Number` constructor
      // https://tc39.github.io/ecma262/#sec-number-constructor


      if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
        var NumberWrapper = function Number(value) {
          var it = arguments.length < 1 ? 0 : value;
          var that = this;
          return that instanceof NumberWrapper // check on 1..constructor(foo) case
          && (BROKEN_CLASSOF ? fails(function () {
            NumberPrototype.valueOf.call(that);
          }) : classof(that) != NUMBER) ? inheritIfRequired(new NativeNumber(toNumber(it)), that, NumberWrapper) : toNumber(it);
        };

        for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : ( // ES3:
        'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES2015 (in case, if modules with ES2015 Number statics required before):
        'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys.length > j; j++) {
          if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {
            defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
          }
        }

        NumberWrapper.prototype = NumberPrototype;
        NumberPrototype.constructor = NumberWrapper;
        redefine(global, NUMBER, NumberWrapper);
      }
      /***/

    },
    /* 181 */

    /***/
    function (module, exports, __webpack_require__) {
      var requireObjectCoercible = __webpack_require__(12);

      var whitespaces = __webpack_require__(182);

      var whitespace = '[' + whitespaces + ']';
      var ltrim = RegExp('^' + whitespace + whitespace + '*');
      var rtrim = RegExp(whitespace + whitespace + '*$'); // 1 -> String#trimStart
      // 2 -> String#trimEnd
      // 3 -> String#trim

      module.exports = function (string, TYPE) {
        string = String(requireObjectCoercible(string));
        if (TYPE & 1) string = string.replace(ltrim, '');
        if (TYPE & 2) string = string.replace(rtrim, '');
        return string;
      };
      /***/

    },
    /* 182 */

    /***/
    function (module, exports) {
      // a string of all valid unicode whitespaces
      // eslint-disable-next-line max-len
      module.exports = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';
      /***/
    },
    /* 183 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2); // `Number.EPSILON` constant
      // https://tc39.github.io/ecma262/#sec-number.epsilon


      $({
        target: 'Number',
        stat: true },
      {
        EPSILON: Math.pow(2, -52) });

      /***/
    },
    /* 184 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var numberIsFinite = __webpack_require__(185); // `Number.isFinite` method
      // https://tc39.github.io/ecma262/#sec-number.isfinite


      $({
        target: 'Number',
        stat: true },
      {
        isFinite: numberIsFinite });

      /***/
    },
    /* 185 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var globalIsFinite = global.isFinite; // `Number.isFinite` method
      // https://tc39.github.io/ecma262/#sec-number.isfinite

      module.exports = Number.isFinite || function isFinite(it) {
        return typeof it == 'number' && globalIsFinite(it);
      };
      /***/

    },
    /* 186 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var isInteger = __webpack_require__(187); // `Number.isInteger` method
      // https://tc39.github.io/ecma262/#sec-number.isinteger


      $({
        target: 'Number',
        stat: true },
      {
        isInteger: isInteger });

      /***/
    },
    /* 187 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(14);

      var floor = Math.floor; // `Number.isInteger` method implementation
      // https://tc39.github.io/ecma262/#sec-number.isinteger

      module.exports = function isInteger(it) {
        return !isObject(it) && isFinite(it) && floor(it) === it;
      };
      /***/

    },
    /* 188 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2); // `Number.isNaN` method
      // https://tc39.github.io/ecma262/#sec-number.isnan


      $({
        target: 'Number',
        stat: true },
      {
        isNaN: function isNaN(number) {
          // eslint-disable-next-line no-self-compare
          return number != number;
        } });

      /***/
    },
    /* 189 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var isInteger = __webpack_require__(187);

      var abs = Math.abs; // `Number.isSafeInteger` method
      // https://tc39.github.io/ecma262/#sec-number.issafeinteger

      $({
        target: 'Number',
        stat: true },
      {
        isSafeInteger: function isSafeInteger(number) {
          return isInteger(number) && abs(number) <= 0x1FFFFFFFFFFFFF;
        } });

      /***/
    },
    /* 190 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2); // `Number.MAX_SAFE_INTEGER` constant
      // https://tc39.github.io/ecma262/#sec-number.max_safe_integer


      $({
        target: 'Number',
        stat: true },
      {
        MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF });

      /***/
    },
    /* 191 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2); // `Number.MIN_SAFE_INTEGER` constant
      // https://tc39.github.io/ecma262/#sec-number.min_safe_integer


      $({
        target: 'Number',
        stat: true },
      {
        MIN_SAFE_INTEGER: -0x1FFFFFFFFFFFFF });

      /***/
    },
    /* 192 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var parseFloat = __webpack_require__(193); // `Number.parseFloat` method
      // https://tc39.github.io/ecma262/#sec-number.parseFloat


      $({
        target: 'Number',
        stat: true,
        forced: Number.parseFloat != parseFloat },
      {
        parseFloat: parseFloat });

      /***/
    },
    /* 193 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var internalStringTrim = __webpack_require__(181);

      var whitespaces = __webpack_require__(182);

      var nativeParseFloat = global.parseFloat;
      var FORCED = 1 / nativeParseFloat(whitespaces + '-0') !== -Infinity;
      module.exports = FORCED ? function parseFloat(str) {
        var string = internalStringTrim(String(str), 3);
        var result = nativeParseFloat(string);
        return result === 0 && string.charAt(0) == '-' ? -0 : result;
      } : nativeParseFloat;
      /***/
    },
    /* 194 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var parseInt = __webpack_require__(195); // `Number.parseInt` method
      // https://tc39.github.io/ecma262/#sec-number.parseint


      $({
        target: 'Number',
        stat: true,
        forced: Number.parseInt != parseInt },
      {
        parseInt: parseInt });

      /***/
    },
    /* 195 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var internalStringTrim = __webpack_require__(181);

      var whitespaces = __webpack_require__(182);

      var nativeParseInt = global.parseInt;
      var hex = /^[+-]?0[Xx]/;
      var FORCED = nativeParseInt(whitespaces + '08') !== 8 || nativeParseInt(whitespaces + '0x16') !== 22;
      module.exports = FORCED ? function parseInt(str, radix) {
        var string = internalStringTrim(String(str), 3);
        return nativeParseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));
      } : nativeParseInt;
      /***/
    },
    /* 196 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var toInteger = __webpack_require__(37);

      var thisNumberValue = __webpack_require__(197);

      var repeat = __webpack_require__(198);

      var fails = __webpack_require__(6);

      var nativeToFixed = 1.0.toFixed;
      var floor = Math.floor;
      var data = [0, 0, 0, 0, 0, 0];

      var multiply = function multiply(n, c) {
        var i = -1;
        var c2 = c;

        while (++i < 6) {
          c2 += n * data[i];
          data[i] = c2 % 1e7;
          c2 = floor(c2 / 1e7);
        }
      };

      var divide = function divide(n) {
        var i = 6;
        var c = 0;

        while (--i >= 0) {
          c += data[i];
          data[i] = floor(c / n);
          c = c % n * 1e7;
        }
      };

      var numToString = function numToString() {
        var i = 6;
        var s = '';

        while (--i >= 0) {
          if (s !== '' || i === 0 || data[i] !== 0) {
            var t = String(data[i]);
            s = s === '' ? t : s + repeat.call('0', 7 - t.length) + t;
          }
        }

        return s;
      };

      var pow = function pow(x, n, acc) {
        return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
      };

      var log = function log(x) {
        var n = 0;
        var x2 = x;

        while (x2 >= 4096) {
          n += 12;
          x2 /= 4096;
        }

        while (x2 >= 2) {
          n += 1;
          x2 /= 2;
        }

        return n;
      };

      var FORCED = nativeToFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !fails(function () {
        // V8 ~ Android 4.3-
        nativeToFixed.call({});
      }); // `Number.prototype.toFixed` method
      // https://tc39.github.io/ecma262/#sec-number.prototype.tofixed

      $({
        target: 'Number',
        proto: true,
        forced: FORCED },
      {
        toFixed: function toFixed(fractionDigits) {
          var x = thisNumberValue(this);
          var f = toInteger(fractionDigits);
          var s = '';
          var m = '0';
          var e, z, j, k;
          if (f < 0 || f > 20) throw RangeError('Incorrect fraction digits'); // eslint-disable-next-line no-self-compare

          if (x != x) return 'NaN';
          if (x <= -1e21 || x >= 1e21) return String(x);

          if (x < 0) {
            s = '-';
            x = -x;
          }

          if (x > 1e-21) {
            e = log(x * pow(2, 69, 1)) - 69;
            z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
            z *= 0x10000000000000;
            e = 52 - e;

            if (e > 0) {
              multiply(0, z);
              j = f;

              while (j >= 7) {
                multiply(1e7, 0);
                j -= 7;
              }

              multiply(pow(10, j, 1), 0);
              j = e - 1;

              while (j >= 23) {
                divide(1 << 23);
                j -= 23;
              }

              divide(1 << j);
              multiply(1, 1);
              divide(2);
              m = numToString();
            } else {
              multiply(0, z);
              multiply(1 << -e, 0);
              m = numToString() + repeat.call('0', f);
            }
          }

          if (f > 0) {
            k = m.length;
            m = s + (k <= f ? '0.' + repeat.call('0', f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
          } else {
            m = s + m;
          }

          return m;
        } });

      /***/
    },
    /* 197 */

    /***/
    function (module, exports, __webpack_require__) {
      var classof = __webpack_require__(11); // `thisNumberValue` abstract operation
      // https://tc39.github.io/ecma262/#sec-thisnumbervalue


      module.exports = function (value) {
        if (typeof value != 'number' && classof(value) != 'Number') {
          throw TypeError('Incorrect invocation');
        }

        return +value;
      };
      /***/

    },
    /* 198 */

    /***/
    function (module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(37);

      var requireObjectCoercible = __webpack_require__(12); // `String.prototype.repeat` method implementation
      // https://tc39.github.io/ecma262/#sec-string.prototype.repeat


      module.exports = ''.repeat || function repeat(count) {
        var str = String(requireObjectCoercible(this));
        var result = '';
        var n = toInteger(count);
        if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');

        for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;

        return result;
      };
      /***/

    },
    /* 199 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var fails = __webpack_require__(6);

      var thisNumberValue = __webpack_require__(197);

      var nativeToPrecision = 1.0.toPrecision;
      var FORCED = fails(function () {
        // IE7-
        return nativeToPrecision.call(1, undefined$1) !== '1';
      }) || !fails(function () {
        // V8 ~ Android 4.3-
        nativeToPrecision.call({});
      }); // `Number.prototype.toPrecision` method
      // https://tc39.github.io/ecma262/#sec-number.prototype.toprecision

      $({
        target: 'Number',
        proto: true,
        forced: FORCED },
      {
        toPrecision: function toPrecision(precision) {
          return precision === undefined$1 ? nativeToPrecision.call(thisNumberValue(this)) : nativeToPrecision.call(thisNumberValue(this), precision);
        } });

      /***/
    },
    /* 200 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var assign = __webpack_require__(201); // `Object.assign` method
      // https://tc39.github.io/ecma262/#sec-object.assign


      $({
        target: 'Object',
        stat: true,
        forced: Object.assign !== assign },
      {
        assign: assign });

      /***/
    },
    /* 201 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(5);

      var fails = __webpack_require__(6);

      var objectKeys = __webpack_require__(49);

      var getOwnPropertySymbolsModule = __webpack_require__(40);

      var propertyIsEnumerableModule = __webpack_require__(7);

      var toObject = __webpack_require__(51);

      var IndexedObject = __webpack_require__(10);

      var nativeAssign = Object.assign; // 19.1.2.1 Object.assign(target, source, ...)
      // should work with symbols and should have deterministic property order (V8 bug)

      module.exports = !nativeAssign || fails(function () {
        var A = {};
        var B = {}; // eslint-disable-next-line no-undef

        var symbol = Symbol();
        var alphabet = 'abcdefghijklmnopqrst';
        A[symbol] = 7;
        alphabet.split('').forEach(function (chr) {
          B[chr] = chr;
        });
        return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
      }) ? function assign(target, source) {
        // eslint-disable-line no-unused-vars
        var T = toObject(target);
        var argumentsLength = arguments.length;
        var index = 1;
        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        var propertyIsEnumerable = propertyIsEnumerableModule.f;

        while (argumentsLength > index) {
          var S = IndexedObject(arguments[index++]);
          var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
          var length = keys.length;
          var j = 0;
          var key;

          while (length > j) {
            key = keys[j++];
            if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
          }
        }

        return T;
      } : nativeAssign;
      /***/
    },
    /* 202 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var DESCRIPTORS = __webpack_require__(5);

      var create = __webpack_require__(52); // `Object.create` method
      // https://tc39.github.io/ecma262/#sec-object.create


      $({
        target: 'Object',
        stat: true,
        sham: !DESCRIPTORS },
      {
        create: create });

      /***/
    },
    /* 203 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var DESCRIPTORS = __webpack_require__(5);

      var FORCED = __webpack_require__(204);

      var toObject = __webpack_require__(51);

      var aFunction = __webpack_require__(80);

      var definePropertyModule = __webpack_require__(19); // `Object.prototype.__defineGetter__` method
      // https://tc39.github.io/ecma262/#sec-object.prototype.__defineGetter__


      if (DESCRIPTORS) {
        $({
          target: 'Object',
          proto: true,
          forced: FORCED },
        {
          __defineGetter__: function __defineGetter__(P, getter) {
            definePropertyModule.f(toObject(this), P, {
              get: aFunction(getter),
              enumerable: true,
              configurable: true });

          } });

      }
      /***/

    },
    /* 204 */

    /***/
    function (module, exports, __webpack_require__) {
      var IS_PURE = __webpack_require__(24);

      var global = __webpack_require__(3);

      var fails = __webpack_require__(6); // Forced replacement object prototype accessors methods


      module.exports = IS_PURE || !fails(function () {
        var key = Math.random(); // In FF throws only define methods
        // eslint-disable-next-line no-undef, no-useless-call

        __defineSetter__.call(null, key, function () {
          /* empty */
        });

        delete global[key];
      });
      /***/
    },
    /* 205 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var DESCRIPTORS = __webpack_require__(5);

      var defineProperties = __webpack_require__(53); // `Object.defineProperties` method
      // https://tc39.github.io/ecma262/#sec-object.defineproperties


      $({
        target: 'Object',
        stat: true,
        forced: !DESCRIPTORS,
        sham: !DESCRIPTORS },
      {
        defineProperties: defineProperties });

      /***/
    },
    /* 206 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var DESCRIPTORS = __webpack_require__(5);

      var objectDefinePropertyModile = __webpack_require__(19); // `Object.defineProperty` method
      // https://tc39.github.io/ecma262/#sec-object.defineproperty


      $({
        target: 'Object',
        stat: true,
        forced: !DESCRIPTORS,
        sham: !DESCRIPTORS },
      {
        defineProperty: objectDefinePropertyModile.f });

      /***/
    },
    /* 207 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var DESCRIPTORS = __webpack_require__(5);

      var FORCED = __webpack_require__(204);

      var toObject = __webpack_require__(51);

      var aFunction = __webpack_require__(80);

      var definePropertyModule = __webpack_require__(19); // `Object.prototype.__defineSetter__` method
      // https://tc39.github.io/ecma262/#sec-object.prototype.__defineSetter__


      if (DESCRIPTORS) {
        $({
          target: 'Object',
          proto: true,
          forced: FORCED },
        {
          __defineSetter__: function __defineSetter__(P, setter) {
            definePropertyModule.f(toObject(this), P, {
              set: aFunction(setter),
              enumerable: true,
              configurable: true });

          } });

      }
      /***/

    },
    /* 208 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var objectToArray = __webpack_require__(209); // `Object.entries` method
      // https://tc39.github.io/ecma262/#sec-object.entries


      $({
        target: 'Object',
        stat: true },
      {
        entries: function entries(O) {
          return objectToArray(O, true);
        } });

      /***/
    },
    /* 209 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(5);

      var objectKeys = __webpack_require__(49);

      var toIndexedObject = __webpack_require__(9);

      var propertyIsEnumerable = __webpack_require__(7).f; // TO_ENTRIES: true  -> Object.entries
      // TO_ENTRIES: false -> Object.values


      module.exports = function (it, TO_ENTRIES) {
        var O = toIndexedObject(it);
        var keys = objectKeys(O);
        var length = keys.length;
        var i = 0;
        var result = [];
        var key;

        while (length > i) {
          key = keys[i++];

          if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {
            result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
          }
        }

        return result;
      };
      /***/

    },
    /* 210 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var FREEZING = __webpack_require__(154);

      var fails = __webpack_require__(6);

      var isObject = __webpack_require__(14);

      var onFreeze = __webpack_require__(153).onFreeze;

      var nativeFreeze = Object.freeze;
      var FAILS_ON_PRIMITIVES = fails(function () {
        nativeFreeze(1);
      }); // `Object.freeze` method
      // https://tc39.github.io/ecma262/#sec-object.freeze

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES,
        sham: !FREEZING },
      {
        freeze: function freeze(it) {
          return nativeFreeze && isObject(it) ? nativeFreeze(onFreeze(it)) : it;
        } });

      /***/
    },
    /* 211 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var iterate = __webpack_require__(155);

      var createProperty = __webpack_require__(71); // `Object.fromEntries` method
      // https://github.com/tc39/proposal-object-from-entries


      $({
        target: 'Object',
        stat: true },
      {
        fromEntries: function fromEntries(iterable) {
          var obj = {};
          iterate(iterable, function (k, v) {
            createProperty(obj, k, v);
          }, undefined$1, true);
          return obj;
        } });

      /***/
    },
    /* 212 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var fails = __webpack_require__(6);

      var toIndexedObject = __webpack_require__(9);

      var nativeGetOwnPropertyDescriptor = __webpack_require__(4).f;

      var DESCRIPTORS = __webpack_require__(5);

      var FAILS_ON_PRIMITIVES = fails(function () {
        nativeGetOwnPropertyDescriptor(1);
      });
      var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES; // `Object.getOwnPropertyDescriptor` method
      // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor

      $({
        target: 'Object',
        stat: true,
        forced: FORCED,
        sham: !DESCRIPTORS },
      {
        getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
          return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
        } });

      /***/
    },
    /* 213 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var DESCRIPTORS = __webpack_require__(5);

      var ownKeys = __webpack_require__(32);

      var toIndexedObject = __webpack_require__(9);

      var getOwnPropertyDescriptorModule = __webpack_require__(4);

      var createProperty = __webpack_require__(71); // `Object.getOwnPropertyDescriptors` method
      // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors


      $({
        target: 'Object',
        stat: true,
        sham: !DESCRIPTORS },
      {
        getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
          var O = toIndexedObject(object);
          var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
          var keys = ownKeys(O);
          var result = {};
          var i = 0;
          var key, descriptor;

          while (keys.length > i) {
            descriptor = getOwnPropertyDescriptor(O, key = keys[i++]);
            if (descriptor !== undefined$1) createProperty(result, key, descriptor);
          }

          return result;
        } });

      /***/
    },
    /* 214 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var fails = __webpack_require__(6);

      var nativeGetOwnPropertyNames = __webpack_require__(55).f;

      var FAILS_ON_PRIMITIVES = fails(function () {
        return !Object.getOwnPropertyNames(1);
      }); // `Object.getOwnPropertyNames` method
      // https://tc39.github.io/ecma262/#sec-object.getownpropertynames

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES },
      {
        getOwnPropertyNames: nativeGetOwnPropertyNames });

      /***/
    },
    /* 215 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var fails = __webpack_require__(6);

      var toObject = __webpack_require__(51);

      var nativeGetPrototypeOf = __webpack_require__(107);

      var CORRECT_PROTOTYPE_GETTER = __webpack_require__(108);

      var FAILS_ON_PRIMITIVES = fails(function () {
        nativeGetPrototypeOf(1);
      }); // `Object.getPrototypeOf` method
      // https://tc39.github.io/ecma262/#sec-object.getprototypeof

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES,
        sham: !CORRECT_PROTOTYPE_GETTER },
      {
        getPrototypeOf: function getPrototypeOf(it) {
          return nativeGetPrototypeOf(toObject(it));
        } });

      /***/
    },
    /* 216 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var is = __webpack_require__(217); // `Object.is` method
      // https://tc39.github.io/ecma262/#sec-object.is


      $({
        target: 'Object',
        stat: true },
      {
        is: is });

      /***/
    },
    /* 217 */

    /***/
    function (module, exports) {
      // `SameValue` abstract operation
      // https://tc39.github.io/ecma262/#sec-samevalue
      module.exports = Object.is || function is(x, y) {
        // eslint-disable-next-line no-self-compare
        return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
      };
      /***/

    },
    /* 218 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var fails = __webpack_require__(6);

      var isObject = __webpack_require__(14);

      var nativeIsExtensible = Object.isExtensible;
      var FAILS_ON_PRIMITIVES = fails(function () {}); // `Object.isExtensible` method
      // https://tc39.github.io/ecma262/#sec-object.isextensible

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES },
      {
        isExtensible: function isExtensible(it) {
          return isObject(it) ? nativeIsExtensible ? nativeIsExtensible(it) : true : false;
        } });

      /***/
    },
    /* 219 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var fails = __webpack_require__(6);

      var isObject = __webpack_require__(14);

      var nativeIsFrozen = Object.isFrozen;
      var FAILS_ON_PRIMITIVES = fails(function () {}); // `Object.isFrozen` method
      // https://tc39.github.io/ecma262/#sec-object.isfrozen

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES },
      {
        isFrozen: function isFrozen(it) {
          return isObject(it) ? nativeIsFrozen ? nativeIsFrozen(it) : false : true;
        } });

      /***/
    },
    /* 220 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var fails = __webpack_require__(6);

      var isObject = __webpack_require__(14);

      var nativeIsSealed = Object.isSealed;
      var FAILS_ON_PRIMITIVES = fails(function () {}); // `Object.isSealed` method
      // https://tc39.github.io/ecma262/#sec-object.issealed

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES },
      {
        isSealed: function isSealed(it) {
          return isObject(it) ? nativeIsSealed ? nativeIsSealed(it) : false : true;
        } });

      /***/
    },
    /* 221 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var toObject = __webpack_require__(51);

      var nativeKeys = __webpack_require__(49);

      var fails = __webpack_require__(6);

      var FAILS_ON_PRIMITIVES = fails(function () {
        nativeKeys(1);
      }); // `Object.keys` method
      // https://tc39.github.io/ecma262/#sec-object.keys

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES },
      {
        keys: function keys(it) {
          return nativeKeys(toObject(it));
        } });

      /***/
    },
    /* 222 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var DESCRIPTORS = __webpack_require__(5);

      var FORCED = __webpack_require__(204);

      var toObject = __webpack_require__(51);

      var toPrimitive = __webpack_require__(13);

      var getPrototypeOf = __webpack_require__(107);

      var getOwnPropertyDescriptor = __webpack_require__(4).f; // `Object.prototype.__lookupGetter__` method
      // https://tc39.github.io/ecma262/#sec-object.prototype.__lookupGetter__


      if (DESCRIPTORS) {
        $({
          target: 'Object',
          proto: true,
          forced: FORCED },
        {
          __lookupGetter__: function __lookupGetter__(P) {
            var O = toObject(this);
            var key = toPrimitive(P, true);
            var desc;

            do {
              if (desc = getOwnPropertyDescriptor(O, key)) return desc.get;
            } while (O = getPrototypeOf(O));
          } });

      }
      /***/

    },
    /* 223 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var DESCRIPTORS = __webpack_require__(5);

      var FORCED = __webpack_require__(204);

      var toObject = __webpack_require__(51);

      var toPrimitive = __webpack_require__(13);

      var getPrototypeOf = __webpack_require__(107);

      var getOwnPropertyDescriptor = __webpack_require__(4).f; // `Object.prototype.__lookupSetter__` method
      // https://tc39.github.io/ecma262/#sec-object.prototype.__lookupSetter__


      if (DESCRIPTORS) {
        $({
          target: 'Object',
          proto: true,
          forced: FORCED },
        {
          __lookupSetter__: function __lookupSetter__(P) {
            var O = toObject(this);
            var key = toPrimitive(P, true);
            var desc;

            do {
              if (desc = getOwnPropertyDescriptor(O, key)) return desc.set;
            } while (O = getPrototypeOf(O));
          } });

      }
      /***/

    },
    /* 224 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var isObject = __webpack_require__(14);

      var onFreeze = __webpack_require__(153).onFreeze;

      var FREEZING = __webpack_require__(154);

      var fails = __webpack_require__(6);

      var nativePreventExtensions = Object.preventExtensions;
      var FAILS_ON_PRIMITIVES = fails(function () {
        nativePreventExtensions(1);
      }); // `Object.preventExtensions` method
      // https://tc39.github.io/ecma262/#sec-object.preventextensions

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES,
        sham: !FREEZING },
      {
        preventExtensions: function preventExtensions(it) {
          return nativePreventExtensions && isObject(it) ? nativePreventExtensions(onFreeze(it)) : it;
        } });

      /***/
    },
    /* 225 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var isObject = __webpack_require__(14);

      var onFreeze = __webpack_require__(153).onFreeze;

      var FREEZING = __webpack_require__(154);

      var fails = __webpack_require__(6);

      var nativeSeal = Object.seal;
      var FAILS_ON_PRIMITIVES = fails(function () {
        nativeSeal(1);
      }); // `Object.seal` method
      // https://tc39.github.io/ecma262/#sec-object.seal

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES,
        sham: !FREEZING },
      {
        seal: function seal(it) {
          return nativeSeal && isObject(it) ? nativeSeal(onFreeze(it)) : it;
        } });

      /***/
    },
    /* 226 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var setPrototypeOf = __webpack_require__(109); // `Object.setPrototypeOf` method
      // https://tc39.github.io/ecma262/#sec-object.setprototypeof


      $({
        target: 'Object',
        stat: true },
      {
        setPrototypeOf: setPrototypeOf });

      /***/
    },
    /* 227 */

    /***/
    function (module, exports, __webpack_require__) {
      var redefine = __webpack_require__(21);

      var toString = __webpack_require__(228);

      var ObjectPrototype = Object.prototype; // `Object.prototype.toString` method
      // https://tc39.github.io/ecma262/#sec-object.prototype.tostring

      if (toString !== ObjectPrototype.toString) {
        redefine(ObjectPrototype, 'toString', toString, {
          unsafe: true });

      }
      /***/

    },
    /* 228 */

    /***/
    function (module, exports, __webpack_require__) {
      var classof = __webpack_require__(98);

      var wellKnownSymbol = __webpack_require__(44);

      var TO_STRING_TAG = wellKnownSymbol('toStringTag');
      var test = {};
      test[TO_STRING_TAG] = 'z'; // `Object.prototype.toString` method implementation
      // https://tc39.github.io/ecma262/#sec-object.prototype.tostring

      module.exports = String(test) !== '[object z]' ? function toString() {
        return '[object ' + classof(this) + ']';
      } : test.toString;
      /***/
    },
    /* 229 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var objectToArray = __webpack_require__(209); // `Object.values` method
      // https://tc39.github.io/ecma262/#sec-object.values


      $({
        target: 'Object',
        stat: true },
      {
        values: function values(O) {
          return objectToArray(O);
        } });

      /***/
    },
    /* 230 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var parseFloatImplementation = __webpack_require__(193); // `parseFloat` method
      // https://tc39.github.io/ecma262/#sec-parsefloat-string


      $({
        global: true,
        forced: parseFloat != parseFloatImplementation },
      {
        parseFloat: parseFloatImplementation });

      /***/
    },
    /* 231 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var parseIntImplementation = __webpack_require__(195); // `parseInt` method
      // https://tc39.github.io/ecma262/#sec-parseint-string-radix


      $({
        global: true,
        forced: parseInt != parseIntImplementation },
      {
        parseInt: parseIntImplementation });

      /***/
    },
    /* 232 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var IS_PURE = __webpack_require__(24);

      var global = __webpack_require__(3);

      var path = __webpack_require__(47);

      var redefineAll = __webpack_require__(132);

      var setToStringTag = __webpack_require__(43);

      var setSpecies = __webpack_require__(124);

      var isObject = __webpack_require__(14);

      var aFunction = __webpack_require__(80);

      var anInstance = __webpack_require__(133);

      var classof = __webpack_require__(11);

      var iterate = __webpack_require__(155);

      var checkCorrectnessOfIteration = __webpack_require__(99);

      var speciesConstructor = __webpack_require__(137);

      var task = __webpack_require__(233).set;

      var microtask = __webpack_require__(234);

      var promiseResolve = __webpack_require__(236);

      var hostReportErrors = __webpack_require__(238);

      var newPromiseCapabilityModule = __webpack_require__(237);

      var perform = __webpack_require__(239);

      var userAgent = __webpack_require__(235);

      var InternalStateModule = __webpack_require__(26);

      var isForced = __webpack_require__(41);

      var wellKnownSymbol = __webpack_require__(44);

      var SPECIES = wellKnownSymbol('species');
      var PROMISE = 'Promise';
      var getInternalState = InternalStateModule.get;
      var setInternalState = InternalStateModule.set;
      var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
      var PromiseConstructor = global[PROMISE];
      var TypeError = global.TypeError;
      var document = global.document;
      var process = global.process;
      var $fetch = global.fetch;
      var versions = process && process.versions;
      var v8 = versions && versions.v8 || '';
      var newPromiseCapability = newPromiseCapabilityModule.f;
      var newGenericPromiseCapability = newPromiseCapability;
      var IS_NODE = classof(process) == 'process';
      var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
      var UNHANDLED_REJECTION = 'unhandledrejection';
      var REJECTION_HANDLED = 'rejectionhandled';
      var PENDING = 0;
      var FULFILLED = 1;
      var REJECTED = 2;
      var HANDLED = 1;
      var UNHANDLED = 2;
      var Internal, OwnPromiseCapability, PromiseWrapper;
      var FORCED = isForced(PROMISE, function () {
        // correct subclassing with @@species support
        var promise = PromiseConstructor.resolve(1);

        var empty = function empty() {
          /* empty */
        };

        var FakePromise = (promise.constructor = {})[SPECIES] = function (exec) {
          exec(empty, empty);
        }; // unhandled rejections tracking support, NodeJS Promise without it fails @@species test


        return !((IS_NODE || typeof PromiseRejectionEvent == 'function') && (!IS_PURE || promise['finally']) && promise.then(empty) instanceof FakePromise // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
        // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
        // we can't detect it synchronously, so just check versions
        && v8.indexOf('6.6') !== 0 && userAgent.indexOf('Chrome/66') === -1);
      });
      var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
        PromiseConstructor.all(iterable)['catch'](function () {
          /* empty */
        });
      }); // helpers

      var isThenable = function isThenable(it) {
        var then;
        return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
      };

      var notify = function notify(promise, state, isReject) {
        if (state.notified) return;
        state.notified = true;
        var chain = state.reactions;
        microtask(function () {
          var value = state.value;
          var ok = state.state == FULFILLED;
          var i = 0;

          var run = function run(reaction) {
            var handler = ok ? reaction.ok : reaction.fail;
            var resolve = reaction.resolve;
            var reject = reaction.reject;
            var domain = reaction.domain;
            var result, then, exited;

            try {
              if (handler) {
                if (!ok) {
                  if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
                  state.rejection = HANDLED;
                }

                if (handler === true) result = value;else {
                  if (domain) domain.enter();
                  result = handler(value); // may throw

                  if (domain) {
                    domain.exit();
                    exited = true;
                  }
                }

                if (result === reaction.promise) {
                  reject(TypeError('Promise-chain cycle'));
                } else if (then = isThenable(result)) {
                  then.call(result, resolve, reject);
                } else resolve(result);
              } else reject(value);
            } catch (error) {
              if (domain && !exited) domain.exit();
              reject(error);
            }
          };

          while (chain.length > i) run(chain[i++]); // variable length - can't use forEach


          state.reactions = [];
          state.notified = false;
          if (isReject && !state.rejection) onUnhandled(promise, state);
        });
      };

      var dispatchEvent = function dispatchEvent(name, promise, reason) {
        var event, handler;

        if (DISPATCH_EVENT) {
          event = document.createEvent('Event');
          event.promise = promise;
          event.reason = reason;
          event.initEvent(name, false, true);
          global.dispatchEvent(event);
        } else event = {
          promise: promise,
          reason: reason };


        if (handler = global['on' + name]) handler(event);else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
      };

      var onUnhandled = function onUnhandled(promise, state) {
        task.call(global, function () {
          var value = state.value;
          var IS_UNHANDLED = isUnhandled(state);
          var result;

          if (IS_UNHANDLED) {
            result = perform(function () {
              if (IS_NODE) {
                process.emit('unhandledRejection', value, promise);
              } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
            }); // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

            state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
            if (result.error) throw result.value;
          }
        });
      };

      var isUnhandled = function isUnhandled(state) {
        return state.rejection !== HANDLED && !state.parent;
      };

      var onHandleUnhandled = function onHandleUnhandled(promise, state) {
        task.call(global, function () {
          if (IS_NODE) {
            process.emit('rejectionHandled', promise);
          } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
        });
      };

      var bind = function bind(fn, promise, state, unwrap) {
        return function (value) {
          fn(promise, state, value, unwrap);
        };
      };

      var internalReject = function internalReject(promise, state, value, unwrap) {
        if (state.done) return;
        state.done = true;
        if (unwrap) state = unwrap;
        state.value = value;
        state.state = REJECTED;
        notify(promise, state, true);
      };

      var internalResolve = function internalResolve(promise, state, value, unwrap) {
        if (state.done) return;
        state.done = true;
        if (unwrap) state = unwrap;

        try {
          if (promise === value) throw TypeError("Promise can't be resolved itself");
          var then = isThenable(value);

          if (then) {
            microtask(function () {
              var wrapper = {
                done: false };


              try {
                then.call(value, bind(internalResolve, promise, wrapper, state), bind(internalReject, promise, wrapper, state));
              } catch (error) {
                internalReject(promise, wrapper, error, state);
              }
            });
          } else {
            state.value = value;
            state.state = FULFILLED;
            notify(promise, state, false);
          }
        } catch (error) {
          internalReject(promise, {
            done: false },
          error, state);
        }
      }; // constructor polyfill


      if (FORCED) {
        // 25.4.3.1 Promise(executor)
        PromiseConstructor = function Promise(executor) {
          anInstance(this, PromiseConstructor, PROMISE);
          aFunction(executor);
          Internal.call(this);
          var state = getInternalState(this);

          try {
            executor(bind(internalResolve, this, state), bind(internalReject, this, state));
          } catch (error) {
            internalReject(this, state, error);
          }
        }; // eslint-disable-next-line no-unused-vars


        Internal = function Promise(executor) {
          setInternalState(this, {
            type: PROMISE,
            done: false,
            notified: false,
            parent: false,
            reactions: [],
            rejection: false,
            state: PENDING,
            value: undefined$1 });

        };

        Internal.prototype = redefineAll(PromiseConstructor.prototype, {
          // `Promise.prototype.then` method
          // https://tc39.github.io/ecma262/#sec-promise.prototype.then
          then: function then(onFulfilled, onRejected) {
            var state = getInternalPromiseState(this);
            var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
            reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
            reaction.fail = typeof onRejected == 'function' && onRejected;
            reaction.domain = IS_NODE ? process.domain : undefined$1;
            state.parent = true;
            state.reactions.push(reaction);
            if (state.state != PENDING) notify(this, state, false);
            return reaction.promise;
          },
          // `Promise.prototype.catch` method
          // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
          'catch': function (onRejected) {
            return this.then(undefined$1, onRejected);
          } });


        OwnPromiseCapability = function () {
          var promise = new Internal();
          var state = getInternalState(promise);
          this.promise = promise;
          this.resolve = bind(internalResolve, promise, state);
          this.reject = bind(internalReject, promise, state);
        };

        newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
          return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
        }; // wrap fetch result


        if (!IS_PURE && typeof $fetch == 'function') $({
          global: true,
          enumerable: true,
          forced: true },
        {
          // eslint-disable-next-line no-unused-vars
          fetch: function fetch(input) {
            return promiseResolve(PromiseConstructor, $fetch.apply(global, arguments));
          } });

      }

      $({
        global: true,
        wrap: true,
        forced: FORCED },
      {
        Promise: PromiseConstructor });

      setToStringTag(PromiseConstructor, PROMISE, false, true);
      setSpecies(PROMISE);
      PromiseWrapper = path[PROMISE]; // statics

      $({
        target: PROMISE,
        stat: true,
        forced: FORCED },
      {
        // `Promise.reject` method
        // https://tc39.github.io/ecma262/#sec-promise.reject
        reject: function reject(r) {
          var capability = newPromiseCapability(this);
          capability.reject.call(undefined$1, r);
          return capability.promise;
        } });

      $({
        target: PROMISE,
        stat: true,
        forced: IS_PURE || FORCED },
      {
        // `Promise.resolve` method
        // https://tc39.github.io/ecma262/#sec-promise.resolve
        resolve: function resolve(x) {
          return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
        } });

      $({
        target: PROMISE,
        stat: true,
        forced: INCORRECT_ITERATION },
      {
        // `Promise.all` method
        // https://tc39.github.io/ecma262/#sec-promise.all
        all: function all(iterable) {
          var C = this;
          var capability = newPromiseCapability(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function () {
            var $promiseResolve = aFunction(C.resolve);
            var values = [];
            var counter = 0;
            var remaining = 1;
            iterate(iterable, function (promise) {
              var index = counter++;
              var alreadyCalled = false;
              values.push(undefined$1);
              remaining++;
              $promiseResolve.call(C, promise).then(function (value) {
                if (alreadyCalled) return;
                alreadyCalled = true;
                values[index] = value;
                --remaining || resolve(values);
              }, reject);
            });
            --remaining || resolve(values);
          });
          if (result.error) reject(result.value);
          return capability.promise;
        },
        // `Promise.race` method
        // https://tc39.github.io/ecma262/#sec-promise.race
        race: function race(iterable) {
          var C = this;
          var capability = newPromiseCapability(C);
          var reject = capability.reject;
          var result = perform(function () {
            var $promiseResolve = aFunction(C.resolve);
            iterate(iterable, function (promise) {
              $promiseResolve.call(C, promise).then(capability.resolve, reject);
            });
          });
          if (result.error) reject(result.value);
          return capability.promise;
        } });

      /***/
    },
    /* 233 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var fails = __webpack_require__(6);

      var classof = __webpack_require__(11);

      var bind = __webpack_require__(79);

      var html = __webpack_require__(54);

      var createElement = __webpack_require__(17);

      var location = global.location;
      var set = global.setImmediate;
      var clear = global.clearImmediate;
      var process = global.process;
      var MessageChannel = global.MessageChannel;
      var Dispatch = global.Dispatch;
      var counter = 0;
      var queue = {};
      var ONREADYSTATECHANGE = 'onreadystatechange';
      var defer, channel, port;

      var run = function run(id) {
        // eslint-disable-next-line no-prototype-builtins
        if (queue.hasOwnProperty(id)) {
          var fn = queue[id];
          delete queue[id];
          fn();
        }
      };

      var runner = function runner(id) {
        return function () {
          run(id);
        };
      };

      var listener = function listener(event) {
        run(event.data);
      };

      var post = function post(id) {
        // old engines have not location.origin
        global.postMessage(id + '', location.protocol + '//' + location.host);
      }; // Node.js 0.9+ & IE10+ has setImmediate, otherwise:


      if (!set || !clear) {
        set = function setImmediate(fn) {
          var args = [];
          var i = 1;

          while (arguments.length > i) args.push(arguments[i++]);

          queue[++counter] = function () {
            // eslint-disable-next-line no-new-func
            (typeof fn == 'function' ? fn : Function(fn)).apply(undefined$1, args);
          };

          defer(counter);
          return counter;
        };

        clear = function clearImmediate(id) {
          delete queue[id];
        }; // Node.js 0.8-


        if (classof(process) == 'process') {
          defer = function (id) {
            process.nextTick(runner(id));
          }; // Sphere (JS game engine) Dispatch API

        } else if (Dispatch && Dispatch.now) {
          defer = function (id) {
            Dispatch.now(runner(id));
          }; // Browsers with MessageChannel, includes WebWorkers

        } else if (MessageChannel) {
          channel = new MessageChannel();
          port = channel.port2;
          channel.port1.onmessage = listener;
          defer = bind(port.postMessage, port, 1); // Browsers with postMessage, skip WebWorkers
          // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
        } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts && !fails(post)) {
          defer = post;
          global.addEventListener('message', listener, false); // IE8-
        } else if (ONREADYSTATECHANGE in createElement('script')) {
          defer = function (id) {
            html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
              html.removeChild(this);
              run(id);
            };
          }; // Rest old browsers

        } else {
          defer = function (id) {
            setTimeout(runner(id), 0);
          };
        }
      }

      module.exports = {
        set: set,
        clear: clear };

      /***/
    },
    /* 234 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var getOwnPropertyDescriptor = __webpack_require__(4).f;

      var classof = __webpack_require__(11);

      var macrotask = __webpack_require__(233).set;

      var userAgent = __webpack_require__(235);

      var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
      var process = global.process;
      var Promise = global.Promise;
      var IS_NODE = classof(process) == 'process'; // Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`

      var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
      var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
      var flush, head, last, notify, toggle, node, promise; // modern engines have queueMicrotask method

      if (!queueMicrotask) {
        flush = function () {
          var parent, fn;
          if (IS_NODE && (parent = process.domain)) parent.exit();

          while (head) {
            fn = head.fn;
            head = head.next;

            try {
              fn();
            } catch (error) {
              if (head) notify();else last = undefined$1;
              throw error;
            }
          }

          last = undefined$1;
          if (parent) parent.enter();
        }; // Node.js


        if (IS_NODE) {
          notify = function () {
            process.nextTick(flush);
          }; // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339

        } else if (MutationObserver && !/(iphone|ipod|ipad).*applewebkit/i.test(userAgent)) {
          toggle = true;
          node = document.createTextNode('');
          new MutationObserver(flush).observe(node, {
            characterData: true });
          // eslint-disable-line no-new

          notify = function () {
            node.data = toggle = !toggle;
          }; // environments with maybe non-completely correct, but existent Promise

        } else if (Promise && Promise.resolve) {
          // Promise.resolve without an argument throws an error in LG WebOS 2
          promise = Promise.resolve(undefined$1);

          notify = function () {
            promise.then(flush);
          }; // for other environments - macrotask based on:
          // - setImmediate
          // - MessageChannel
          // - window.postMessag
          // - onreadystatechange
          // - setTimeout

        } else {
          notify = function () {
            // strange IE + webpack dev server bug - use .call(global)
            macrotask.call(global, flush);
          };
        }
      }

      module.exports = queueMicrotask || function (fn) {
        var task = {
          fn: fn,
          next: undefined$1 };

        if (last) last.next = task;

        if (!head) {
          head = task;
          notify();
        }

        last = task;
      };
      /***/

    },
    /* 235 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var navigator = global.navigator;
      module.exports = navigator && navigator.userAgent || '';
      /***/
    },
    /* 236 */

    /***/
    function (module, exports, __webpack_require__) {
      var anObject = __webpack_require__(20);

      var isObject = __webpack_require__(14);

      var newPromiseCapability = __webpack_require__(237);

      module.exports = function (C, x) {
        anObject(C);
        if (isObject(x) && x.constructor === C) return x;
        var promiseCapability = newPromiseCapability.f(C);
        var resolve = promiseCapability.resolve;
        resolve(x);
        return promiseCapability.promise;
      };
      /***/

    },
    /* 237 */

    /***/
    function (module, exports, __webpack_require__) {
      var aFunction = __webpack_require__(80);

      var PromiseCapability = function PromiseCapability(C) {
        var resolve, reject;
        this.promise = new C(function ($$resolve, $$reject) {
          if (resolve !== undefined$1 || reject !== undefined$1) throw TypeError('Bad Promise constructor');
          resolve = $$resolve;
          reject = $$reject;
        });
        this.resolve = aFunction(resolve);
        this.reject = aFunction(reject);
      }; // 25.4.1.5 NewPromiseCapability(C)


      module.exports.f = function (C) {
        return new PromiseCapability(C);
      };
      /***/

    },
    /* 238 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      module.exports = function (a, b) {
        var console = global.console;

        if (console && console.error) {
          arguments.length === 1 ? console.error(a) : console.error(a, b);
        }
      };
      /***/

    },
    /* 239 */

    /***/
    function (module, exports) {
      module.exports = function (exec) {
        try {
          return {
            error: false,
            value: exec() };

        } catch (error) {
          return {
            error: true,
            value: error };

        }
      };
      /***/

    },
    /* 240 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var getBuiltIn = __webpack_require__(125);

      var speciesConstructor = __webpack_require__(137);

      var promiseResolve = __webpack_require__(236); // `Promise.prototype.finally` method
      // https://tc39.github.io/ecma262/#sec-promise.prototype.finally


      $({
        target: 'Promise',
        proto: true,
        real: true },
      {
        'finally': function (onFinally) {
          var C = speciesConstructor(this, getBuiltIn('Promise'));
          var isFunction = typeof onFinally == 'function';
          return this.then(isFunction ? function (x) {
            return promiseResolve(C, onFinally()).then(function () {
              return x;
            });
          } : onFinally, isFunction ? function (e) {
            return promiseResolve(C, onFinally()).then(function () {
              throw e;
            });
          } : onFinally);
        } });

      /***/
    },
    /* 241 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var global = __webpack_require__(3);

      var aFunction = __webpack_require__(80);

      var anObject = __webpack_require__(20);

      var fails = __webpack_require__(6);

      var nativeApply = (global.Reflect || {}).apply;
      var functionApply = Function.apply; // MS Edge argumentsList argument is optional

      var OPTIONAL_ARGUMENTS_LIST = !fails(function () {
        nativeApply(function () {
          /* empty */
        });
      }); // `Reflect.apply` method
      // https://tc39.github.io/ecma262/#sec-reflect.apply

      $({
        target: 'Reflect',
        stat: true,
        forced: OPTIONAL_ARGUMENTS_LIST },
      {
        apply: function apply(target, thisArgument, argumentsList) {
          aFunction(target);
          anObject(argumentsList);
          return nativeApply ? nativeApply(target, thisArgument, argumentsList) : functionApply.call(target, thisArgument, argumentsList);
        } });

      /***/
    },
    /* 242 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var global = __webpack_require__(3);

      var create = __webpack_require__(52);

      var aFunction = __webpack_require__(80);

      var anObject = __webpack_require__(20);

      var isObject = __webpack_require__(14);

      var fails = __webpack_require__(6);

      var bind = __webpack_require__(147);

      var nativeConstruct = (global.Reflect || {}).construct; // `Reflect.construct` method
      // https://tc39.github.io/ecma262/#sec-reflect.construct
      // MS Edge supports only 2 arguments and argumentsList argument is optional
      // FF Nightly sets third argument as `new.target`, but does not create `this` from it

      var NEW_TARGET_BUG = fails(function () {
        function F() {
          /* empty */
        }

        return !(nativeConstruct(function () {
          /* empty */
        }, [], F) instanceof F);
      });
      var ARGS_BUG = !fails(function () {
        nativeConstruct(function () {
          /* empty */
        });
      });
      var FORCED = NEW_TARGET_BUG || ARGS_BUG;
      $({
        target: 'Reflect',
        stat: true,
        forced: FORCED,
        sham: FORCED },
      {
        construct: function construct(Target, args
        /* , newTarget */)
        {
          aFunction(Target);
          anObject(args);
          var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
          if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);

          if (Target == newTarget) {
            // w/o altered newTarget, optimization for 0-4 arguments
            switch (args.length) {
              case 0:
                return new Target();

              case 1:
                return new Target(args[0]);

              case 2:
                return new Target(args[0], args[1]);

              case 3:
                return new Target(args[0], args[1], args[2]);

              case 4:
                return new Target(args[0], args[1], args[2], args[3]);}
            // w/o altered newTarget, lot of arguments case


            var $args = [null];
            $args.push.apply($args, args);
            return new (bind.apply(Target, $args))();
          } // with altered newTarget, not support built-in constructors


          var proto = newTarget.prototype;
          var instance = create(isObject(proto) ? proto : Object.prototype);
          var result = Function.apply.call(Target, instance, args);
          return isObject(result) ? result : instance;
        } });

      /***/
    },
    /* 243 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var fails = __webpack_require__(6);

      var definePropertyModule = __webpack_require__(19);

      var anObject = __webpack_require__(20);

      var toPrimitive = __webpack_require__(13);

      var DESCRIPTORS = __webpack_require__(5); // MS Edge has broken Reflect.defineProperty - throwing instead of returning false


      var ERROR_INSTEAD_OF_FALSE = fails(function () {
        // eslint-disable-next-line no-undef
        Reflect.defineProperty(definePropertyModule.f({}, 1, {
          value: 1 }),
        1, {
          value: 2 });

      }); // `Reflect.defineProperty` method
      // https://tc39.github.io/ecma262/#sec-reflect.defineproperty

      $({
        target: 'Reflect',
        stat: true,
        forced: ERROR_INSTEAD_OF_FALSE,
        sham: !DESCRIPTORS },
      {
        defineProperty: function defineProperty(target, propertyKey, attributes) {
          anObject(target);
          propertyKey = toPrimitive(propertyKey, true);
          anObject(attributes);

          try {
            definePropertyModule.f(target, propertyKey, attributes);
            return true;
          } catch (error) {
            return false;
          }
        } });

      /***/
    },
    /* 244 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var getOwnPropertyDescriptor = __webpack_require__(4).f;

      var anObject = __webpack_require__(20); // `Reflect.deleteProperty` method
      // https://tc39.github.io/ecma262/#sec-reflect.deleteproperty


      $({
        target: 'Reflect',
        stat: true },
      {
        deleteProperty: function deleteProperty(target, propertyKey) {
          var descriptor = getOwnPropertyDescriptor(anObject(target), propertyKey);
          return descriptor && !descriptor.configurable ? false : delete target[propertyKey];
        } });

      /***/
    },
    /* 245 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var getOwnPropertyDescriptorModule = __webpack_require__(4);

      var getPrototypeOf = __webpack_require__(107);

      var has = __webpack_require__(15);

      var isObject = __webpack_require__(14);

      var anObject = __webpack_require__(20); // `Reflect.get` method
      // https://tc39.github.io/ecma262/#sec-reflect.get


      function get(target, propertyKey
      /* , receiver */)
      {
        var receiver = arguments.length < 3 ? target : arguments[2];
        var descriptor, prototype;
        if (anObject(target) === receiver) return target[propertyKey];
        if (descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey)) return has(descriptor, 'value') ? descriptor.value : descriptor.get === undefined$1 ? undefined$1 : descriptor.get.call(receiver);
        if (isObject(prototype = getPrototypeOf(target))) return get(prototype, propertyKey, receiver);
      }

      $({
        target: 'Reflect',
        stat: true },
      {
        get: get });

      /***/
    },
    /* 246 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var getOwnPropertyDescriptorModule = __webpack_require__(4);

      var anObject = __webpack_require__(20);

      var DESCRIPTORS = __webpack_require__(5); // `Reflect.getOwnPropertyDescriptor` method
      // https://tc39.github.io/ecma262/#sec-reflect.getownpropertydescriptor


      $({
        target: 'Reflect',
        stat: true,
        sham: !DESCRIPTORS },
      {
        getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
          return getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
        } });

      /***/
    },
    /* 247 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var objectGetPrototypeOf = __webpack_require__(107);

      var anObject = __webpack_require__(20);

      var CORRECT_PROTOTYPE_GETTER = __webpack_require__(108); // `Reflect.getPrototypeOf` method
      // https://tc39.github.io/ecma262/#sec-reflect.getprototypeof


      $({
        target: 'Reflect',
        stat: true,
        sham: !CORRECT_PROTOTYPE_GETTER },
      {
        getPrototypeOf: function getPrototypeOf(target) {
          return objectGetPrototypeOf(anObject(target));
        } });

      /***/
    },
    /* 248 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2); // `Reflect.has` method
      // https://tc39.github.io/ecma262/#sec-reflect.has


      $({
        target: 'Reflect',
        stat: true },
      {
        has: function has(target, propertyKey) {
          return propertyKey in target;
        } });

      /***/
    },
    /* 249 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var anObject = __webpack_require__(20);

      var objectIsExtensible = Object.isExtensible; // `Reflect.isExtensible` method
      // https://tc39.github.io/ecma262/#sec-reflect.isextensible

      $({
        target: 'Reflect',
        stat: true },
      {
        isExtensible: function isExtensible(target) {
          anObject(target);
          return objectIsExtensible ? objectIsExtensible(target) : true;
        } });

      /***/
    },
    /* 250 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var ownKeys = __webpack_require__(32); // `Reflect.ownKeys` method
      // https://tc39.github.io/ecma262/#sec-reflect.ownkeys


      $({
        target: 'Reflect',
        stat: true },
      {
        ownKeys: ownKeys });

      /***/
    },
    /* 251 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var getBuiltIn = __webpack_require__(125);

      var anObject = __webpack_require__(20);

      var FREEZING = __webpack_require__(154); // `Reflect.preventExtensions` method
      // https://tc39.github.io/ecma262/#sec-reflect.preventextensions


      $({
        target: 'Reflect',
        stat: true,
        sham: !FREEZING },
      {
        preventExtensions: function preventExtensions(target) {
          anObject(target);

          try {
            var objectPreventExtensions = getBuiltIn('Object', 'preventExtensions');
            if (objectPreventExtensions) objectPreventExtensions(target);
            return true;
          } catch (error) {
            return false;
          }
        } });

      /***/
    },
    /* 252 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var definePropertyModule = __webpack_require__(19);

      var getOwnPropertyDescriptorModule = __webpack_require__(4);

      var getPrototypeOf = __webpack_require__(107);

      var has = __webpack_require__(15);

      var createPropertyDescriptor = __webpack_require__(8);

      var anObject = __webpack_require__(20);

      var isObject = __webpack_require__(14); // `Reflect.set` method
      // https://tc39.github.io/ecma262/#sec-reflect.set


      function set(target, propertyKey, V
      /* , receiver */)
      {
        var receiver = arguments.length < 4 ? target : arguments[3];
        var ownDescriptor = getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
        var existingDescriptor, prototype;

        if (!ownDescriptor) {
          if (isObject(prototype = getPrototypeOf(target))) {
            return set(prototype, propertyKey, V, receiver);
          }

          ownDescriptor = createPropertyDescriptor(0);
        }

        if (has(ownDescriptor, 'value')) {
          if (ownDescriptor.writable === false || !isObject(receiver)) return false;

          if (existingDescriptor = getOwnPropertyDescriptorModule.f(receiver, propertyKey)) {
            if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
            existingDescriptor.value = V;
            definePropertyModule.f(receiver, propertyKey, existingDescriptor);
          } else definePropertyModule.f(receiver, propertyKey, createPropertyDescriptor(0, V));

          return true;
        }

        return ownDescriptor.set === undefined$1 ? false : (ownDescriptor.set.call(receiver, V), true);
      }

      $({
        target: 'Reflect',
        stat: true },
      {
        set: set });

      /***/
    },
    /* 253 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var objectSetPrototypeOf = __webpack_require__(109);

      var validateSetPrototypeOfArguments = __webpack_require__(110); // `Reflect.setPrototypeOf` method
      // https://tc39.github.io/ecma262/#sec-reflect.setprototypeof


      if (objectSetPrototypeOf) $({
        target: 'Reflect',
        stat: true },
      {
        setPrototypeOf: function setPrototypeOf(target, proto) {
          validateSetPrototypeOfArguments(target, proto);

          try {
            objectSetPrototypeOf(target, proto);
            return true;
          } catch (error) {
            return false;
          }
        } });

      /***/
    },
    /* 254 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(5);

      var global = __webpack_require__(3);

      var isForced = __webpack_require__(41);

      var inheritIfRequired = __webpack_require__(156);

      var defineProperty = __webpack_require__(19).f;

      var getOwnPropertyNames = __webpack_require__(33).f;

      var isRegExp = __webpack_require__(255);

      var getFlags = __webpack_require__(256);

      var redefine = __webpack_require__(21);

      var fails = __webpack_require__(6);

      var setSpecies = __webpack_require__(124);

      var wellKnownSymbol = __webpack_require__(44);

      var MATCH = wellKnownSymbol('match');
      var NativeRegExp = global.RegExp;
      var RegExpPrototype = NativeRegExp.prototype;
      var re1 = /a/g;
      var re2 = /a/g; // "new" should create a new object, old webkit bug

      var CORRECT_NEW = new NativeRegExp(re1) !== re1;
      var FORCED = isForced('RegExp', DESCRIPTORS && (!CORRECT_NEW || fails(function () {
        re2[MATCH] = false; // RegExp constructor can alter flags and IsRegExp works correct with @@match

        return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
      }))); // `RegExp` constructor
      // https://tc39.github.io/ecma262/#sec-regexp-constructor

      if (FORCED) {
        var RegExpWrapper = function RegExp(pattern, flags) {
          var thisIsRegExp = this instanceof RegExpWrapper;
          var patternIsRegExp = isRegExp(pattern);
          var flagsAreUndefined = flags === undefined$1;
          return !thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined ? pattern : inheritIfRequired(CORRECT_NEW ? new NativeRegExp(patternIsRegExp && !flagsAreUndefined ? pattern.source : pattern, flags) : NativeRegExp((patternIsRegExp = pattern instanceof RegExpWrapper) ? pattern.source : pattern, patternIsRegExp && flagsAreUndefined ? getFlags.call(pattern) : flags), thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);
        };

        var proxy = function proxy(key) {
          key in RegExpWrapper || defineProperty(RegExpWrapper, key, {
            configurable: true,
            get: function () {
              return NativeRegExp[key];
            },
            set: function (it) {
              NativeRegExp[key] = it;
            } });

        };

        var keys = getOwnPropertyNames(NativeRegExp);
        var i = 0;

        while (i < keys.length) proxy(keys[i++]);

        RegExpPrototype.constructor = RegExpWrapper;
        RegExpWrapper.prototype = RegExpPrototype;
        redefine(global, 'RegExp', RegExpWrapper);
      } // https://tc39.github.io/ecma262/#sec-get-regexp-@@species


      setSpecies('RegExp');
      /***/
    },
    /* 255 */

    /***/
    function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__(14);

      var classof = __webpack_require__(11);

      var wellKnownSymbol = __webpack_require__(44);

      var MATCH = wellKnownSymbol('match'); // `IsRegExp` abstract operation
      // https://tc39.github.io/ecma262/#sec-isregexp

      module.exports = function (it) {
        var isRegExp;
        return isObject(it) && ((isRegExp = it[MATCH]) !== undefined$1 ? !!isRegExp : classof(it) == 'RegExp');
      };
      /***/

    },
    /* 256 */

    /***/
    function (module, exports, __webpack_require__) {
      var anObject = __webpack_require__(20); // `RegExp.prototype.flags` getter implementation
      // https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags


      module.exports = function () {
        var that = anObject(this);
        var result = '';
        if (that.global) result += 'g';
        if (that.ignoreCase) result += 'i';
        if (that.multiline) result += 'm';
        if (that.unicode) result += 'u';
        if (that.sticky) result += 'y';
        return result;
      };
      /***/

    },
    /* 257 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var exec = __webpack_require__(258);

      $({
        target: 'RegExp',
        proto: true,
        forced: /./.exec !== exec },
      {
        exec: exec });

      /***/
    },
    /* 258 */

    /***/
    function (module, exports, __webpack_require__) {
      var regexpFlags = __webpack_require__(256);

      var nativeExec = RegExp.prototype.exec; // This always refers to the native implementation, because the
      // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
      // which loads this file before patching the method.

      var nativeReplace = String.prototype.replace;
      var patchedExec = nativeExec;

      var UPDATES_LAST_INDEX_WRONG = function () {
        var re1 = /a/;
        var re2 = /b*/g;
        nativeExec.call(re1, 'a');
        nativeExec.call(re2, 'a');
        return re1.lastIndex !== 0 || re2.lastIndex !== 0;
      }(); // nonparticipating capturing group, copied from es5-shim's String#split patch.


      var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined$1;
      var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

      if (PATCH) {
        patchedExec = function exec(str) {
          var re = this;
          var lastIndex, reCopy, match, i;

          if (NPCG_INCLUDED) {
            reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
          }

          if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;
          match = nativeExec.call(re, str);

          if (UPDATES_LAST_INDEX_WRONG && match) {
            re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
          }

          if (NPCG_INCLUDED && match && match.length > 1) {
            // Fix browsers whose `exec` methods don't consistently return `undefined`
            // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
            nativeReplace.call(match[0], reCopy, function () {
              for (i = 1; i < arguments.length - 2; i++) {
                if (arguments[i] === undefined$1) match[i] = undefined$1;
              }
            });
          }

          return match;
        };
      }

      module.exports = patchedExec;
      /***/
    },
    /* 259 */

    /***/
    function (module, exports, __webpack_require__) {
      var DESCRIPTORS = __webpack_require__(5);

      var objectDefinePropertyModule = __webpack_require__(19);

      var regExpFlags = __webpack_require__(256); // `RegExp.prototype.flags` getter
      // https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags


      if (DESCRIPTORS && /./g.flags != 'g') {
        objectDefinePropertyModule.f(RegExp.prototype, 'flags', {
          configurable: true,
          get: regExpFlags });

      }
      /***/

    },
    /* 260 */

    /***/
    function (module, exports, __webpack_require__) {
      var redefine = __webpack_require__(21);

      var anObject = __webpack_require__(20);

      var fails = __webpack_require__(6);

      var flags = __webpack_require__(256);

      var TO_STRING = 'toString';
      var nativeToString = /./[TO_STRING];
      var RegExpPrototype = RegExp.prototype;
      var NOT_GENERIC = fails(function () {
        return nativeToString.call({
          source: 'a',
          flags: 'b' }) !=
        '/a/b';
      }); // FF44- RegExp#toString has a wrong name

      var INCORRECT_NAME = nativeToString.name != TO_STRING; // `RegExp.prototype.toString` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring

      if (NOT_GENERIC || INCORRECT_NAME) {
        redefine(RegExp.prototype, TO_STRING, function toString() {
          var R = anObject(this);
          var p = String(R.source);
          var rf = R.flags;
          var f = String(rf === undefined$1 && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);
          return '/' + p + '/' + f;
        }, {
          unsafe: true });

      }
      /***/

    },
    /* 261 */

    /***/
    function (module, exports, __webpack_require__) {
      var collection = __webpack_require__(152);

      var collectionStrong = __webpack_require__(157); // `Set` constructor
      // https://tc39.github.io/ecma262/#sec-set-objects


      module.exports = collection('Set', function (get) {
        return function Set() {
          return get(this, arguments.length > 0 ? arguments[0] : undefined$1);
        };
      }, collectionStrong);
      /***/
    },
    /* 262 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var internalCodePointAt = __webpack_require__(263); // `String.prototype.codePointAt` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat


      $({
        target: 'String',
        proto: true },
      {
        codePointAt: function codePointAt(pos) {
          return internalCodePointAt(this, pos);
        } });

      /***/
    },
    /* 263 */

    /***/
    function (module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(37);

      var requireObjectCoercible = __webpack_require__(12); // CONVERT_TO_STRING: true  -> String#at
      // CONVERT_TO_STRING: false -> String#codePointAt


      module.exports = function (that, pos, CONVERT_TO_STRING) {
        var S = String(requireObjectCoercible(that));
        var position = toInteger(pos);
        var size = S.length;
        var first, second;
        if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined$1;
        first = S.charCodeAt(position);
        return first < 0xD800 || first > 0xDBFF || position + 1 === size || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
      };
      /***/

    },
    /* 264 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var toLength = __webpack_require__(36);

      var validateArguments = __webpack_require__(265);

      var correctIsRegExpLogic = __webpack_require__(266);

      var ENDS_WITH = 'endsWith';
      var nativeEndsWith = ''[ENDS_WITH];
      var min = Math.min; // `String.prototype.endsWith` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.endswith

      $({
        target: 'String',
        proto: true,
        forced: !correctIsRegExpLogic(ENDS_WITH) },
      {
        endsWith: function endsWith(searchString
        /* , endPosition = @length */)
        {
          var that = validateArguments(this, searchString, ENDS_WITH);
          var endPosition = arguments.length > 1 ? arguments[1] : undefined$1;
          var len = toLength(that.length);
          var end = endPosition === undefined$1 ? len : min(toLength(endPosition), len);
          var search = String(searchString);
          return nativeEndsWith ? nativeEndsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
        } });

      /***/
    },
    /* 265 */

    /***/
    function (module, exports, __webpack_require__) {
      // helper for String#{startsWith, endsWith, includes}
      var isRegExp = __webpack_require__(255);

      var requireObjectCoercible = __webpack_require__(12);

      module.exports = function (that, searchString, NAME) {
        if (isRegExp(searchString)) {
          throw TypeError('String.prototype.' + NAME + " doesn't accept regex");
        }

        return String(requireObjectCoercible(that));
      };
      /***/

    },
    /* 266 */

    /***/
    function (module, exports, __webpack_require__) {
      var wellKnownSymbol = __webpack_require__(44);

      var MATCH = wellKnownSymbol('match');

      module.exports = function (METHOD_NAME) {
        var regexp = /./;

        try {
          '/./'[METHOD_NAME](regexp);
        } catch (e) {
          try {
            regexp[MATCH] = false;
            return '/./'[METHOD_NAME](regexp);
          } catch (f) {
            /* empty */
          }
        }

        return false;
      };
      /***/

    },
    /* 267 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var toAbsoluteIndex = __webpack_require__(38);

      var fromCharCode = String.fromCharCode;
      var nativeFromCodePoint = String.fromCodePoint; // length should be 1, old FF problem

      var INCORRECT_LENGTH = !!nativeFromCodePoint && nativeFromCodePoint.length != 1; // `String.fromCodePoint` method
      // https://tc39.github.io/ecma262/#sec-string.fromcodepoint

      $({
        target: 'String',
        stat: true,
        forced: INCORRECT_LENGTH },
      {
        fromCodePoint: function fromCodePoint(x) {
          // eslint-disable-line no-unused-vars
          var elements = [];
          var length = arguments.length;
          var i = 0;
          var code;

          while (length > i) {
            code = +arguments[i++];
            if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');
            elements.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00));
          }

          return elements.join('');
        } });

      /***/
    },
    /* 268 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var validateArguments = __webpack_require__(265);

      var correctIsRegExpLogic = __webpack_require__(266); // `String.prototype.includes` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.includes


      $({
        target: 'String',
        proto: true,
        forced: !correctIsRegExpLogic('includes') },
      {
        includes: function includes(searchString
        /* , position = 0 */)
        {
          return !!~validateArguments(this, searchString, 'includes').indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined$1);
        } });

      /***/
    },
    /* 269 */

    /***/
    function (module, exports, __webpack_require__) {
      var codePointAt = __webpack_require__(263);

      var InternalStateModule = __webpack_require__(26);

      var defineIterator = __webpack_require__(104);

      var STRING_ITERATOR = 'String Iterator';
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR); // `String.prototype[@@iterator]` method
      // https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator

      defineIterator(String, 'String', function (iterated) {
        setInternalState(this, {
          type: STRING_ITERATOR,
          string: String(iterated),
          index: 0 });
        // `%StringIteratorPrototype%.next` method
        // https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
      }, function next() {
        var state = getInternalState(this);
        var string = state.string;
        var index = state.index;
        var point;
        if (index >= string.length) return {
          value: undefined$1,
          done: true };

        point = codePointAt(string, index, true);
        state.index += point.length;
        return {
          value: point,
          done: false };

      });
      /***/
    },
    /* 270 */

    /***/
    function (module, exports, __webpack_require__) {
      var fixRegExpWellKnownSymbolLogic = __webpack_require__(271);

      var anObject = __webpack_require__(20);

      var toLength = __webpack_require__(36);

      var requireObjectCoercible = __webpack_require__(12);

      var advanceStringIndex = __webpack_require__(272);

      var regExpExec = __webpack_require__(273); // @@match logic


      fixRegExpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {
        return [// `String.prototype.match` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.match
        function match(regexp) {
          var O = requireObjectCoercible(this);
          var matcher = regexp == undefined$1 ? undefined$1 : regexp[MATCH];
          return matcher !== undefined$1 ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
        }, // `RegExp.prototype[@@match]` method
        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
        function (regexp) {
          var res = maybeCallNative(nativeMatch, regexp, this);
          if (res.done) return res.value;
          var rx = anObject(regexp);
          var S = String(this);
          if (!rx.global) return regExpExec(rx, S);
          var fullUnicode = rx.unicode;
          rx.lastIndex = 0;
          var A = [];
          var n = 0;
          var result;

          while ((result = regExpExec(rx, S)) !== null) {
            var matchStr = String(result[0]);
            A[n] = matchStr;
            if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
            n++;
          }

          return n === 0 ? null : A;
        }];
      });
      /***/
    },
    /* 271 */

    /***/
    function (module, exports, __webpack_require__) {
      var hide = __webpack_require__(18);

      var redefine = __webpack_require__(21);

      var fails = __webpack_require__(6);

      var wellKnownSymbol = __webpack_require__(44);

      var regexpExec = __webpack_require__(258);

      var SPECIES = wellKnownSymbol('species');
      var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
        // #replace needs built-in support for named groups.
        // #match works fine because it just return the exec results, even if it has
        // a "grops" property.
        var re = /./;

        re.exec = function () {
          var result = [];
          result.groups = {
            a: '7' };

          return result;
        };

        return ''.replace(re, '$<a>') !== '7';
      }); // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
      // Weex JS has frozen built-in prototypes, so use try / catch wrapper

      var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
        var re = /(?:)/;
        var originalExec = re.exec;

        re.exec = function () {
          return originalExec.apply(this, arguments);
        };

        var result = 'ab'.split(re);
        return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
      });

      module.exports = function (KEY, length, exec, sham) {
        var SYMBOL = wellKnownSymbol(KEY);
        var DELEGATES_TO_SYMBOL = !fails(function () {
          // String methods call symbol-named RegEp methods
          var O = {};

          O[SYMBOL] = function () {
            return 7;
          };

          return ''[KEY](O) != 7;
        });
        var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
          // Symbol-named RegExp methods call .exec
          var execCalled = false;
          var re = /a/;

          re.exec = function () {
            execCalled = true;
            return null;
          };

          if (KEY === 'split') {
            // RegExp[@@split] doesn't call the regex's exec method, but first creates
            // a new one. We need to return the patched regex when creating the new one.
            re.constructor = {};

            re.constructor[SPECIES] = function () {
              return re;
            };
          }

          re[SYMBOL]('');
          return !execCalled;
        });

        if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
          var nativeRegExpMethod = /./[SYMBOL];
          var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
            if (regexp.exec === regexpExec) {
              if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                // The native String method already delegates to @@method (this
                // polyfilled function), leasing to infinite recursion.
                // We avoid it by directly calling the native @@method method.
                return {
                  done: true,
                  value: nativeRegExpMethod.call(regexp, str, arg2) };

              }

              return {
                done: true,
                value: nativeMethod.call(str, regexp, arg2) };

            }

            return {
              done: false };

          });
          var stringMethod = methods[0];
          var regexMethod = methods[1];
          redefine(String.prototype, KEY, stringMethod);
          redefine(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
          // 21.2.5.11 RegExp.prototype[@@split](string, limit)
          ? function (string, arg) {
            return regexMethod.call(string, this, arg);
          } // 21.2.5.6 RegExp.prototype[@@match](string)
          // 21.2.5.9 RegExp.prototype[@@search](string)
          : function (string) {
            return regexMethod.call(string, this);
          });
          if (sham) hide(RegExp.prototype[SYMBOL], 'sham', true);
        }
      };
      /***/

    },
    /* 272 */

    /***/
    function (module, exports, __webpack_require__) {
      var codePointAt = __webpack_require__(263); // `AdvanceStringIndex` abstract operation
      // https://tc39.github.io/ecma262/#sec-advancestringindex


      module.exports = function (S, index, unicode) {
        return index + (unicode ? codePointAt(S, index, true).length : 1);
      };
      /***/

    },
    /* 273 */

    /***/
    function (module, exports, __webpack_require__) {
      var classof = __webpack_require__(11);

      var regexpExec = __webpack_require__(258); // `RegExpExec` abstract operation
      // https://tc39.github.io/ecma262/#sec-regexpexec


      module.exports = function (R, S) {
        var exec = R.exec;

        if (typeof exec === 'function') {
          var result = exec.call(R, S);

          if (typeof result !== 'object') {
            throw TypeError('RegExp exec method returned something other than an Object or null');
          }

          return result;
        }

        if (classof(R) !== 'RegExp') {
          throw TypeError('RegExp#exec called on incompatible receiver');
        }

        return regexpExec.call(R, S);
      };
      /***/

    },
    /* 274 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var createIteratorConstructor = __webpack_require__(105);

      var requireObjectCoercible = __webpack_require__(12);

      var toLength = __webpack_require__(36);

      var aFunction = __webpack_require__(80);

      var anObject = __webpack_require__(20);

      var classof = __webpack_require__(98);

      var getFlags = __webpack_require__(256);

      var hide = __webpack_require__(18);

      var wellKnownSymbol = __webpack_require__(44);

      var speciesConstructor = __webpack_require__(137);

      var advanceStringIndex = __webpack_require__(272);

      var InternalStateModule = __webpack_require__(26);

      var IS_PURE = __webpack_require__(24);

      var MATCH_ALL = wellKnownSymbol('matchAll');
      var REGEXP_STRING = 'RegExp String';
      var REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(REGEXP_STRING_ITERATOR);
      var RegExpPrototype = RegExp.prototype;
      var regExpBuiltinExec = RegExpPrototype.exec;

      var regExpExec = function regExpExec(R, S) {
        var exec = R.exec;
        var result;

        if (typeof exec == 'function') {
          result = exec.call(R, S);
          if (typeof result != 'object') throw TypeError('Incorrect exec result');
          return result;
        }

        return regExpBuiltinExec.call(R, S);
      }; // eslint-disable-next-line max-len


      var $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, global, fullUnicode) {
        setInternalState(this, {
          type: REGEXP_STRING_ITERATOR,
          regexp: regexp,
          string: string,
          global: global,
          unicode: fullUnicode,
          done: false });

      }, REGEXP_STRING, function next() {
        var state = getInternalState(this);
        if (state.done) return {
          value: undefined$1,
          done: true };

        var R = state.regexp;
        var S = state.string;
        var match = regExpExec(R, S);
        if (match === null) return {
          value: undefined$1,
          done: state.done = true };


        if (state.global) {
          if (String(match[0]) == '') R.lastIndex = advanceStringIndex(S, toLength(R.lastIndex), state.unicode);
          return {
            value: match,
            done: false };

        }

        state.done = true;
        return {
          value: match,
          done: false };

      });

      var $matchAll = function $matchAll(string) {
        var R = anObject(this);
        var S = String(string);
        var C, flagsValue, flags, matcher, global, fullUnicode;
        C = speciesConstructor(R, RegExp);
        flagsValue = R.flags;

        if (flagsValue === undefined$1 && R instanceof RegExp && !('flags' in RegExpPrototype)) {
          flagsValue = getFlags.call(R);
        }

        flags = flagsValue === undefined$1 ? '' : String(flagsValue);
        matcher = new C(C === RegExp ? R.source : R, flags);
        global = !!~flags.indexOf('g');
        fullUnicode = !!~flags.indexOf('u');
        matcher.lastIndex = toLength(R.lastIndex);
        return new $RegExpStringIterator(matcher, S, global, fullUnicode);
      }; // `String.prototype.matchAll` method
      // https://github.com/tc39/proposal-string-matchall


      $({
        target: 'String',
        proto: true },
      {
        matchAll: function matchAll(regexp) {
          var O = requireObjectCoercible(this);
          var S, matcher, rx;

          if (regexp != null) {
            matcher = regexp[MATCH_ALL];
            if (matcher === undefined$1 && IS_PURE && classof(regexp) == 'RegExp') matcher = $matchAll;
            if (matcher != null) return aFunction(matcher).call(regexp, O);
          }

          S = String(O);
          rx = new RegExp(regexp, 'g');
          return IS_PURE ? $matchAll.call(rx, S) : rx[MATCH_ALL](S);
        } });

      IS_PURE || MATCH_ALL in RegExpPrototype || hide(RegExpPrototype, MATCH_ALL, $matchAll);
      /***/
    },
    /* 275 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var internalStringPad = __webpack_require__(276);

      var WEBKIT_BUG = __webpack_require__(277); // `String.prototype.padEnd` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.padend


      $({
        target: 'String',
        proto: true,
        forced: WEBKIT_BUG },
      {
        padEnd: function padEnd(maxLength
        /* , fillString = ' ' */)
        {
          return internalStringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined$1, false);
        } });

      /***/
    },
    /* 276 */

    /***/
    function (module, exports, __webpack_require__) {
      // https://github.com/tc39/proposal-string-pad-start-end
      var toLength = __webpack_require__(36);

      var repeat = __webpack_require__(198);

      var requireObjectCoercible = __webpack_require__(12);

      module.exports = function (that, maxLength, fillString, left) {
        var S = String(requireObjectCoercible(that));
        var stringLength = S.length;
        var fillStr = fillString === undefined$1 ? ' ' : String(fillString);
        var intMaxLength = toLength(maxLength);
        var fillLen, stringFiller;
        if (intMaxLength <= stringLength || fillStr == '') return S;
        fillLen = intMaxLength - stringLength;
        stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
        if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
        return left ? stringFiller + S : S + stringFiller;
      };
      /***/

    },
    /* 277 */

    /***/
    function (module, exports, __webpack_require__) {
      // https://github.com/zloirock/core-js/issues/280
      var userAgent = __webpack_require__(235); // eslint-disable-next-line unicorn/no-unsafe-regex


      module.exports = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);
      /***/
    },
    /* 278 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var internalStringPad = __webpack_require__(276);

      var WEBKIT_BUG = __webpack_require__(277); // `String.prototype.padStart` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.padstart


      $({
        target: 'String',
        proto: true,
        forced: WEBKIT_BUG },
      {
        padStart: function padStart(maxLength
        /* , fillString = ' ' */)
        {
          return internalStringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined$1, true);
        } });

      /***/
    },
    /* 279 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var toIndexedObject = __webpack_require__(9);

      var toLength = __webpack_require__(36); // `String.raw` method
      // https://tc39.github.io/ecma262/#sec-string.raw


      $({
        target: 'String',
        stat: true },
      {
        raw: function raw(template) {
          var rawTemplate = toIndexedObject(template.raw);
          var literalSegments = toLength(rawTemplate.length);
          var argumentsLength = arguments.length;
          var elements = [];
          var i = 0;

          while (literalSegments > i) {
            elements.push(String(rawTemplate[i++]));
            if (i < argumentsLength) elements.push(String(arguments[i]));
          }

          return elements.join('');
        } });

      /***/
    },
    /* 280 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var repeat = __webpack_require__(198); // `String.prototype.repeat` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.repeat


      $({
        target: 'String',
        proto: true },
      {
        repeat: repeat });

      /***/
    },
    /* 281 */

    /***/
    function (module, exports, __webpack_require__) {
      var fixRegExpWellKnownSymbolLogic = __webpack_require__(271);

      var anObject = __webpack_require__(20);

      var toObject = __webpack_require__(51);

      var toLength = __webpack_require__(36);

      var toInteger = __webpack_require__(37);

      var requireObjectCoercible = __webpack_require__(12);

      var advanceStringIndex = __webpack_require__(272);

      var regExpExec = __webpack_require__(273);

      var max = Math.max;
      var min = Math.min;
      var floor = Math.floor;
      var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
      var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

      var maybeToString = function maybeToString(it) {
        return it === undefined$1 ? it : String(it);
      }; // @@replace logic


      fixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative) {
        return [// `String.prototype.replace` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.replace
        function replace(searchValue, replaceValue) {
          var O = requireObjectCoercible(this);
          var replacer = searchValue == undefined$1 ? undefined$1 : searchValue[REPLACE];
          return replacer !== undefined$1 ? replacer.call(searchValue, O, replaceValue) : nativeReplace.call(String(O), searchValue, replaceValue);
        }, // `RegExp.prototype[@@replace]` method
        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
        function (regexp, replaceValue) {
          var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
          if (res.done) return res.value;
          var rx = anObject(regexp);
          var S = String(this);
          var functionalReplace = typeof replaceValue === 'function';
          if (!functionalReplace) replaceValue = String(replaceValue);
          var global = rx.global;

          if (global) {
            var fullUnicode = rx.unicode;
            rx.lastIndex = 0;
          }

          var results = [];

          while (true) {
            var result = regExpExec(rx, S);
            if (result === null) break;
            results.push(result);
            if (!global) break;
            var matchStr = String(result[0]);
            if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
          }

          var accumulatedResult = '';
          var nextSourcePosition = 0;

          for (var i = 0; i < results.length; i++) {
            result = results[i];
            var matched = String(result[0]);
            var position = max(min(toInteger(result.index), S.length), 0);
            var captures = []; // NOTE: This is equivalent to
            //   captures = result.slice(1).map(maybeToString)
            // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
            // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
            // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

            for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));

            var namedCaptures = result.groups;

            if (functionalReplace) {
              var replacerArgs = [matched].concat(captures, position, S);
              if (namedCaptures !== undefined$1) replacerArgs.push(namedCaptures);
              var replacement = String(replaceValue.apply(undefined$1, replacerArgs));
            } else {
              replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
            }

            if (position >= nextSourcePosition) {
              accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
              nextSourcePosition = position + matched.length;
            }
          }

          return accumulatedResult + S.slice(nextSourcePosition);
        }]; // https://tc39.github.io/ecma262/#sec-getsubstitution

        function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
          var tailPos = position + matched.length;
          var m = captures.length;
          var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;

          if (namedCaptures !== undefined$1) {
            namedCaptures = toObject(namedCaptures);
            symbols = SUBSTITUTION_SYMBOLS;
          }

          return nativeReplace.call(replacement, symbols, function (match, ch) {
            var capture;

            switch (ch.charAt(0)) {
              case '$':
                return '$';

              case '&':
                return matched;

              case '`':
                return str.slice(0, position);

              case "'":
                return str.slice(tailPos);

              case '<':
                capture = namedCaptures[ch.slice(1, -1)];
                break;

              default:
                // \d\d?
                var n = +ch;
                if (n === 0) return match;

                if (n > m) {
                  var f = floor(n / 10);
                  if (f === 0) return match;
                  if (f <= m) return captures[f - 1] === undefined$1 ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                  return match;
                }

                capture = captures[n - 1];}


            return capture === undefined$1 ? '' : capture;
          });
        }
      });
      /***/
    },
    /* 282 */

    /***/
    function (module, exports, __webpack_require__) {
      var fixRegExpWellKnownSymbolLogic = __webpack_require__(271);

      var anObject = __webpack_require__(20);

      var requireObjectCoercible = __webpack_require__(12);

      var sameValue = __webpack_require__(217);

      var regExpExec = __webpack_require__(273); // @@search logic


      fixRegExpWellKnownSymbolLogic('search', 1, function (SEARCH, nativeSearch, maybeCallNative) {
        return [// `String.prototype.search` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.search
        function search(regexp) {
          var O = requireObjectCoercible(this);
          var searcher = regexp == undefined$1 ? undefined$1 : regexp[SEARCH];
          return searcher !== undefined$1 ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
        }, // `RegExp.prototype[@@search]` method
        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
        function (regexp) {
          var res = maybeCallNative(nativeSearch, regexp, this);
          if (res.done) return res.value;
          var rx = anObject(regexp);
          var S = String(this);
          var previousLastIndex = rx.lastIndex;
          if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
          var result = regExpExec(rx, S);
          if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
          return result === null ? -1 : result.index;
        }];
      });
      /***/
    },
    /* 283 */

    /***/
    function (module, exports, __webpack_require__) {
      var fixRegExpWellKnownSymbolLogic = __webpack_require__(271);

      var isRegExp = __webpack_require__(255);

      var anObject = __webpack_require__(20);

      var requireObjectCoercible = __webpack_require__(12);

      var speciesConstructor = __webpack_require__(137);

      var advanceStringIndex = __webpack_require__(272);

      var toLength = __webpack_require__(36);

      var callRegExpExec = __webpack_require__(273);

      var regexpExec = __webpack_require__(258);

      var fails = __webpack_require__(6);

      var arrayPush = [].push;
      var min = Math.min;
      var MAX_UINT32 = 0xFFFFFFFF; // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError

      var SUPPORTS_Y = !fails(function () {
        return !RegExp(MAX_UINT32, 'y');
      }); // @@split logic

      fixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
        var internalSplit;

        if ('abbc'.split(/(b)*/)[1] == 'c' || 'test'.split(/(?:)/, -1).length != 4 || 'ab'.split(/(?:ab)*/).length != 2 || '.'.split(/(.?)(.?)/).length != 4 || '.'.split(/()()/).length > 1 || ''.split(/.?/).length) {
          // based on es5-shim implementation, need to rework it
          internalSplit = function (separator, limit) {
            var string = String(requireObjectCoercible(this));
            var lim = limit === undefined$1 ? MAX_UINT32 : limit >>> 0;
            if (lim === 0) return [];
            if (separator === undefined$1) return [string]; // If `separator` is not a regex, use native split

            if (!isRegExp(separator)) {
              return nativeSplit.call(string, separator, lim);
            }

            var output = [];
            var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
            var lastLastIndex = 0; // Make `global` and avoid `lastIndex` issues by working with a copy

            var separatorCopy = new RegExp(separator.source, flags + 'g');
            var match, lastIndex, lastLength;

            while (match = regexpExec.call(separatorCopy, string)) {
              lastIndex = separatorCopy.lastIndex;

              if (lastIndex > lastLastIndex) {
                output.push(string.slice(lastLastIndex, match.index));
                if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
                lastLength = match[0].length;
                lastLastIndex = lastIndex;
                if (output.length >= lim) break;
              }

              if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
            }

            if (lastLastIndex === string.length) {
              if (lastLength || !separatorCopy.test('')) output.push('');
            } else output.push(string.slice(lastLastIndex));

            return output.length > lim ? output.slice(0, lim) : output;
          }; // Chakra, V8

        } else if ('0'.split(undefined$1, 0).length) {
          internalSplit = function (separator, limit) {
            return separator === undefined$1 && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
          };
        } else internalSplit = nativeSplit;

        return [// `String.prototype.split` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.split
        function split(separator, limit) {
          var O = requireObjectCoercible(this);
          var splitter = separator == undefined$1 ? undefined$1 : separator[SPLIT];
          return splitter !== undefined$1 ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
        }, // `RegExp.prototype[@@split]` method
        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
        //
        // NOTE: This cannot be properly polyfilled in engines that don't support
        // the 'y' flag.
        function (regexp, limit) {
          var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
          if (res.done) return res.value;
          var rx = anObject(regexp);
          var S = String(this);
          var C = speciesConstructor(rx, RegExp);
          var unicodeMatching = rx.unicode;
          var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (SUPPORTS_Y ? 'y' : 'g'); // ^(? + rx + ) is needed, in combination with some S slicing, to
          // simulate the 'y' flag.

          var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
          var lim = limit === undefined$1 ? MAX_UINT32 : limit >>> 0;
          if (lim === 0) return [];
          if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
          var p = 0;
          var q = 0;
          var A = [];

          while (q < S.length) {
            splitter.lastIndex = SUPPORTS_Y ? q : 0;
            var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
            var e;

            if (z === null || (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {
              q = advanceStringIndex(S, q, unicodeMatching);
            } else {
              A.push(S.slice(p, q));
              if (A.length === lim) return A;

              for (var i = 1; i <= z.length - 1; i++) {
                A.push(z[i]);
                if (A.length === lim) return A;
              }

              q = p = e;
            }
          }

          A.push(S.slice(p));
          return A;
        }];
      }, !SUPPORTS_Y);
      /***/
    },
    /* 284 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var toLength = __webpack_require__(36);

      var validateArguments = __webpack_require__(265);

      var correctIsRegExpLogic = __webpack_require__(266);

      var STARTS_WITH = 'startsWith';
      var nativeStartsWith = ''[STARTS_WITH]; // `String.prototype.startsWith` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.startswith

      $({
        target: 'String',
        proto: true,
        forced: !correctIsRegExpLogic(STARTS_WITH) },
      {
        startsWith: function startsWith(searchString
        /* , position = 0 */)
        {
          var that = validateArguments(this, searchString, STARTS_WITH);
          var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined$1, that.length));
          var search = String(searchString);
          return nativeStartsWith ? nativeStartsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
        } });

      /***/
    },
    /* 285 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var internalStringTrim = __webpack_require__(181);

      var forcedStringTrimMethod = __webpack_require__(286);

      var FORCED = forcedStringTrimMethod('trim'); // `String.prototype.trim` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.trim

      $({
        target: 'String',
        proto: true,
        forced: FORCED },
      {
        trim: function trim() {
          return internalStringTrim(this, 3);
        } });

      /***/
    },
    /* 286 */

    /***/
    function (module, exports, __webpack_require__) {
      var fails = __webpack_require__(6);

      var whitespaces = __webpack_require__(182);

      var non = '\u200B\u0085\u180E'; // check that a method works with the correct list
      // of whitespaces and has a correct name

      module.exports = function (METHOD_NAME) {
        return fails(function () {
          return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
        });
      };
      /***/

    },
    /* 287 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var internalStringTrim = __webpack_require__(181);

      var forcedStringTrimMethod = __webpack_require__(286);

      var FORCED = forcedStringTrimMethod('trimEnd');
      var trimEnd = FORCED ? function trimEnd() {
        return internalStringTrim(this, 2);
      } : ''.trimEnd; // `String.prototype.{ trimEnd, trimRight }` methods
      // https://github.com/tc39/ecmascript-string-left-right-trim

      $({
        target: 'String',
        proto: true,
        forced: FORCED },
      {
        trimEnd: trimEnd,
        trimRight: trimEnd });

      /***/
    },
    /* 288 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var internalStringTrim = __webpack_require__(181);

      var forcedStringTrimMethod = __webpack_require__(286);

      var FORCED = forcedStringTrimMethod('trimStart');
      var trimStart = FORCED ? function trimStart() {
        return internalStringTrim(this, 1);
      } : ''.trimStart; // `String.prototype.{ trimStart, trimLeft }` methods
      // https://github.com/tc39/ecmascript-string-left-right-trim

      $({
        target: 'String',
        proto: true,
        forced: FORCED },
      {
        trimStart: trimStart,
        trimLeft: trimStart });

      /***/
    },
    /* 289 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var createHTML = __webpack_require__(290);

      var forcedStringHTMLMethod = __webpack_require__(291); // `String.prototype.anchor` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.anchor


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('anchor') },
      {
        anchor: function anchor(name) {
          return createHTML(this, 'a', 'name', name);
        } });

      /***/
    },
    /* 290 */

    /***/
    function (module, exports, __webpack_require__) {
      var requireObjectCoercible = __webpack_require__(12);

      var quot = /"/g; // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
      // https://tc39.github.io/ecma262/#sec-createhtml

      module.exports = function (string, tag, attribute, value) {
        var S = String(requireObjectCoercible(string));
        var p1 = '<' + tag;
        if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
        return p1 + '>' + S + '</' + tag + '>';
      };
      /***/

    },
    /* 291 */

    /***/
    function (module, exports, __webpack_require__) {
      var fails = __webpack_require__(6); // check the existence of a method, lowercase
      // of a tag and escaping quotes in arguments


      module.exports = function (METHOD_NAME) {
        return fails(function () {
          var test = ''[METHOD_NAME]('"');
          return test !== test.toLowerCase() || test.split('"').length > 3;
        });
      };
      /***/

    },
    /* 292 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var createHTML = __webpack_require__(290);

      var forcedStringHTMLMethod = __webpack_require__(291); // `String.prototype.big` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.big


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('big') },
      {
        big: function big() {
          return createHTML(this, 'big', '', '');
        } });

      /***/
    },
    /* 293 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var createHTML = __webpack_require__(290);

      var forcedStringHTMLMethod = __webpack_require__(291); // `String.prototype.blink` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.blink


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('blink') },
      {
        blink: function blink() {
          return createHTML(this, 'blink', '', '');
        } });

      /***/
    },
    /* 294 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var createHTML = __webpack_require__(290);

      var forcedStringHTMLMethod = __webpack_require__(291); // `String.prototype.bold` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.bold


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('bold') },
      {
        bold: function bold() {
          return createHTML(this, 'b', '', '');
        } });

      /***/
    },
    /* 295 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var createHTML = __webpack_require__(290);

      var forcedStringHTMLMethod = __webpack_require__(291); // `String.prototype.fixed` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.fixed


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('fixed') },
      {
        fixed: function fixed() {
          return createHTML(this, 'tt', '', '');
        } });

      /***/
    },
    /* 296 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var createHTML = __webpack_require__(290);

      var forcedStringHTMLMethod = __webpack_require__(291); // `String.prototype.fontcolor` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.fontcolor


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('fontcolor') },
      {
        fontcolor: function fontcolor(color) {
          return createHTML(this, 'font', 'color', color);
        } });

      /***/
    },
    /* 297 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var createHTML = __webpack_require__(290);

      var forcedStringHTMLMethod = __webpack_require__(291); // `String.prototype.fontsize` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.fontsize


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('fontsize') },
      {
        fontsize: function fontsize(size) {
          return createHTML(this, 'font', 'size', size);
        } });

      /***/
    },
    /* 298 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var createHTML = __webpack_require__(290);

      var forcedStringHTMLMethod = __webpack_require__(291); // `String.prototype.italics` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.italics


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('italics') },
      {
        italics: function italics() {
          return createHTML(this, 'i', '', '');
        } });

      /***/
    },
    /* 299 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var createHTML = __webpack_require__(290);

      var forcedStringHTMLMethod = __webpack_require__(291); // `String.prototype.link` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.link


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('link') },
      {
        link: function link(url) {
          return createHTML(this, 'a', 'href', url);
        } });

      /***/
    },
    /* 300 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var createHTML = __webpack_require__(290);

      var forcedStringHTMLMethod = __webpack_require__(291); // `String.prototype.small` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.small


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('small') },
      {
        small: function small() {
          return createHTML(this, 'small', '', '');
        } });

      /***/
    },
    /* 301 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var createHTML = __webpack_require__(290);

      var forcedStringHTMLMethod = __webpack_require__(291); // `String.prototype.strike` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.strike


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('strike') },
      {
        strike: function strike() {
          return createHTML(this, 'strike', '', '');
        } });

      /***/
    },
    /* 302 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var createHTML = __webpack_require__(290);

      var forcedStringHTMLMethod = __webpack_require__(291); // `String.prototype.sub` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.sub


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('sub') },
      {
        sub: function sub() {
          return createHTML(this, 'sub', '', '');
        } });

      /***/
    },
    /* 303 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var createHTML = __webpack_require__(290);

      var forcedStringHTMLMethod = __webpack_require__(291); // `String.prototype.sup` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.sup


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('sup') },
      {
        sup: function sup() {
          return createHTML(this, 'sup', '', '');
        } });

      /***/
    },
    /* 304 */

    /***/
    function (module, exports, __webpack_require__) {
      var typedArrayConstructor = __webpack_require__(305); // `Float32Array` constructor
      // https://tc39.github.io/ecma262/#sec-typedarray-objects


      typedArrayConstructor('Float32', 4, function (init) {
        return function Float32Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
      /***/
    },
    /* 305 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var global = __webpack_require__(3);

      var DESCRIPTORS = __webpack_require__(5);

      var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = __webpack_require__(306);

      var ArrayBufferViewCore = __webpack_require__(131);

      var ArrayBufferModule = __webpack_require__(130);

      var anInstance = __webpack_require__(133);

      var createPropertyDescriptor = __webpack_require__(8);

      var hide = __webpack_require__(18);

      var toLength = __webpack_require__(36);

      var toIndex = __webpack_require__(134);

      var toOffset = __webpack_require__(307);

      var toPrimitive = __webpack_require__(13);

      var has = __webpack_require__(15);

      var classof = __webpack_require__(98);

      var isObject = __webpack_require__(14);

      var create = __webpack_require__(52);

      var setPrototypeOf = __webpack_require__(109);

      var getOwnPropertyNames = __webpack_require__(33).f;

      var typedArrayFrom = __webpack_require__(308);

      var arrayMethods = __webpack_require__(78);

      var setSpecies = __webpack_require__(124);

      var definePropertyModule = __webpack_require__(19);

      var getOwnPropertyDescriptorModule = __webpack_require__(4);

      var InternalStateModule = __webpack_require__(26);

      var getInternalState = InternalStateModule.get;
      var setInternalState = InternalStateModule.set;
      var nativeDefineProperty = definePropertyModule.f;
      var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      var forEach = arrayMethods(0);
      var RangeError = global.RangeError;
      var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
      var DataView = ArrayBufferModule.DataView;
      var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
      var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
      var TypedArray = ArrayBufferViewCore.TypedArray;
      var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;
      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
      var isTypedArray = ArrayBufferViewCore.isTypedArray;
      var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
      var WRONG_LENGTH = 'Wrong length';

      var fromList = function fromList(C, list) {
        var index = 0;
        var length = list.length;
        var result = new (aTypedArrayConstructor(C))(length);

        while (length > index) result[index] = list[index++];

        return result;
      };

      var addGetter = function addGetter(it, key) {
        nativeDefineProperty(it, key, {
          get: function () {
            return getInternalState(this)[key];
          } });

      };

      var isArrayBuffer = function isArrayBuffer(it) {
        var klass;
        return it instanceof ArrayBuffer || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
      };

      var isTypedArrayIndex = function isTypedArrayIndex(target, key) {
        return isTypedArray(target) && typeof key != 'symbol' && key in target && String(+key) == String(key);
      };

      var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
        return isTypedArrayIndex(target, key = toPrimitive(key, true)) ? createPropertyDescriptor(2, target[key]) : nativeGetOwnPropertyDescriptor(target, key);
      };

      var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
        if (isTypedArrayIndex(target, key = toPrimitive(key, true)) && isObject(descriptor) && has(descriptor, 'value') && !has(descriptor, 'get') && !has(descriptor, 'set') // TODO: add validation descriptor w/o calling accessors
        && !descriptor.configurable && (!has(descriptor, 'writable') || descriptor.writable) && (!has(descriptor, 'enumerable') || descriptor.enumerable)) {
          target[key] = descriptor.value;
          return target;
        }

        return nativeDefineProperty(target, key, descriptor);
      };

      if (DESCRIPTORS) {
        if (!NATIVE_ARRAY_BUFFER_VIEWS) {
          getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
          definePropertyModule.f = wrappedDefineProperty;
          addGetter(TypedArrayPrototype, 'buffer');
          addGetter(TypedArrayPrototype, 'byteOffset');
          addGetter(TypedArrayPrototype, 'byteLength');
          addGetter(TypedArrayPrototype, 'length');
        }

        $({
          target: 'Object',
          stat: true,
          forced: !NATIVE_ARRAY_BUFFER_VIEWS },
        {
          getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
          defineProperty: wrappedDefineProperty });
        // eslint-disable-next-line max-statements

        module.exports = function (TYPE, BYTES, wrapper, CLAMPED) {
          var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
          var GETTER = 'get' + TYPE;
          var SETTER = 'set' + TYPE;
          var NativeTypedArrayConstructor = global[CONSTRUCTOR_NAME];
          var TypedArrayConstructor = NativeTypedArrayConstructor;
          var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
          var exported = {};

          var getter = function getter(that, index) {
            var data = getInternalState(that);
            return data.view[GETTER](index * BYTES + data.byteOffset, true);
          };

          var setter = function setter(that, index, value) {
            var data = getInternalState(that);
            if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
            data.view[SETTER](index * BYTES + data.byteOffset, value, true);
          };

          var addElement = function addElement(that, index) {
            nativeDefineProperty(that, index, {
              get: function () {
                return getter(this, index);
              },
              set: function (value) {
                return setter(this, index, value);
              },
              enumerable: true });

          };

          if (!NATIVE_ARRAY_BUFFER_VIEWS) {
            TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
              anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
              var index = 0;
              var byteOffset = 0;
              var buffer, byteLength, length;

              if (!isObject(data)) {
                length = toIndex(data);
                byteLength = length * BYTES;
                buffer = new ArrayBuffer(byteLength);
              } else if (isArrayBuffer(data)) {
                buffer = data;
                byteOffset = toOffset(offset, BYTES);
                var $len = data.byteLength;

                if ($length === undefined$1) {
                  if ($len % BYTES) throw RangeError(WRONG_LENGTH);
                  byteLength = $len - byteOffset;
                  if (byteLength < 0) throw RangeError(WRONG_LENGTH);
                } else {
                  byteLength = toLength($length) * BYTES;
                  if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
                }

                length = byteLength / BYTES;
              } else if (isTypedArray(data)) {
                return fromList(TypedArrayConstructor, data);
              } else {
                return typedArrayFrom.call(TypedArrayConstructor, data);
              }

              setInternalState(that, {
                buffer: buffer,
                byteOffset: byteOffset,
                byteLength: byteLength,
                length: length,
                view: new DataView(buffer) });


              while (index < length) addElement(that, index++);
            });
            if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
            TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);
          } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
            TypedArrayConstructor = wrapper(function (that, data, typedArrayOffset, $length) {
              anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
              if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
              if (isArrayBuffer(data)) return $length !== undefined$1 ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length) : typedArrayOffset !== undefined$1 ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES)) : new NativeTypedArrayConstructor(data);
              if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
              return typedArrayFrom.call(TypedArrayConstructor, data);
            });
            if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
            forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
              if (!(key in TypedArrayConstructor)) hide(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
            });
            TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
          }

          if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
            hide(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
          }

          if (TYPED_ARRAY_TAG) hide(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
          exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;
          $({
            global: true,
            forced: TypedArrayConstructor != NativeTypedArrayConstructor,
            sham: !NATIVE_ARRAY_BUFFER_VIEWS },
          exported);

          if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
            hide(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
          }

          if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
            hide(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
          }

          setSpecies(CONSTRUCTOR_NAME);
        };
      } else module.exports = function () {
        /* empty */
      };
      /***/

    },
    /* 306 */

    /***/
    function (module, exports, __webpack_require__) {
      /* eslint-disable no-new */
      var global = __webpack_require__(3);

      var fails = __webpack_require__(6);

      var checkCorrectnessOfIteration = __webpack_require__(99);

      var NATIVE_ARRAY_BUFFER_VIEWS = __webpack_require__(131).NATIVE_ARRAY_BUFFER_VIEWS;

      var ArrayBuffer = global.ArrayBuffer;
      var Int8Array = global.Int8Array;
      module.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function () {
        Int8Array(1);
      }) || !fails(function () {
        new Int8Array(-1);
      }) || !checkCorrectnessOfIteration(function (iterable) {
        new Int8Array();
        new Int8Array(null);
        new Int8Array(1.5);
        new Int8Array(iterable);
      }, true) || fails(function () {
        // Safari 11 bug
        return new Int8Array(new ArrayBuffer(2), 1, undefined$1).length !== 1;
      });
      /***/
    },
    /* 307 */

    /***/
    function (module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(37);

      module.exports = function (it, BYTES) {
        var offset = toInteger(it);
        if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset');
        return offset;
      };
      /***/

    },
    /* 308 */

    /***/
    function (module, exports, __webpack_require__) {
      var toObject = __webpack_require__(51);

      var toLength = __webpack_require__(36);

      var getIteratorMethod = __webpack_require__(97);

      var isArrayIteratorMethod = __webpack_require__(95);

      var bind = __webpack_require__(79);

      var aTypedArrayConstructor = __webpack_require__(131).aTypedArrayConstructor;

      module.exports = function from(source
      /* , mapfn, thisArg */)
      {
        var O = toObject(source);
        var argumentsLength = arguments.length;
        var mapfn = argumentsLength > 1 ? arguments[1] : undefined$1;
        var mapping = mapfn !== undefined$1;
        var iteratorMethod = getIteratorMethod(O);
        var i, length, result, step, iterator;

        if (iteratorMethod != undefined$1 && !isArrayIteratorMethod(iteratorMethod)) {
          iterator = iteratorMethod.call(O);
          O = [];

          while (!(step = iterator.next()).done) {
            O.push(step.value);
          }
        }

        if (mapping && argumentsLength > 2) {
          mapfn = bind(mapfn, arguments[2], 2);
        }

        length = toLength(O.length);
        result = new (aTypedArrayConstructor(this))(length);

        for (i = 0; length > i; i++) {
          result[i] = mapping ? mapfn(O[i], i) : O[i];
        }

        return result;
      };
      /***/

    },
    /* 309 */

    /***/
    function (module, exports, __webpack_require__) {
      var typedArrayConstructor = __webpack_require__(305); // `Float64Array` constructor
      // https://tc39.github.io/ecma262/#sec-typedarray-objects


      typedArrayConstructor('Float64', 8, function (init) {
        return function Float64Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
      /***/
    },
    /* 310 */

    /***/
    function (module, exports, __webpack_require__) {
      var typedArrayConstructor = __webpack_require__(305); // `Int8Array` constructor
      // https://tc39.github.io/ecma262/#sec-typedarray-objects


      typedArrayConstructor('Int8', 1, function (init) {
        return function Int8Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
      /***/
    },
    /* 311 */

    /***/
    function (module, exports, __webpack_require__) {
      var typedArrayConstructor = __webpack_require__(305); // `Int16Array` constructor
      // https://tc39.github.io/ecma262/#sec-typedarray-objects


      typedArrayConstructor('Int16', 2, function (init) {
        return function Int16Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
      /***/
    },
    /* 312 */

    /***/
    function (module, exports, __webpack_require__) {
      var typedArrayConstructor = __webpack_require__(305); // `Int32Array` constructor
      // https://tc39.github.io/ecma262/#sec-typedarray-objects


      typedArrayConstructor('Int32', 4, function (init) {
        return function Int32Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
      /***/
    },
    /* 313 */

    /***/
    function (module, exports, __webpack_require__) {
      var typedArrayConstructor = __webpack_require__(305); // `Uint8Array` constructor
      // https://tc39.github.io/ecma262/#sec-typedarray-objects


      typedArrayConstructor('Uint8', 1, function (init) {
        return function Uint8Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
      /***/
    },
    /* 314 */

    /***/
    function (module, exports, __webpack_require__) {
      var typedArrayConstructor = __webpack_require__(305); // `Uint8ClampedArray` constructor
      // https://tc39.github.io/ecma262/#sec-typedarray-objects


      typedArrayConstructor('Uint8', 1, function (init) {
        return function Uint8ClampedArray(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      }, true);
      /***/
    },
    /* 315 */

    /***/
    function (module, exports, __webpack_require__) {
      var typedArrayConstructor = __webpack_require__(305); // `Uint16Array` constructor
      // https://tc39.github.io/ecma262/#sec-typedarray-objects


      typedArrayConstructor('Uint16', 2, function (init) {
        return function Uint16Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
      /***/
    },
    /* 316 */

    /***/
    function (module, exports, __webpack_require__) {
      var typedArrayConstructor = __webpack_require__(305); // `Uint32Array` constructor
      // https://tc39.github.io/ecma262/#sec-typedarray-objects


      typedArrayConstructor('Uint32', 4, function (init) {
        return function Uint32Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
      /***/
    },
    /* 317 */

    /***/
    function (module, exports, __webpack_require__) {
      var arrayCopyWithin = __webpack_require__(75);

      var ArrayBufferViewCore = __webpack_require__(131);

      var aTypedArray = ArrayBufferViewCore.aTypedArray; // `%TypedArray%.prototype.copyWithin` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.copywithin

      ArrayBufferViewCore.exportProto('copyWithin', function copyWithin(target, start
      /* , end */)
      {
        return arrayCopyWithin.call(aTypedArray(this), target, start, arguments.length > 2 ? arguments[2] : undefined$1);
      });
      /***/
    },
    /* 318 */

    /***/
    function (module, exports, __webpack_require__) {
      var arrayMethods = __webpack_require__(78);

      var ArrayBufferViewCore = __webpack_require__(131);

      var arrayEvery = arrayMethods(4);
      var aTypedArray = ArrayBufferViewCore.aTypedArray; // `%TypedArray%.prototype.every` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.every

      ArrayBufferViewCore.exportProto('every', function every(callbackfn
      /* , thisArg */)
      {
        return arrayEvery(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined$1);
      });
      /***/
    },
    /* 319 */

    /***/
    function (module, exports, __webpack_require__) {
      var ArrayBufferViewCore = __webpack_require__(131);

      var arrayFill = __webpack_require__(83);

      var aTypedArray = ArrayBufferViewCore.aTypedArray; // `%TypedArray%.prototype.fill` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.fill
      // eslint-disable-next-line no-unused-vars

      ArrayBufferViewCore.exportProto('fill', function fill(value
      /* , start, end */)
      {
        return arrayFill.apply(aTypedArray(this), arguments);
      });
      /***/
    },
    /* 320 */

    /***/
    function (module, exports, __webpack_require__) {
      var speciesConstructor = __webpack_require__(137);

      var ArrayBufferViewCore = __webpack_require__(131);

      var arrayMethods = __webpack_require__(78);

      var arrayFilter = arrayMethods(2);
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor; // `%TypedArray%.prototype.filter` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.filter

      ArrayBufferViewCore.exportProto('filter', function filter(callbackfn
      /* , thisArg */)
      {
        var list = arrayFilter(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined$1);
        var C = speciesConstructor(this, this.constructor);
        var index = 0;
        var length = list.length;
        var result = new (aTypedArrayConstructor(C))(length);

        while (length > index) result[index] = list[index++];

        return result;
      });
      /***/
    },
    /* 321 */

    /***/
    function (module, exports, __webpack_require__) {
      var ArrayBufferViewCore = __webpack_require__(131);

      var arrayMethods = __webpack_require__(78);

      var arrayFind = arrayMethods(5);
      var aTypedArray = ArrayBufferViewCore.aTypedArray; // `%TypedArray%.prototype.find` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.find

      ArrayBufferViewCore.exportProto('find', function find(predicate
      /* , thisArg */)
      {
        return arrayFind(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined$1);
      });
      /***/
    },
    /* 322 */

    /***/
    function (module, exports, __webpack_require__) {
      var ArrayBufferViewCore = __webpack_require__(131);

      var arrayMethods = __webpack_require__(78);

      var arrayFindIndex = arrayMethods(6);
      var aTypedArray = ArrayBufferViewCore.aTypedArray; // `%TypedArray%.prototype.findIndex` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.findindex

      ArrayBufferViewCore.exportProto('findIndex', function findIndex(predicate
      /* , thisArg */)
      {
        return arrayFindIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined$1);
      });
      /***/
    },
    /* 323 */

    /***/
    function (module, exports, __webpack_require__) {
      var ArrayBufferViewCore = __webpack_require__(131);

      var arrayMethods = __webpack_require__(78);

      var arrayForEach = arrayMethods(0);
      var aTypedArray = ArrayBufferViewCore.aTypedArray; // `%TypedArray%.prototype.forEach` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.foreach

      ArrayBufferViewCore.exportProto('forEach', function forEach(callbackfn
      /* , thisArg */)
      {
        arrayForEach(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined$1);
      });
      /***/
    },
    /* 324 */

    /***/
    function (module, exports, __webpack_require__) {
      var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = __webpack_require__(306);

      var ArrayBufferViewCore = __webpack_require__(131);

      var typedArrayFrom = __webpack_require__(308); // `%TypedArray%.from` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.from


      ArrayBufferViewCore.exportStatic('from', typedArrayFrom, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);
      /***/
    },
    /* 325 */

    /***/
    function (module, exports, __webpack_require__) {
      var createIncludes = __webpack_require__(35);

      var ArrayBufferViewCore = __webpack_require__(131);

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var arrayIncludes = createIncludes(true); // `%TypedArray%.prototype.includes` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.includes

      ArrayBufferViewCore.exportProto('includes', function includes(searchElement
      /* , fromIndex */)
      {
        return arrayIncludes(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined$1);
      });
      /***/
    },
    /* 326 */

    /***/
    function (module, exports, __webpack_require__) {
      var createIncludes = __webpack_require__(35);

      var ArrayBufferViewCore = __webpack_require__(131);

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var arrayIndexOf = createIncludes(false); // `%TypedArray%.prototype.indexOf` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.indexof

      ArrayBufferViewCore.exportProto('indexOf', function indexOf(searchElement
      /* , fromIndex */)
      {
        return arrayIndexOf(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined$1);
      });
      /***/
    },
    /* 327 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var ArrayIterators = __webpack_require__(103);

      var ArrayBufferViewCore = __webpack_require__(131);

      var wellKnownSymbol = __webpack_require__(44);

      var ITERATOR = wellKnownSymbol('iterator');
      var Uint8Array = global.Uint8Array;
      var arrayValues = ArrayIterators.values;
      var arrayKeys = ArrayIterators.keys;
      var arrayEntries = ArrayIterators.entries;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportProto = ArrayBufferViewCore.exportProto;
      var nativeTypedArrayIterator = Uint8Array && Uint8Array.prototype[ITERATOR];
      var CORRECT_ITER_NAME = !!nativeTypedArrayIterator && (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined$1);

      var typedArrayValues = function values() {
        return arrayValues.call(aTypedArray(this));
      }; // `%TypedArray%.prototype.entries` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.entries


      exportProto('entries', function entries() {
        return arrayEntries.call(aTypedArray(this));
      }); // `%TypedArray%.prototype.keys` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.keys

      exportProto('keys', function keys() {
        return arrayKeys.call(aTypedArray(this));
      }); // `%TypedArray%.prototype.values` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.values

      exportProto('values', typedArrayValues, !CORRECT_ITER_NAME); // `%TypedArray%.prototype[@@iterator]` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype-@@iterator

      exportProto(ITERATOR, typedArrayValues, !CORRECT_ITER_NAME);
      /***/
    },
    /* 328 */

    /***/
    function (module, exports, __webpack_require__) {
      var ArrayBufferViewCore = __webpack_require__(131);

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var arrayJoin = [].join; // `%TypedArray%.prototype.join` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.join
      // eslint-disable-next-line no-unused-vars

      ArrayBufferViewCore.exportProto('join', function join(separator) {
        return arrayJoin.apply(aTypedArray(this), arguments);
      });
      /***/
    },
    /* 329 */

    /***/
    function (module, exports, __webpack_require__) {
      var arrayLastIndexOf = __webpack_require__(113);

      var ArrayBufferViewCore = __webpack_require__(131);

      var aTypedArray = ArrayBufferViewCore.aTypedArray; // `%TypedArray%.prototype.lastIndexOf` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.lastindexof
      // eslint-disable-next-line no-unused-vars

      ArrayBufferViewCore.exportProto('lastIndexOf', function lastIndexOf(searchElement
      /* , fromIndex */)
      {
        return arrayLastIndexOf.apply(aTypedArray(this), arguments);
      });
      /***/
    },
    /* 330 */

    /***/
    function (module, exports, __webpack_require__) {
      var speciesConstructor = __webpack_require__(137);

      var ArrayBufferViewCore = __webpack_require__(131);

      var arrayMethods = __webpack_require__(78);

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
      var internalTypedArrayMap = arrayMethods(1, function (O, length) {
        return new (aTypedArrayConstructor(speciesConstructor(O, O.constructor)))(length);
      }); // `%TypedArray%.prototype.map` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.map

      ArrayBufferViewCore.exportProto('map', function map(mapfn
      /* , thisArg */)
      {
        return internalTypedArrayMap(aTypedArray(this), mapfn, arguments.length > 1 ? arguments[1] : undefined$1);
      });
      /***/
    },
    /* 331 */

    /***/
    function (module, exports, __webpack_require__) {
      var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = __webpack_require__(306);

      var ArrayBufferViewCore = __webpack_require__(131);

      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor; // `%TypedArray%.of` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.of

      ArrayBufferViewCore.exportStatic('of', function of()
      /* ...items */
      {
        var index = 0;
        var length = arguments.length;
        var result = new (aTypedArrayConstructor(this))(length);

        while (length > index) result[index] = arguments[index++];

        return result;
      }, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);
      /***/
    },
    /* 332 */

    /***/
    function (module, exports, __webpack_require__) {
      var ArrayBufferViewCore = __webpack_require__(131);

      var internalReduce = __webpack_require__(117);

      var aTypedArray = ArrayBufferViewCore.aTypedArray; // `%TypedArray%.prototype.reduce` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduce

      ArrayBufferViewCore.exportProto('reduce', function reduce(callbackfn
      /* , initialValue */)
      {
        return internalReduce(aTypedArray(this), callbackfn, arguments.length, arguments[1], false);
      });
      /***/
    },
    /* 333 */

    /***/
    function (module, exports, __webpack_require__) {
      var ArrayBufferViewCore = __webpack_require__(131);

      var internalReduce = __webpack_require__(117);

      var aTypedArray = ArrayBufferViewCore.aTypedArray; // `%TypedArray%.prototype.reduceRicht` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduceright

      ArrayBufferViewCore.exportProto('reduceRight', function reduceRight(callbackfn
      /* , initialValue */)
      {
        return internalReduce(aTypedArray(this), callbackfn, arguments.length, arguments[1], true);
      });
      /***/
    },
    /* 334 */

    /***/
    function (module, exports, __webpack_require__) {
      var ArrayBufferViewCore = __webpack_require__(131);

      var aTypedArray = ArrayBufferViewCore.aTypedArray; // `%TypedArray%.prototype.reverse` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse

      ArrayBufferViewCore.exportProto('reverse', function reverse() {
        var that = this;
        var length = aTypedArray(that).length;
        var middle = Math.floor(length / 2);
        var index = 0;
        var value;

        while (index < middle) {
          value = that[index];
          that[index++] = that[--length];
          that[length] = value;
        }

        return that;
      });
      /***/
    },
    /* 335 */

    /***/
    function (module, exports, __webpack_require__) {
      var toLength = __webpack_require__(36);

      var toOffset = __webpack_require__(307);

      var toObject = __webpack_require__(51);

      var ArrayBufferViewCore = __webpack_require__(131);

      var fails = __webpack_require__(6);

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var FORCED = fails(function () {
        // eslint-disable-next-line no-undef
        new Int8Array(1).set({});
      }); // `%TypedArray%.prototype.set` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set

      ArrayBufferViewCore.exportProto('set', function set(arrayLike
      /* , offset */)
      {
        aTypedArray(this);
        var offset = toOffset(arguments[1], 1);
        var length = this.length;
        var src = toObject(arrayLike);
        var len = toLength(src.length);
        var index = 0;
        if (len + offset > length) throw RangeError('Wrong length');

        while (index < len) this[offset + index] = src[index++];
      }, FORCED);
      /***/
    },
    /* 336 */

    /***/
    function (module, exports, __webpack_require__) {
      var speciesConstructor = __webpack_require__(137);

      var ArrayBufferViewCore = __webpack_require__(131);

      var fails = __webpack_require__(6);

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
      var arraySlice = [].slice;
      var FORCED = fails(function () {
        // eslint-disable-next-line no-undef
        new Int8Array(1).slice();
      }); // `%TypedArray%.prototype.slice` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice

      ArrayBufferViewCore.exportProto('slice', function slice(start, end) {
        var list = arraySlice.call(aTypedArray(this), start, end);
        var C = speciesConstructor(this, this.constructor);
        var index = 0;
        var length = list.length;
        var result = new (aTypedArrayConstructor(C))(length);

        while (length > index) result[index] = list[index++];

        return result;
      }, FORCED);
      /***/
    },
    /* 337 */

    /***/
    function (module, exports, __webpack_require__) {
      var ArrayBufferViewCore = __webpack_require__(131);

      var arrayMethods = __webpack_require__(78);

      var arraySome = arrayMethods(3);
      var aTypedArray = ArrayBufferViewCore.aTypedArray; // `%TypedArray%.prototype.some` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.some

      ArrayBufferViewCore.exportProto('some', function some(callbackfn
      /* , thisArg */)
      {
        return arraySome(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined$1);
      });
      /***/
    },
    /* 338 */

    /***/
    function (module, exports, __webpack_require__) {
      var ArrayBufferViewCore = __webpack_require__(131);

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var arraySort = [].sort; // `%TypedArray%.prototype.sort` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort

      ArrayBufferViewCore.exportProto('sort', function sort(comparefn) {
        return arraySort.call(aTypedArray(this), comparefn);
      });
      /***/
    },
    /* 339 */

    /***/
    function (module, exports, __webpack_require__) {
      var toLength = __webpack_require__(36);

      var toAbsoluteIndex = __webpack_require__(38);

      var speciesConstructor = __webpack_require__(137);

      var ArrayBufferViewCore = __webpack_require__(131);

      var aTypedArray = ArrayBufferViewCore.aTypedArray; // `%TypedArray%.prototype.subarray` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.subarray

      ArrayBufferViewCore.exportProto('subarray', function subarray(begin, end) {
        var O = aTypedArray(this);
        var length = O.length;
        var beginIndex = toAbsoluteIndex(begin, length);
        return new (speciesConstructor(O, O.constructor))(O.buffer, O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT, toLength((end === undefined$1 ? length : toAbsoluteIndex(end, length)) - beginIndex));
      });
      /***/
    },
    /* 340 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var fails = __webpack_require__(6);

      var ArrayBufferViewCore = __webpack_require__(131);

      var Int8Array = global.Int8Array;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var arrayToLocaleString = [].toLocaleString;
      var arraySlice = [].slice; // iOS Safari 6.x fails here

      var TO_LOCALE_BUG = !!Int8Array && fails(function () {
        arrayToLocaleString.call(new Int8Array(1));
      });
      var FORCED = fails(function () {
        return [1, 2].toLocaleString() != new Int8Array([1, 2]).toLocaleString();
      }) || !fails(function () {
        Int8Array.prototype.toLocaleString.call([1, 2]);
      }); // `%TypedArray%.prototype.toLocaleString` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring

      ArrayBufferViewCore.exportProto('toLocaleString', function toLocaleString() {
        return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(aTypedArray(this)) : aTypedArray(this), arguments);
      }, FORCED);
      /***/
    },
    /* 341 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var ArrayBufferViewCore = __webpack_require__(131);

      var fails = __webpack_require__(6);

      var Uint8Array = global.Uint8Array;
      var Uint8ArrayPrototype = Uint8Array && Uint8Array.prototype;
      var arrayToString = [].toString;
      var arrayJoin = [].join;

      if (fails(function () {
        arrayToString.call({});
      })) {
        arrayToString = function toString() {
          return arrayJoin.call(this);
        };
      } // `%TypedArray%.prototype.toString` method
      // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tostring


      ArrayBufferViewCore.exportProto('toString', arrayToString, (Uint8ArrayPrototype || {}).toString != arrayToString);
      /***/
    },
    /* 342 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var redefineAll = __webpack_require__(132);

      var InternalMetadataModule = __webpack_require__(153);

      var collection = __webpack_require__(152);

      var collectionWeak = __webpack_require__(343);

      var isObject = __webpack_require__(14);

      var enforceIternalState = __webpack_require__(26).enforce;

      var NATIVE_WEAK_MAP = __webpack_require__(27);

      var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
      var isExtensible = Object.isExtensible;
      var InternalWeakMap;

      var wrapper = function wrapper(get) {
        return function WeakMap() {
          return get(this, arguments.length > 0 ? arguments[0] : undefined$1);
        };
      }; // `WeakMap` constructor
      // https://tc39.github.io/ecma262/#sec-weakmap-constructor


      var $WeakMap = module.exports = collection('WeakMap', wrapper, collectionWeak, true, true); // IE11 WeakMap frozen keys fix
      // We can't use feature detection because it crash some old IE builds
      // https://github.com/zloirock/core-js/issues/485

      if (NATIVE_WEAK_MAP && IS_IE11) {
        InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);
        InternalMetadataModule.REQUIRED = true;
        var WeakMapPrototype = $WeakMap.prototype;
        var nativeDelete = WeakMapPrototype['delete'];
        var nativeHas = WeakMapPrototype.has;
        var nativeGet = WeakMapPrototype.get;
        var nativeSet = WeakMapPrototype.set;
        redefineAll(WeakMapPrototype, {
          'delete': function (key) {
            if (isObject(key) && !isExtensible(key)) {
              var state = enforceIternalState(this);
              if (!state.frozen) state.frozen = new InternalWeakMap();
              return nativeDelete.call(this, key) || state.frozen['delete'](key);
            }

            return nativeDelete.call(this, key);
          },
          has: function has(key) {
            if (isObject(key) && !isExtensible(key)) {
              var state = enforceIternalState(this);
              if (!state.frozen) state.frozen = new InternalWeakMap();
              return nativeHas.call(this, key) || state.frozen.has(key);
            }

            return nativeHas.call(this, key);
          },
          get: function get(key) {
            if (isObject(key) && !isExtensible(key)) {
              var state = enforceIternalState(this);
              if (!state.frozen) state.frozen = new InternalWeakMap();
              return nativeHas.call(this, key) ? nativeGet.call(this, key) : state.frozen.get(key);
            }

            return nativeGet.call(this, key);
          },
          set: function set(key, value) {
            if (isObject(key) && !isExtensible(key)) {
              var state = enforceIternalState(this);
              if (!state.frozen) state.frozen = new InternalWeakMap();
              nativeHas.call(this, key) ? nativeSet.call(this, key, value) : state.frozen.set(key, value);
            } else nativeSet.call(this, key, value);

            return this;
          } });

      }
      /***/

    },
    /* 343 */

    /***/
    function (module, exports, __webpack_require__) {
      var redefineAll = __webpack_require__(132);

      var getWeakData = __webpack_require__(153).getWeakData;

      var anObject = __webpack_require__(20);

      var isObject = __webpack_require__(14);

      var anInstance = __webpack_require__(133);

      var iterate = __webpack_require__(155);

      var createArrayMethod = __webpack_require__(78);

      var $has = __webpack_require__(15);

      var InternalStateModule = __webpack_require__(26);

      var setInternalState = InternalStateModule.set;
      var internalStateGetterFor = InternalStateModule.getterFor;
      var arrayFind = createArrayMethod(5);
      var arrayFindIndex = createArrayMethod(6);
      var id = 0; // fallback for uncaught frozen keys

      var uncaughtFrozenStore = function uncaughtFrozenStore(store) {
        return store.frozen || (store.frozen = new UncaughtFrozenStore());
      };

      var UncaughtFrozenStore = function UncaughtFrozenStore() {
        this.entries = [];
      };

      var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
        return arrayFind(store.entries, function (it) {
          return it[0] === key;
        });
      };

      UncaughtFrozenStore.prototype = {
        get: function (key) {
          var entry = findUncaughtFrozen(this, key);
          if (entry) return entry[1];
        },
        has: function (key) {
          return !!findUncaughtFrozen(this, key);
        },
        set: function (key, value) {
          var entry = findUncaughtFrozen(this, key);
          if (entry) entry[1] = value;else this.entries.push([key, value]);
        },
        'delete': function (key) {
          var index = arrayFindIndex(this.entries, function (it) {
            return it[0] === key;
          });
          if (~index) this.entries.splice(index, 1);
          return !!~index;
        } };

      module.exports = {
        getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
          var C = wrapper(function (that, iterable) {
            anInstance(that, C, CONSTRUCTOR_NAME);
            setInternalState(that, {
              type: CONSTRUCTOR_NAME,
              id: id++,
              frozen: undefined$1 });

            if (iterable != undefined$1) iterate(iterable, that[ADDER], that, IS_MAP);
          });
          var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

          var define = function define(that, key, value) {
            var state = getInternalState(that);
            var data = getWeakData(anObject(key), true);
            if (data === true) uncaughtFrozenStore(state).set(key, value);else data[state.id] = value;
            return that;
          };

          redefineAll(C.prototype, {
            // 23.3.3.2 WeakMap.prototype.delete(key)
            // 23.4.3.3 WeakSet.prototype.delete(value)
            'delete': function (key) {
              var state = getInternalState(this);
              if (!isObject(key)) return false;
              var data = getWeakData(key);
              if (data === true) return uncaughtFrozenStore(state)['delete'](key);
              return data && $has(data, state.id) && delete data[state.id];
            },
            // 23.3.3.4 WeakMap.prototype.has(key)
            // 23.4.3.4 WeakSet.prototype.has(value)
            has: function has(key) {
              var state = getInternalState(this);
              if (!isObject(key)) return false;
              var data = getWeakData(key);
              if (data === true) return uncaughtFrozenStore(state).has(key);
              return data && $has(data, state.id);
            } });

          redefineAll(C.prototype, IS_MAP ? {
            // 23.3.3.3 WeakMap.prototype.get(key)
            get: function get(key) {
              var state = getInternalState(this);

              if (isObject(key)) {
                var data = getWeakData(key);
                if (data === true) return uncaughtFrozenStore(state).get(key);
                return data ? data[state.id] : undefined$1;
              }
            },
            // 23.3.3.5 WeakMap.prototype.set(key, value)
            set: function set(key, value) {
              return define(this, key, value);
            } } :
          {
            // 23.4.3.1 WeakSet.prototype.add(value)
            add: function add(value) {
              return define(this, value, true);
            } });

          return C;
        } };

      /***/
    },
    /* 344 */

    /***/
    function (module, exports, __webpack_require__) {
      var collection = __webpack_require__(152);

      var collectionWeak = __webpack_require__(343); // `WeakSet` constructor
      // https://tc39.github.io/ecma262/#sec-weakset-constructor


      collection('WeakSet', function (get) {
        return function WeakSet() {
          return get(this, arguments.length > 0 ? arguments[0] : undefined$1);
        };
      }, collectionWeak, false, true);
      /***/
    },
    /* 345 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var DOMIterables = __webpack_require__(346);

      var forEach = __webpack_require__(91);

      var hide = __webpack_require__(18);

      for (var COLLECTION_NAME in DOMIterables) {
        var Collection = global[COLLECTION_NAME];
        var CollectionPrototype = Collection && Collection.prototype; // some Chrome versions have non-configurable methods on DOMTokenList

        if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
          hide(CollectionPrototype, 'forEach', forEach);
        } catch (error) {
          CollectionPrototype.forEach = forEach;
        }
      }
      /***/

    },
    /* 346 */

    /***/
    function (module, exports) {
      // iterable DOM collections
      // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
      module.exports = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0 };

      /***/
    },
    /* 347 */

    /***/
    function (module, exports, __webpack_require__) {
      var global = __webpack_require__(3);

      var DOMIterables = __webpack_require__(346);

      var ArrayIteratorMethods = __webpack_require__(103);

      var hide = __webpack_require__(18);

      var wellKnownSymbol = __webpack_require__(44);

      var ITERATOR = wellKnownSymbol('iterator');
      var TO_STRING_TAG = wellKnownSymbol('toStringTag');
      var ArrayValues = ArrayIteratorMethods.values;

      for (var COLLECTION_NAME in DOMIterables) {
        var Collection = global[COLLECTION_NAME];
        var CollectionPrototype = Collection && Collection.prototype;

        if (CollectionPrototype) {
          // some Chrome versions have non-configurable methods on DOMTokenList
          if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
            hide(CollectionPrototype, ITERATOR, ArrayValues);
          } catch (error) {
            CollectionPrototype[ITERATOR] = ArrayValues;
          }
          if (!CollectionPrototype[TO_STRING_TAG]) hide(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
          if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
            // some Chrome versions have non-configurable methods on DOMTokenList
            if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
              hide(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
            } catch (error) {
              CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
            }
          }
        }
      }
      /***/

    },
    /* 348 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2);

      var global = __webpack_require__(3);

      var microtask = __webpack_require__(234);

      var classof = __webpack_require__(11);

      var process = global.process;
      var isNode = classof(process) == 'process'; // `queueMicrotask` method
      // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-queuemicrotask

      $({
        global: true,
        enumerable: true,
        noTargetGet: true },
      {
        queueMicrotask: function queueMicrotask(fn) {
          var domain = isNode && process.domain;
          microtask(domain ? domain.bind(fn) : fn);
        } });

      /***/
    },
    /* 349 */

    /***/
    function (module, exports, __webpack_require__) {
      // ie9- setTimeout & setInterval additional parameters fix
      var $ = __webpack_require__(2);

      var global = __webpack_require__(3);

      var userAgent = __webpack_require__(235);

      var slice = [].slice;
      var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check

      var wrap = function wrap(set) {
        return function (fn, time
        /* , ...args */)
        {
          var boundArgs = arguments.length > 2;
          var args = boundArgs ? slice.call(arguments, 2) : false;
          return set(boundArgs ? function () {
            // eslint-disable-next-line no-new-func
            (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
          } : fn, time);
        };
      };

      $({
        global: true,
        bind: true,
        forced: MSIE },
      {
        setTimeout: wrap(global.setTimeout),
        setInterval: wrap(global.setInterval) });

      /***/
    },
    /* 350 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(269);

      var $ = __webpack_require__(2);

      var DESCRIPTORS = __webpack_require__(5);

      var USE_NATIVE_URL = __webpack_require__(351);

      var global = __webpack_require__(3);

      var defineProperties = __webpack_require__(53);

      var redefine = __webpack_require__(21);

      var anInstance = __webpack_require__(133);

      var has = __webpack_require__(15);

      var assign = __webpack_require__(201);

      var arrayFrom = __webpack_require__(93);

      var codePointAt = __webpack_require__(263);

      var toASCII = __webpack_require__(352);

      var setToStringTag = __webpack_require__(43);

      var URLSearchParamsModule = __webpack_require__(353);

      var InternalStateModule = __webpack_require__(26);

      var NativeURL = global.URL;
      var URLSearchParams = URLSearchParamsModule.URLSearchParams;
      var getInternalSearchParamsState = URLSearchParamsModule.getState;
      var setInternalState = InternalStateModule.set;
      var getInternalURLState = InternalStateModule.getterFor('URL');
      var pow = Math.pow;
      var INVALID_AUTHORITY = 'Invalid authority';
      var INVALID_SCHEME = 'Invalid scheme';
      var INVALID_HOST = 'Invalid host';
      var INVALID_PORT = 'Invalid port';
      var ALPHA = /[A-Za-z]/;
      var ALPHANUMERIC = /[\d+\-.A-Za-z]/;
      var DIGIT = /\d/;
      var HEX_START = /^(0x|0X)/;
      var OCT = /^[0-7]+$/;
      var DEC = /^\d+$/;
      var HEX = /^[\dA-Fa-f]+$/; // eslint-disable-next-line no-control-regex

      var FORBIDDEN_HOST_CODE_POINT = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/; // eslint-disable-next-line no-control-regex

      var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/; // eslint-disable-next-line no-control-regex

      var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g; // eslint-disable-next-line no-control-regex

      var TAB_AND_NEW_LINE = /[\u0009\u000A\u000D]/g;
      var EOF;

      var parseHost = function parseHost(url, input) {
        var result, codePoints, i;

        if (input.charAt(0) == '[') {
          if (input.charAt(input.length - 1) != ']') return INVALID_HOST;
          result = parseIPv6(input.slice(1, -1));
          if (!result) return INVALID_HOST;
          url.host = result; // opaque host
        } else if (!isSpecial(url)) {
          if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;
          result = '';
          codePoints = arrayFrom(input);

          for (i = 0; i < codePoints.length; i++) result += percentEncode(codePoints[i], C0ControlPercentEncodeSet);

          url.host = result;
        } else {
          input = toASCII(input);
          if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
          result = parseIPv4(input);
          if (result === null) return INVALID_HOST;
          url.host = result;
        }
      };

      var parseIPv4 = function parseIPv4(input) {
        var parts = input.split('.');
        var partsLength, numbers, i, part, R, n, ipv4;

        if (parts[parts.length - 1] == '') {
          if (parts.length) parts.pop();
        }

        partsLength = parts.length;
        if (partsLength > 4) return input;
        numbers = [];

        for (i = 0; i < partsLength; i++) {
          part = parts[i];
          if (part == '') return input;
          R = 10;

          if (part.length > 1 && part.charAt(0) == '0') {
            R = HEX_START.test(part) ? 16 : 8;
            part = part.slice(R == 8 ? 1 : 2);
          }

          if (part === '') {
            n = 0;
          } else {
            if (!(R == 10 ? DEC : R == 8 ? OCT : HEX).test(part)) return input;
            n = parseInt(part, R);
          }

          numbers.push(n);
        }

        for (i = 0; i < partsLength; i++) {
          n = numbers[i];

          if (i == partsLength - 1) {
            if (n >= pow(256, 5 - partsLength)) return null;
          } else if (n > 255) return null;
        }

        ipv4 = numbers.pop();

        for (i = 0; i < numbers.length; i++) {
          ipv4 += numbers[i] * pow(256, 3 - i);
        }

        return ipv4;
      }; // eslint-disable-next-line max-statements


      var parseIPv6 = function parseIPv6(input) {
        var address = [0, 0, 0, 0, 0, 0, 0, 0];
        var pieceIndex = 0;
        var compress = null;
        var pointer = 0;
        var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

        var char = function char() {
          return input.charAt(pointer);
        };

        if (char() == ':') {
          if (input.charAt(1) != ':') return;
          pointer += 2;
          pieceIndex++;
          compress = pieceIndex;
        }

        while (char()) {
          if (pieceIndex == 8) return;

          if (char() == ':') {
            if (compress !== null) return;
            pointer++;
            pieceIndex++;
            compress = pieceIndex;
            continue;
          }

          value = length = 0;

          while (length < 4 && HEX.test(char())) {
            value = value * 16 + parseInt(char(), 16);
            pointer++;
            length++;
          }

          if (char() == '.') {
            if (length == 0) return;
            pointer -= length;
            if (pieceIndex > 6) return;
            numbersSeen = 0;

            while (char()) {
              ipv4Piece = null;

              if (numbersSeen > 0) {
                if (char() == '.' && numbersSeen < 4) pointer++;else return;
              }

              if (!DIGIT.test(char())) return;

              while (DIGIT.test(char())) {
                number = parseInt(char(), 10);
                if (ipv4Piece === null) ipv4Piece = number;else if (ipv4Piece == 0) return;else ipv4Piece = ipv4Piece * 10 + number;
                if (ipv4Piece > 255) return;
                pointer++;
              }

              address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
              numbersSeen++;
              if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
            }

            if (numbersSeen != 4) return;
            break;
          } else if (char() == ':') {
            pointer++;
            if (!char()) return;
          } else if (char()) return;

          address[pieceIndex++] = value;
        }

        if (compress !== null) {
          swaps = pieceIndex - compress;
          pieceIndex = 7;

          while (pieceIndex != 0 && swaps > 0) {
            swap = address[pieceIndex];
            address[pieceIndex--] = address[compress + swaps - 1];
            address[compress + --swaps] = swap;
          }
        } else if (pieceIndex != 8) return;

        return address;
      };

      var findLongestZeroSequence = function findLongestZeroSequence(ipv6) {
        var maxIndex = null;
        var maxLength = 1;
        var currStart = null;
        var currLength = 0;
        var i = 0;

        for (; i < 8; i++) {
          if (ipv6[i] !== 0) {
            if (currLength > maxLength) {
              maxIndex = currStart;
              maxLength = currLength;
            }

            currStart = null;
            currLength = 0;
          } else {
            if (currStart === null) currStart = i;
            ++currLength;
          }
        }

        if (currLength > maxLength) {
          maxIndex = currStart;
          maxLength = currLength;
        }

        return maxIndex;
      };

      var serializeHost = function serializeHost(host) {
        var result, i, compress, ignore0; // ipv4

        if (typeof host == 'number') {
          result = [];

          for (i = 0; i < 4; i++) {
            result.unshift(host % 256);
            host = Math.floor(host / 256);
          }

          return result.join('.'); // ipv6
        } else if (typeof host == 'object') {
          result = '';
          compress = findLongestZeroSequence(host);

          for (i = 0; i < 8; i++) {
            if (ignore0 && host[i] === 0) continue;
            if (ignore0) ignore0 = false;

            if (compress === i) {
              result += i ? ':' : '::';
              ignore0 = true;
            } else {
              result += host[i].toString(16);
              if (i < 7) result += ':';
            }
          }

          return '[' + result + ']';
        }

        return host;
      };

      var C0ControlPercentEncodeSet = {};
      var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
        ' ': 1,
        '"': 1,
        '<': 1,
        '>': 1,
        '`': 1 });

      var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
        '#': 1,
        '?': 1,
        '{': 1,
        '}': 1 });

      var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
        '/': 1,
        ':': 1,
        ';': 1,
        '=': 1,
        '@': 1,
        '[': 1,
        '\\': 1,
        ']': 1,
        '^': 1,
        '|': 1 });


      var percentEncode = function percentEncode(char, set) {
        var code = codePointAt(char, 0);
        return code > 0x20 && code < 0x7F && !has(set, char) ? char : encodeURIComponent(char);
      };

      var specialSchemes = {
        ftp: 21,
        file: null,
        gopher: 70,
        http: 80,
        https: 443,
        ws: 80,
        wss: 443 };


      var isSpecial = function isSpecial(url) {
        return has(specialSchemes, url.scheme);
      };

      var includesCredentials = function includesCredentials(url) {
        return url.username != '' || url.password != '';
      };

      var cannotHaveUsernamePasswordPort = function cannotHaveUsernamePasswordPort(url) {
        return !url.host || url.cannotBeABaseURL || url.scheme == 'file';
      };

      var isWindowsDriveLetter = function isWindowsDriveLetter(string, normalized) {
        var second;
        return string.length == 2 && ALPHA.test(string.charAt(0)) && ((second = string.charAt(1)) == ':' || !normalized && second == '|');
      };

      var startsWithWindowsDriveLetter = function startsWithWindowsDriveLetter(string) {
        var third;
        return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (string.length == 2 || (third = string.charAt(2)) === '/' || third === '\\' || third === '?' || third === '#');
      };

      var shortenURLsPath = function shortenURLsPath(url) {
        var path = url.path;
        var pathSize = path.length;

        if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
          path.pop();
        }
      };

      var isSingleDot = function isSingleDot(segment) {
        return segment === '.' || segment.toLowerCase() === '%2e';
      };

      var isDoubleDot = function isDoubleDot(segment) {
        segment = segment.toLowerCase();
        return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
      }; // States:


      var SCHEME_START = {};
      var SCHEME = {};
      var NO_SCHEME = {};
      var SPECIAL_RELATIVE_OR_AUTHORITY = {};
      var PATH_OR_AUTHORITY = {};
      var RELATIVE = {};
      var RELATIVE_SLASH = {};
      var SPECIAL_AUTHORITY_SLASHES = {};
      var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
      var AUTHORITY = {};
      var HOST = {};
      var HOSTNAME = {};
      var PORT = {};
      var FILE = {};
      var FILE_SLASH = {};
      var FILE_HOST = {};
      var PATH_START = {};
      var PATH = {};
      var CANNOT_BE_A_BASE_URL_PATH = {};
      var QUERY = {};
      var FRAGMENT = {}; // eslint-disable-next-line max-statements

      var parseURL = function parseURL(url, input, stateOverride, base) {
        var state = stateOverride || SCHEME_START;
        var pointer = 0;
        var buffer = '';
        var seenAt = false;
        var seenBracket = false;
        var seenPasswordToken = false;
        var codePoints, char, bufferCodePoints, failure;

        if (!stateOverride) {
          url.scheme = '';
          url.username = '';
          url.password = '';
          url.host = null;
          url.port = null;
          url.path = [];
          url.query = null;
          url.fragment = null;
          url.cannotBeABaseURL = false;
          input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
        }

        input = input.replace(TAB_AND_NEW_LINE, '');
        codePoints = arrayFrom(input);

        while (pointer <= codePoints.length) {
          char = codePoints[pointer];

          switch (state) {
            case SCHEME_START:
              if (char && ALPHA.test(char)) {
                buffer += char.toLowerCase();
                state = SCHEME;
              } else if (!stateOverride) {
                state = NO_SCHEME;
                continue;
              } else return INVALID_SCHEME;

              break;

            case SCHEME:
              if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {
                buffer += char.toLowerCase();
              } else if (char == ':') {
                if (stateOverride) {
                  if (isSpecial(url) != has(specialSchemes, buffer) || buffer == 'file' && (includesCredentials(url) || url.port !== null) || url.scheme == 'file' && !url.host) return;
                }

                url.scheme = buffer;

                if (stateOverride) {
                  if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;
                  return;
                }

                buffer = '';

                if (url.scheme == 'file') {
                  state = FILE;
                } else if (isSpecial(url) && base && base.scheme == url.scheme) {
                  state = SPECIAL_RELATIVE_OR_AUTHORITY;
                } else if (isSpecial(url)) {
                  state = SPECIAL_AUTHORITY_SLASHES;
                } else if (codePoints[pointer + 1] == '/') {
                  state = PATH_OR_AUTHORITY;
                  pointer++;
                } else {
                  url.cannotBeABaseURL = true;
                  url.path.push('');
                  state = CANNOT_BE_A_BASE_URL_PATH;
                }
              } else if (!stateOverride) {
                buffer = '';
                state = NO_SCHEME;
                pointer = 0;
                continue;
              } else return INVALID_SCHEME;

              break;

            case NO_SCHEME:
              if (!base || base.cannotBeABaseURL && char != '#') return INVALID_SCHEME;

              if (base.cannotBeABaseURL && char == '#') {
                url.scheme = base.scheme;
                url.path = base.path.slice();
                url.query = base.query;
                url.fragment = '';
                url.cannotBeABaseURL = true;
                state = FRAGMENT;
                break;
              }

              state = base.scheme == 'file' ? FILE : RELATIVE;
              continue;

            case SPECIAL_RELATIVE_OR_AUTHORITY:
              if (char == '/' && codePoints[pointer + 1] == '/') {
                state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                pointer++;
              } else {
                state = RELATIVE;
                continue;
              }

              break;

            case PATH_OR_AUTHORITY:
              if (char == '/') {
                state = AUTHORITY;
                break;
              } else {
                state = PATH;
                continue;
              }

            case RELATIVE:
              url.scheme = base.scheme;

              if (char == EOF) {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                url.path = base.path.slice();
                url.query = base.query;
              } else if (char == '/' || char == '\\' && isSpecial(url)) {
                state = RELATIVE_SLASH;
              } else if (char == '?') {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                url.path = base.path.slice();
                url.query = '';
                state = QUERY;
              } else if (char == '#') {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                url.path = base.path.slice();
                url.query = base.query;
                url.fragment = '';
                state = FRAGMENT;
              } else {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                url.path = base.path.slice();
                url.path.pop();
                state = PATH;
                continue;
              }

              break;

            case RELATIVE_SLASH:
              if (isSpecial(url) && (char == '/' || char == '\\')) {
                state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
              } else if (char == '/') {
                state = AUTHORITY;
              } else {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                state = PATH;
                continue;
              }

              break;

            case SPECIAL_AUTHORITY_SLASHES:
              state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
              if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;
              pointer++;
              break;

            case SPECIAL_AUTHORITY_IGNORE_SLASHES:
              if (char != '/' && char != '\\') {
                state = AUTHORITY;
                continue;
              }

              break;

            case AUTHORITY:
              if (char == '@') {
                if (seenAt) buffer = '%40' + buffer;
                seenAt = true;
                bufferCodePoints = arrayFrom(buffer);

                for (var i = 0; i < bufferCodePoints.length; i++) {
                  var codePoint = bufferCodePoints[i];

                  if (codePoint == ':' && !seenPasswordToken) {
                    seenPasswordToken = true;
                    continue;
                  }

                  var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
                  if (seenPasswordToken) url.password += encodedCodePoints;else url.username += encodedCodePoints;
                }

                buffer = '';
              } else if (char == EOF || char == '/' || char == '?' || char == '#' || char == '\\' && isSpecial(url)) {
                if (seenAt && buffer == '') return INVALID_AUTHORITY;
                pointer -= arrayFrom(buffer).length + 1;
                buffer = '';
                state = HOST;
              } else buffer += char;

              break;

            case HOST:
            case HOSTNAME:
              if (stateOverride && url.scheme == 'file') {
                state = FILE_HOST;
                continue;
              } else if (char == ':' && !seenBracket) {
                if (buffer == '') return INVALID_HOST;
                failure = parseHost(url, buffer);
                if (failure) return failure;
                buffer = '';
                state = PORT;
                if (stateOverride == HOSTNAME) return;
              } else if (char == EOF || char == '/' || char == '?' || char == '#' || char == '\\' && isSpecial(url)) {
                if (isSpecial(url) && buffer == '') return INVALID_HOST;
                if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;
                failure = parseHost(url, buffer);
                if (failure) return failure;
                buffer = '';
                state = PATH_START;
                if (stateOverride) return;
                continue;
              } else {
                if (char == '[') seenBracket = true;else if (char == ']') seenBracket = false;
                buffer += char;
              }

              break;

            case PORT:
              if (DIGIT.test(char)) {
                buffer += char;
              } else if (char == EOF || char == '/' || char == '?' || char == '#' || char == '\\' && isSpecial(url) || stateOverride) {
                if (buffer != '') {
                  var port = parseInt(buffer, 10);
                  if (port > 0xFFFF) return INVALID_PORT;
                  url.port = isSpecial(url) && port === specialSchemes[url.scheme] ? null : port;
                  buffer = '';
                }

                if (stateOverride) return;
                state = PATH_START;
                continue;
              } else return INVALID_PORT;

              break;

            case FILE:
              url.scheme = 'file';
              if (char == '/' || char == '\\') state = FILE_SLASH;else if (base && base.scheme == 'file') {
                if (char == EOF) {
                  url.host = base.host;
                  url.path = base.path.slice();
                  url.query = base.query;
                } else if (char == '?') {
                  url.host = base.host;
                  url.path = base.path.slice();
                  url.query = '';
                  state = QUERY;
                } else if (char == '#') {
                  url.host = base.host;
                  url.path = base.path.slice();
                  url.query = base.query;
                  url.fragment = '';
                  state = FRAGMENT;
                } else {
                  if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
                    url.host = base.host;
                    url.path = base.path.slice();
                    shortenURLsPath(url);
                  }

                  state = PATH;
                  continue;
                }
              } else {
                state = PATH;
                continue;
              }
              break;

            case FILE_SLASH:
              if (char == '/' || char == '\\') {
                state = FILE_HOST;
                break;
              }

              if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
                if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);else url.host = base.host;
              }

              state = PATH;
              continue;

            case FILE_HOST:
              if (char == EOF || char == '/' || char == '\\' || char == '?' || char == '#') {
                if (!stateOverride && isWindowsDriveLetter(buffer)) {
                  state = PATH;
                } else if (buffer == '') {
                  url.host = '';
                  if (stateOverride) return;
                  state = PATH_START;
                } else {
                  failure = parseHost(url, buffer);
                  if (failure) return failure;
                  if (url.host == 'localhost') url.host = '';
                  if (stateOverride) return;
                  buffer = '';
                  state = PATH_START;
                }

                continue;
              } else buffer += char;

              break;

            case PATH_START:
              if (isSpecial(url)) {
                state = PATH;
                if (char != '/' && char != '\\') continue;
              } else if (!stateOverride && char == '?') {
                url.query = '';
                state = QUERY;
              } else if (!stateOverride && char == '#') {
                url.fragment = '';
                state = FRAGMENT;
              } else if (char != EOF) {
                state = PATH;
                if (char != '/') continue;
              }

              break;

            case PATH:
              if (char == EOF || char == '/' || char == '\\' && isSpecial(url) || !stateOverride && (char == '?' || char == '#')) {
                if (isDoubleDot(buffer)) {
                  shortenURLsPath(url);

                  if (char != '/' && !(char == '\\' && isSpecial(url))) {
                    url.path.push('');
                  }
                } else if (isSingleDot(buffer)) {
                  if (char != '/' && !(char == '\\' && isSpecial(url))) {
                    url.path.push('');
                  }
                } else {
                  if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
                    if (url.host) url.host = '';
                    buffer = buffer.charAt(0) + ':'; // normalize windows drive letter
                  }

                  url.path.push(buffer);
                }

                buffer = '';

                if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {
                  while (url.path.length > 1 && url.path[0] === '') {
                    url.path.shift();
                  }
                }

                if (char == '?') {
                  url.query = '';
                  state = QUERY;
                } else if (char == '#') {
                  url.fragment = '';
                  state = FRAGMENT;
                }
              } else {
                buffer += percentEncode(char, pathPercentEncodeSet);
              }

              break;

            case CANNOT_BE_A_BASE_URL_PATH:
              if (char == '?') {
                url.query = '';
                state = QUERY;
              } else if (char == '#') {
                url.fragment = '';
                state = FRAGMENT;
              } else if (char != EOF) {
                url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
              }

              break;

            case QUERY:
              if (!stateOverride && char == '#') {
                url.fragment = '';
                state = FRAGMENT;
              } else if (char != EOF) {
                if (char == "'" && isSpecial(url)) url.query += '%27';else if (char == '#') url.query += '%23';else url.query += percentEncode(char, C0ControlPercentEncodeSet);
              }

              break;

            case FRAGMENT:
              if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);
              break;}


          pointer++;
        }
      }; // `URL` constructor
      // https://url.spec.whatwg.org/#url-class


      var URLConstructor = function URL(url
      /* , base */)
      {
        var that = anInstance(this, URLConstructor, 'URL');
        var base = arguments.length > 1 ? arguments[1] : undefined$1;
        var urlString = String(url);
        var state = setInternalState(that, {
          type: 'URL' });

        var baseState, failure;

        if (base !== undefined$1) {
          if (base instanceof URLConstructor) baseState = getInternalURLState(base);else {
            failure = parseURL(baseState = {}, String(base));
            if (failure) throw TypeError(failure);
          }
        }

        failure = parseURL(state, urlString, null, baseState);
        if (failure) throw TypeError(failure);
        var searchParams = state.searchParams = new URLSearchParams();
        var searchParamsState = getInternalSearchParamsState(searchParams);
        searchParamsState.updateSearchParams(state.query);

        searchParamsState.updateURL = function () {
          state.query = String(searchParams) || null;
        };

        if (!DESCRIPTORS) {
          that.href = serializeURL.call(that);
          that.origin = getOrigin.call(that);
          that.protocol = getProtocol.call(that);
          that.username = getUsername.call(that);
          that.password = getPassword.call(that);
          that.host = getHost.call(that);
          that.hostname = getHostname.call(that);
          that.port = getPort.call(that);
          that.pathname = getPathname.call(that);
          that.search = getSearch.call(that);
          that.searchParams = getSearchParams.call(that);
          that.hash = getHash.call(that);
        }
      };

      var URLPrototype = URLConstructor.prototype;

      var serializeURL = function serializeURL() {
        var url = getInternalURLState(this);
        var scheme = url.scheme;
        var username = url.username;
        var password = url.password;
        var host = url.host;
        var port = url.port;
        var path = url.path;
        var query = url.query;
        var fragment = url.fragment;
        var output = scheme + ':';

        if (host !== null) {
          output += '//';

          if (includesCredentials(url)) {
            output += username + (password ? ':' + password : '') + '@';
          }

          output += serializeHost(host);
          if (port !== null) output += ':' + port;
        } else if (scheme == 'file') output += '//';

        output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
        if (query !== null) output += '?' + query;
        if (fragment !== null) output += '#' + fragment;
        return output;
      };

      var getOrigin = function getOrigin() {
        var url = getInternalURLState(this);
        var scheme = url.scheme;
        var port = url.port;
        if (scheme == 'blob') try {
          return new URL(scheme.path[0]).origin;
        } catch (error) {
          return 'null';
        }
        if (scheme == 'file' || !isSpecial(url)) return 'null';
        return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');
      };

      var getProtocol = function getProtocol() {
        return getInternalURLState(this).scheme + ':';
      };

      var getUsername = function getUsername() {
        return getInternalURLState(this).username;
      };

      var getPassword = function getPassword() {
        return getInternalURLState(this).password;
      };

      var getHost = function getHost() {
        var url = getInternalURLState(this);
        var host = url.host;
        var port = url.port;
        return host === null ? '' : port === null ? serializeHost(host) : serializeHost(host) + ':' + port;
      };

      var getHostname = function getHostname() {
        var host = getInternalURLState(this).host;
        return host === null ? '' : serializeHost(host);
      };

      var getPort = function getPort() {
        var port = getInternalURLState(this).port;
        return port === null ? '' : String(port);
      };

      var getPathname = function getPathname() {
        var url = getInternalURLState(this);
        var path = url.path;
        return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
      };

      var getSearch = function getSearch() {
        var query = getInternalURLState(this).query;
        return query ? '?' + query : '';
      };

      var getSearchParams = function getSearchParams() {
        return getInternalURLState(this).searchParams;
      };

      var getHash = function getHash() {
        var fragment = getInternalURLState(this).fragment;
        return fragment ? '#' + fragment : '';
      };

      var accessorDescriptor = function accessorDescriptor(getter, setter) {
        return {
          get: getter,
          set: setter,
          configurable: true,
          enumerable: true };

      };

      if (DESCRIPTORS) {
        defineProperties(URLPrototype, {
          // `URL.prototype.href` accessors pair
          // https://url.spec.whatwg.org/#dom-url-href
          href: accessorDescriptor(serializeURL, function (href) {
            var url = getInternalURLState(this);
            var urlString = String(href);
            var failure = parseURL(url, urlString);
            if (failure) throw TypeError(failure);
            getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
          }),
          // `URL.prototype.origin` getter
          // https://url.spec.whatwg.org/#dom-url-origin
          origin: accessorDescriptor(getOrigin),
          // `URL.prototype.protocol` accessors pair
          // https://url.spec.whatwg.org/#dom-url-protocol
          protocol: accessorDescriptor(getProtocol, function (protocol) {
            var url = getInternalURLState(this);
            parseURL(url, String(protocol) + ':', SCHEME_START);
          }),
          // `URL.prototype.username` accessors pair
          // https://url.spec.whatwg.org/#dom-url-username
          username: accessorDescriptor(getUsername, function (username) {
            var url = getInternalURLState(this);
            var codePoints = arrayFrom(String(username));
            if (cannotHaveUsernamePasswordPort(url)) return;
            url.username = '';

            for (var i = 0; i < codePoints.length; i++) {
              url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
            }
          }),
          // `URL.prototype.password` accessors pair
          // https://url.spec.whatwg.org/#dom-url-password
          password: accessorDescriptor(getPassword, function (password) {
            var url = getInternalURLState(this);
            var codePoints = arrayFrom(String(password));
            if (cannotHaveUsernamePasswordPort(url)) return;
            url.password = '';

            for (var i = 0; i < codePoints.length; i++) {
              url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
            }
          }),
          // `URL.prototype.host` accessors pair
          // https://url.spec.whatwg.org/#dom-url-host
          host: accessorDescriptor(getHost, function (host) {
            var url = getInternalURLState(this);
            if (url.cannotBeABaseURL) return;
            parseURL(url, String(host), HOST);
          }),
          // `URL.prototype.hostname` accessors pair
          // https://url.spec.whatwg.org/#dom-url-hostname
          hostname: accessorDescriptor(getHostname, function (hostname) {
            var url = getInternalURLState(this);
            if (url.cannotBeABaseURL) return;
            parseURL(url, String(hostname), HOSTNAME);
          }),
          // `URL.prototype.port` accessors pair
          // https://url.spec.whatwg.org/#dom-url-port
          port: accessorDescriptor(getPort, function (port) {
            var url = getInternalURLState(this);
            if (cannotHaveUsernamePasswordPort(url)) return;
            port = String(port);
            if (port == '') url.port = null;else parseURL(url, port, PORT);
          }),
          // `URL.prototype.pathname` accessors pair
          // https://url.spec.whatwg.org/#dom-url-pathname
          pathname: accessorDescriptor(getPathname, function (pathname) {
            var url = getInternalURLState(this);
            if (url.cannotBeABaseURL) return;
            url.path = [];
            parseURL(url, pathname + '', PATH_START);
          }),
          // `URL.prototype.search` accessors pair
          // https://url.spec.whatwg.org/#dom-url-search
          search: accessorDescriptor(getSearch, function (search) {
            var url = getInternalURLState(this);
            search = String(search);

            if (search == '') {
              url.query = null;
            } else {
              if ('?' == search.charAt(0)) search = search.slice(1);
              url.query = '';
              parseURL(url, search, QUERY);
            }

            getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
          }),
          // `URL.prototype.searchParams` getter
          // https://url.spec.whatwg.org/#dom-url-searchparams
          searchParams: accessorDescriptor(getSearchParams),
          // `URL.prototype.hash` accessors pair
          // https://url.spec.whatwg.org/#dom-url-hash
          hash: accessorDescriptor(getHash, function (hash) {
            var url = getInternalURLState(this);
            hash = String(hash);

            if (hash == '') {
              url.fragment = null;
              return;
            }

            if ('#' == hash.charAt(0)) hash = hash.slice(1);
            url.fragment = '';
            parseURL(url, hash, FRAGMENT);
          }) });

      } // `URL.prototype.toJSON` method
      // https://url.spec.whatwg.org/#dom-url-tojson


      redefine(URLPrototype, 'toJSON', function toJSON() {
        return serializeURL.call(this);
      }, {
        enumerable: true });
      // `URL.prototype.toString` method
      // https://url.spec.whatwg.org/#URL-stringification-behavior

      redefine(URLPrototype, 'toString', function toString() {
        return serializeURL.call(this);
      }, {
        enumerable: true });


      if (NativeURL) {
        var nativeCreateObjectURL = NativeURL.createObjectURL;
        var nativeRevokeObjectURL = NativeURL.revokeObjectURL; // `URL.createObjectURL` method
        // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
        // eslint-disable-next-line no-unused-vars

        if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {
          return nativeCreateObjectURL.apply(NativeURL, arguments);
        }); // `URL.revokeObjectURL` method
        // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
        // eslint-disable-next-line no-unused-vars

        if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {
          return nativeRevokeObjectURL.apply(NativeURL, arguments);
        });
      }

      setToStringTag(URLConstructor, 'URL');
      $({
        global: true,
        forced: !USE_NATIVE_URL,
        sham: !DESCRIPTORS },
      {
        URL: URLConstructor });

      /***/
    },
    /* 351 */

    /***/
    function (module, exports, __webpack_require__) {
      var fails = __webpack_require__(6);

      var wellKnownSymbol = __webpack_require__(44);

      var IS_PURE = __webpack_require__(24);

      var ITERATOR = wellKnownSymbol('iterator');
      module.exports = !fails(function () {
        var url = new URL('b?e=1', 'http://a');
        var searchParams = url.searchParams;
        url.pathname = 'c%20d';
        return IS_PURE && !url.toJSON || !searchParams.sort || url.href !== 'http://a/c%20d?e=1' || searchParams.get('e') !== '1' || String(new URLSearchParams('?a=1')) !== 'a=1' || !searchParams[ITERATOR] // throws in Edge
        || new URL('https://a@b').username !== 'a' || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b' // not punycoded in Edge
        || new URL('http://тест').host !== 'xn--e1aybc' // not escaped in Chrome 62-
        || new URL('http://a#б').hash !== '#%D0%B1';
      });
      /***/
    },
    /* 352 */

    /***/
    function (module, exports, __webpack_require__) {
      // based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
      var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

      var base = 36;
      var tMin = 1;
      var tMax = 26;
      var skew = 38;
      var damp = 700;
      var initialBias = 72;
      var initialN = 128; // 0x80

      var delimiter = '-'; // '\x2D'

      var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars

      var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

      var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
      var baseMinusTMin = base - tMin;
      var floor = Math.floor;
      var stringFromCharCode = String.fromCharCode;
      /**
                                                     * Creates an array containing the numeric code points of each Unicode
                                                     * character in the string. While JavaScript uses UCS-2 internally,
                                                     * this function will convert a pair of surrogate halves (each of which
                                                     * UCS-2 exposes as separate characters) into a single code point,
                                                     * matching UTF-16.
                                                     */

      var ucs2decode = function ucs2decode(string) {
        var output = [];
        var counter = 0;
        var length = string.length;

        while (counter < length) {
          var value = string.charCodeAt(counter++);

          if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
            // It's a high surrogate, and there is a next character.
            var extra = string.charCodeAt(counter++);

            if ((extra & 0xFC00) == 0xDC00) {
              // Low surrogate.
              output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
            } else {
              // It's an unmatched surrogate; only append this code unit, in case the
              // next code unit is the high surrogate of a surrogate pair.
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }

        return output;
      };
      /**
          * Converts a digit/integer into a basic code point.
          */


      var digitToBasic = function digitToBasic(digit) {
        //  0..25 map to ASCII a..z or A..Z
        // 26..35 map to ASCII 0..9
        return digit + 22 + 75 * (digit < 26);
      };
      /**
          * Bias adaptation function as per section 3.4 of RFC 3492.
          * https://tools.ietf.org/html/rfc3492#section-3.4
          */


      var adapt = function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);

        for (;
        /* no initialization */
        delta > baseMinusTMin * tMax >> 1; k += base) {
          delta = floor(delta / baseMinusTMin);
        }

        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
      };
      /**
          * Converts a string of Unicode symbols (e.g. a domain name label) to a
          * Punycode string of ASCII-only symbols.
          */
      // eslint-disable-next-line  max-statements


      var encode = function encode(input) {
        var output = []; // Convert the input in UCS-2 to an array of Unicode code points.

        input = ucs2decode(input); // Cache the length.

        var inputLength = input.length; // Initialize the state.

        var n = initialN;
        var delta = 0;
        var bias = initialBias;
        var i, currentValue; // Handle the basic code points.

        for (i = 0; i < input.length; i++) {
          currentValue = input[i];

          if (currentValue < 0x80) {
            output.push(stringFromCharCode(currentValue));
          }
        }

        var basicLength = output.length; // number of basic code points.

        var handledCPCount = basicLength; // number of code points that have been handled;
        // Finish the basic string with a delimiter unless it's empty.

        if (basicLength) {
          output.push(delimiter);
        } // Main encoding loop:


        while (handledCPCount < inputLength) {
          // All non-basic code points < n have been handled already. Find the next larger one:
          var m = maxInt;

          for (i = 0; i < input.length; i++) {
            currentValue = input[i];

            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.


          var handledCPCountPlusOne = handledCPCount + 1;

          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            throw RangeError(OVERFLOW_ERROR);
          }

          delta += (m - n) * handledCPCountPlusOne;
          n = m;

          for (i = 0; i < input.length; i++) {
            currentValue = input[i];

            if (currentValue < n && ++delta > maxInt) {
              throw RangeError(OVERFLOW_ERROR);
            }

            if (currentValue == n) {
              // Represent delta as a generalized variable-length integer.
              var q = delta;

              for (var k = base;;
              /* no condition */
              k += base) {
                var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

                if (q < t) {
                  break;
                }

                var qMinusT = q - t;
                var baseMinusT = base - t;
                output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
                q = floor(qMinusT / baseMinusT);
              }

              output.push(stringFromCharCode(digitToBasic(q)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }

          ++delta;
          ++n;
        }

        return output.join('');
      };

      module.exports = function (input) {
        var encoded = [];
        var labels = input.toLowerCase().replace(regexSeparators, '\u002E').split('.');
        var i, label;

        for (i = 0; i < labels.length; i++) {
          label = labels[i];
          encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);
        }

        return encoded.join('.');
      };
      /***/

    },
    /* 353 */

    /***/
    function (module, exports, __webpack_require__) {
      __webpack_require__(103);

      var $ = __webpack_require__(2);

      var USE_NATIVE_URL = __webpack_require__(351);

      var redefine = __webpack_require__(21);

      var redefineAll = __webpack_require__(132);

      var setToStringTag = __webpack_require__(43);

      var createIteratorConstructor = __webpack_require__(105);

      var InternalStateModule = __webpack_require__(26);

      var anInstance = __webpack_require__(133);

      var hasOwn = __webpack_require__(15);

      var bind = __webpack_require__(79);

      var anObject = __webpack_require__(20);

      var isObject = __webpack_require__(14);

      var getIterator = __webpack_require__(354);

      var getIteratorMethod = __webpack_require__(97);

      var wellKnownSymbol = __webpack_require__(44);

      var ITERATOR = wellKnownSymbol('iterator');
      var URL_SEARCH_PARAMS = 'URLSearchParams';
      var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
      var setInternalState = InternalStateModule.set;
      var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
      var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);
      var plus = /\+/g;
      var sequences = Array(4);

      var percentSequence = function percentSequence(bytes) {
        return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
      };

      var percentDecode = function percentDecode(sequence) {
        try {
          return decodeURIComponent(sequence);
        } catch (error) {
          return sequence;
        }
      };

      var deserialize = function deserialize(it) {
        var result = it.replace(plus, ' ');
        var bytes = 4;

        try {
          return decodeURIComponent(result);
        } catch (error) {
          while (bytes) {
            result = result.replace(percentSequence(bytes--), percentDecode);
          }

          return result;
        }
      };

      var find = /[!'()~]|%20/g;
      var replace = {
        '!': '%21',
        "'": '%27',
        '(': '%28',
        ')': '%29',
        '~': '%7E',
        '%20': '+' };


      var replacer = function replacer(match) {
        return replace[match];
      };

      var serialize = function serialize(it) {
        return encodeURIComponent(it).replace(find, replacer);
      };

      var parseSearchParams = function parseSearchParams(result, query) {
        if (query) {
          var attributes = query.split('&');
          var i = 0;
          var attribute, entry;

          while (i < attributes.length) {
            attribute = attributes[i++];

            if (attribute.length) {
              entry = attribute.split('=');
              result.push({
                key: deserialize(entry.shift()),
                value: deserialize(entry.join('=')) });

            }
          }
        }

        return result;
      };

      var updateSearchParams = function updateSearchParams(query) {
        this.entries.length = 0;
        parseSearchParams(this.entries, query);
      };

      var validateArgumentsLength = function validateArgumentsLength(passed, required) {
        if (passed < required) throw TypeError('Not enough arguments');
      };

      var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
        setInternalState(this, {
          type: URL_SEARCH_PARAMS_ITERATOR,
          iterator: getIterator(getInternalParamsState(params).entries),
          kind: kind });

      }, 'Iterator', function next() {
        var state = getInternalIteratorState(this);
        var kind = state.kind;
        var step = state.iterator.next();
        var entry = step.value;

        if (!step.done) {
          step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
        }

        return step;
      }); // `URLSearchParams` constructor
      // https://url.spec.whatwg.org/#interface-urlsearchparams

      var URLSearchParamsConstructor = function URLSearchParams()
      /* init */
      {
        anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
        var init = arguments.length > 0 ? arguments[0] : undefined$1;
        var that = this;
        var entries = [];
        var iteratorMethod, iterator, step, entryIterator, first, second, key;
        setInternalState(that, {
          type: URL_SEARCH_PARAMS,
          entries: entries,
          updateURL: null,
          updateSearchParams: updateSearchParams });


        if (init !== undefined$1) {
          if (isObject(init)) {
            iteratorMethod = getIteratorMethod(init);

            if (typeof iteratorMethod === 'function') {
              iterator = iteratorMethod.call(init);

              while (!(step = iterator.next()).done) {
                entryIterator = getIterator(anObject(step.value));
                if ((first = entryIterator.next()).done || (second = entryIterator.next()).done || !entryIterator.next().done) throw TypeError('Expected sequence with length 2');
                entries.push({
                  key: first.value + '',
                  value: second.value + '' });

              }
            } else for (key in init) if (hasOwn(init, key)) entries.push({
              key: key,
              value: init[key] + '' });

          } else {
            parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');
          }
        }
      };

      var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;
      redefineAll(URLSearchParamsPrototype, {
        // `URLSearchParams.prototype.appent` method
        // https://url.spec.whatwg.org/#dom-urlsearchparams-append
        append: function append(name, value) {
          validateArgumentsLength(arguments.length, 2);
          var state = getInternalParamsState(this);
          state.entries.push({
            key: name + '',
            value: value + '' });

          if (state.updateURL) state.updateURL();
        },
        // `URLSearchParams.prototype.delete` method
        // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
        'delete': function (name) {
          validateArgumentsLength(arguments.length, 1);
          var state = getInternalParamsState(this);
          var entries = state.entries;
          var key = name + '';
          var i = 0;

          while (i < entries.length) {
            if (entries[i].key === key) entries.splice(i, 1);else i++;
          }

          if (state.updateURL) state.updateURL();
        },
        // `URLSearchParams.prototype.get` method
        // https://url.spec.whatwg.org/#dom-urlsearchparams-get
        get: function get(name) {
          validateArgumentsLength(arguments.length, 1);
          var entries = getInternalParamsState(this).entries;
          var key = name + '';
          var i = 0;

          for (; i < entries.length; i++) if (entries[i].key === key) return entries[i].value;

          return null;
        },
        // `URLSearchParams.prototype.getAll` method
        // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
        getAll: function getAll(name) {
          validateArgumentsLength(arguments.length, 1);
          var entries = getInternalParamsState(this).entries;
          var key = name + '';
          var result = [];
          var i = 0;

          for (; i < entries.length; i++) if (entries[i].key === key) result.push(entries[i].value);

          return result;
        },
        // `URLSearchParams.prototype.has` method
        // https://url.spec.whatwg.org/#dom-urlsearchparams-has
        has: function has(name) {
          validateArgumentsLength(arguments.length, 1);
          var entries = getInternalParamsState(this).entries;
          var key = name + '';
          var i = 0;

          while (i < entries.length) if (entries[i++].key === key) return true;

          return false;
        },
        // `URLSearchParams.prototype.set` method
        // https://url.spec.whatwg.org/#dom-urlsearchparams-set
        set: function set(name, value) {
          validateArgumentsLength(arguments.length, 1);
          var state = getInternalParamsState(this);
          var entries = state.entries;
          var found = false;
          var key = name + '';
          var val = value + '';
          var i = 0;
          var entry;

          for (; i < entries.length; i++) {
            entry = entries[i];

            if (entry.key === key) {
              if (found) entries.splice(i--, 1);else {
                found = true;
                entry.value = val;
              }
            }
          }

          if (!found) entries.push({
            key: key,
            value: val });

          if (state.updateURL) state.updateURL();
        },
        // `URLSearchParams.prototype.sort` method
        // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
        sort: function sort() {
          var state = getInternalParamsState(this);
          var entries = state.entries; // Array#sort is not stable in some engines

          var slice = entries.slice();
          var entry, i, j;
          entries.length = 0;

          for (i = 0; i < slice.length; i++) {
            entry = slice[i];

            for (j = 0; j < i; j++) if (entries[j].key > entry.key) {
              entries.splice(j, 0, entry);
              break;
            }

            if (j === i) entries.push(entry);
          }

          if (state.updateURL) state.updateURL();
        },
        // `URLSearchParams.prototype.forEach` method
        forEach: function forEach(callback
        /* , thisArg */)
        {
          var entries = getInternalParamsState(this).entries;
          var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined$1, 3);
          var i = 0;
          var entry;

          while (i < entries.length) {
            entry = entries[i++];
            boundFunction(entry.value, entry.key, this);
          }
        },
        // `URLSearchParams.prototype.keys` method
        keys: function keys() {
          return new URLSearchParamsIterator(this, 'keys');
        },
        // `URLSearchParams.prototype.values` method
        values: function values() {
          return new URLSearchParamsIterator(this, 'values');
        },
        // `URLSearchParams.prototype.entries` method
        entries: function entries() {
          return new URLSearchParamsIterator(this, 'entries');
        } },
      {
        enumerable: true });
      // `URLSearchParams.prototype[@@iterator]` method

      redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries); // `URLSearchParams.prototype.toString` method
      // https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior

      redefine(URLSearchParamsPrototype, 'toString', function toString() {
        var entries = getInternalParamsState(this).entries;
        var result = [];
        var i = 0;
        var entry;

        while (i < entries.length) {
          entry = entries[i++];
          result.push(serialize(entry.key) + '=' + serialize(entry.value));
        }

        return result.join('&');
      }, {
        enumerable: true });

      setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);
      $({
        global: true,
        forced: !USE_NATIVE_URL },
      {
        URLSearchParams: URLSearchParamsConstructor });

      module.exports = {
        URLSearchParams: URLSearchParamsConstructor,
        getState: getInternalParamsState };

      /***/
    },
    /* 354 */

    /***/
    function (module, exports, __webpack_require__) {
      var anObject = __webpack_require__(20);

      var getIteratorMethod = __webpack_require__(97);

      module.exports = function (it) {
        var iteratorMethod = getIteratorMethod(it);

        if (typeof iteratorMethod != 'function') {
          throw TypeError(String(it) + ' is not iterable');
        }

        return anObject(iteratorMethod.call(it));
      };
      /***/

    },
    /* 355 */

    /***/
    function (module, exports, __webpack_require__) {
      var $ = __webpack_require__(2); // `URL.prototype.toJSON` method
      // https://url.spec.whatwg.org/#dom-url-tojson


      $({
        target: 'URL',
        proto: true,
        enumerable: true },
      {
        toJSON: function toJSON() {
          return URL.prototype.toString.call(this);
        } });

      /***/
    }
    /******/]);

  }(); // START regenerator-runtime/runtime

  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var runtime = function (exports) {
    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.

    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.

      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg) };

      } catch (err) {
        return {
          type: "throw",
          arg: err };

      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.

    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.


    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;

        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    }; // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.


    exports.awrap = function (arg) {
      return {
        __await: arg };

    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      } // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).


      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.

    exports.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          } // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done };

          } else if (record.type === "throw") {
            state = GenStateCompleted; // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.

            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    } // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.


    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      } // The delegate iterator is finished, so forget it and continue with
      // the outer generator.


      context.delegate = null;
      return ContinueSentinel;
    } // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.


    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0] };


      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{
        tryLoc: "root" }];

      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse(); // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.

      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        } // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.


        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
          next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      } // Return an iterator with no values.


      return {
        next: doneResult };

    }

    exports.values = values;

    function doneResult() {
      return {
        value: undefined$1,
        done: true };

    }

    Context.prototype = {
      constructor: Context,
      reset: function (skipTempReset) {
        this.prev = 0;
        this.next = 0; // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.

        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined$1;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },
      stop: function () {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function (exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function (type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function (record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function (finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function (tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        } // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.


        throw new Error("illegal catch attempt");
      },
      delegateYield: function (iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc };


        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      } };
    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.

    return exports;
  }( // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  module.exports);

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
  }
});
var polyfill$1 = unwrapExports(polyfill);

/* eslint no-undef: 0 */
// we're running javascript in javascript
// nothing special is required
WCCode.languages.javascript = {
  meta: { url: import.meta.src },
  fileExt: '.js',
  // alternate console for the environment
  createAlternateConsole (interpreter) {
    return {
      log (val) {
        interpreter.zone.console.addText(val);
      }
    }
  },

  /**
   * Interpreter class
   */
  Interpreter: class {
    constructor (codeZone) {
      this.zone = codeZone;
      this.zone.setInterpreter(this);
      this.currentVariables = {};
    }

    async run (code) {
      const toGetVariables = this.getVariables(code);
      const finalcode = `
      (async function(){
          const WCCodeJS = WCCode.languages.javascript;
          const interpreter = WCCode
                                 .zones
                                 .get(${this.zone.zoneId})
                                 .interpreter;
          const console = WCCodeJS.createAlternateConsole(interpreter);
          ${this.addVariablesString()}
          ${code}
          ${this.getVariablesString(toGetVariables)};
      })`;

      // eslint-disable-next-line no-eval
      await eval(finalcode)();
    }

    getVariables (code) {
      function getVariablesInObject (kind, properties) {
        const variables = [];
        for (const property of properties) {
          if (property.type === 'Property') {
            variables.push({ variable: property.key.name, kind });
          } else if (property.type === 'RestElement') {
            variables.push({ variable: property.argument.name, kind });
          }
        }
        return variables
      }

      function getVariablesInArray (kind, elements) {
        const variables = [];
        // multiple variables
        for (const element of elements) {
          if (element.type === 'Identifier') {
            variables.push({ variable: element.name, kind });
          } else if (element.type === 'ArrayPattern') {
            variables.push(...getVariablesInArray(kind, element.elements));
          } else if (element.type === 'ObjectPattern') {
            variables.push(...getVariablesInObject(kind, element.properties));
          } else if (element.type === 'RestElement') {
            variables.push({ variable: element.argument.name, kind });
          }
        }
        return variables
      }

      const variables = [];
      const parsed = parse(code, { allowAwaitOutsideFunction: true })
        .body;
      for (const l of parsed) {
        if (l.type === 'VariableDeclaration') {
          const kind = l.kind; // consts, lets or vars
          const declaration = l.declarations[0];
          const variableType = declaration.id.type;
          if (variableType === 'Identifier') {
            variables.push({ variable: declaration.id.name, kind });
          } else if (variableType === 'ArrayPattern') {
            variables.push(...getVariablesInArray(kind, declaration.id.elements));
          } else if (variableType === 'ObjectPattern') {
            variables.push(...getVariablesInObject(kind, declaration.id.properties));
          }
        }
      }

      return variables
    }

    /**
     * internally used,
     * assigns the const, let, and var variables to the Interpreter
     */
    addVariablesString () {
      let varsString = '';
      for (const variable in this.currentVariables) {
        const variableProp = this.currentVariables[variable];
        varsString += `${variableProp.kind} ${variable} = interpreter.currentVariables.${variable}.value\n`;
      }
      if (!varsString === '') varsString += ';';
      return varsString
    }

    /**
     * retrieves the values of new variables + updates current variables,
     * and stores to for use in the next session
     */
    getVariablesString (variables) {
      let varsString = '';

      // update current variables
      for (const variable in this.currentVariables) {
        const variableProp = this.currentVariables[variable];
        varsString += `interpreter.currentVariables["${variable}"] = {kind: '${variableProp.kind}', value: ${variable}}\n`;
      }

      // add new variables
      for (let i = 0; i < variables.length; i++) {
        const variable = variables[i];
        varsString += `interpreter.currentVariables["${variable.variable}"] = {kind: '${variable.kind}', value: ${variable.variable}}\n`;
      }

      if (!varsString === '') varsString += ';';
      return varsString
    }
  }

};
